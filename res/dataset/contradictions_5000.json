{
    "content": [
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset quota('5', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 05:53:29.204977') end timestamp('2019-01-25 13:16:29.204982')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:11:29.204949') end timestamp('2019-01-25 13:19:29.204972')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('http'), service('bittorrent') start timestamp('2019-01-25 04:20:29.389848') end timestamp('2019-01-25 14:05:29.389852')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow protocol('http'), traffic('social-media') start timestamp('2019-01-25 05:39:29.389822') end timestamp('2019-01-25 14:05:29.389842')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('6', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 09:21:29.598904') end timestamp('2019-01-25 13:26:29.598908')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 02:06:29.598840') end timestamp('2019-01-25 08:20:29.598884')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('dpi'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') start timestamp('2019-01-25 04:48:30.398702') end timestamp('2019-01-25 13:07:30.398706')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 05:58:30.398670') end timestamp('2019-01-25 13:29:30.398696')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('dpi') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 09:04:30.635946') end timestamp('2019-01-25 13:27:30.635963')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow protocol('telnet'), protocol('icmp') start timestamp('2019-01-25 03:40:30.635875') end timestamp('2019-01-25 07:09:30.635940')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow service('netflix'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('telnet'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 09:54:31.276836') end timestamp('2019-01-25 14:00:31.276840')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 03:11:31.276789') end timestamp('2019-01-25 08:51:31.276830')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 04:33:31.372300') end timestamp('2019-01-25 13:52:31.372304')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 04:47:31.372276') end timestamp('2019-01-25 14:03:31.372294')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 08:16:31.372531') end timestamp('2019-01-25 13:37:31.372535')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 02:58:31.372505') end timestamp('2019-01-25 07:11:31.372512')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') set quota('3', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '50', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('1', 'gb/wk') block protocol('telnet'), service('youtube') start timestamp('2019-01-25 05:29:31.822253') end timestamp('2019-01-25 13:58:31.822256')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids') unset bandwidth('max', '10', 'mbps') allow protocol('quic'), service('youtube') start timestamp('2019-01-25 05:46:31.822229') end timestamp('2019-01-25 13:35:31.822247')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 09:07:32.378993') end timestamp('2019-01-25 13:41:32.378997')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 02:19:32.378971') end timestamp('2019-01-25 08:12:32.378987')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('4', 'gb/wk') block protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 09:57:33.032765') end timestamp('2019-01-25 14:21:33.032770')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow protocol('quic'), service('bittorrent') start timestamp('2019-01-25 03:41:33.032725') end timestamp('2019-01-25 07:04:33.032757')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('tcp'), service('netflix') start timestamp('2019-01-25 08:54:33.693991') end timestamp('2019-01-25 13:53:33.693995')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 02:16:33.693968') end timestamp('2019-01-25 07:14:33.693985')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '20', 'mbps') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 04:38:33.722105') end timestamp('2019-01-25 13:33:33.722109')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') unset quota('7', 'gb/wk') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 05:42:33.722082') end timestamp('2019-01-25 14:46:33.722099')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow protocol('sftp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '50', 'mbps') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 09:58:34.238817') end timestamp('2019-01-25 14:06:34.238821')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '80', 'mbps') allow service('stremio'), protocol('tcp') start timestamp('2019-01-25 02:47:34.238794') end timestamp('2019-01-25 08:45:34.238811')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') set quota('4', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('2', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') set quota('9', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') block protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 09:33:34.954389') end timestamp('2019-01-25 13:57:34.954393')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 02:23:34.954356') end timestamp('2019-01-25 07:47:34.954383')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('sftp'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '10', 'mbps') block protocol('https'), service('instagram') start timestamp('2019-01-25 09:58:35.382773') end timestamp('2019-01-25 13:06:35.382778')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('popcorn-time'), service('netflix') start timestamp('2019-01-25 03:49:35.382747') end timestamp('2019-01-25 08:42:35.382767')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('ids') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('5', 'gb/wk') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk') allow service('vimeo'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '80', 'mbps') block protocol('sftp'), protocol('udp') start timestamp('2019-01-25 04:16:36.110608') end timestamp('2019-01-25 14:23:36.110613')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('2', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 05:55:36.110580') end timestamp('2019-01-25 15:00:36.110602')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('ids') set quota('9', 'gb/wk') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') unset quota('9', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset quota('5', 'gb/wk') allow protocol('telnet'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 05:39:36.206059') end timestamp('2019-01-25 15:03:36.206063')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') unset quota('6', 'gb/wk') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 04:14:36.206036') end timestamp('2019-01-25 13:56:36.206053')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') set quota('6', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') set bandwidth('min', '40', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('max', '20', 'mbps') allow service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall') set quota('8', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 08:23:36.433467') end timestamp('2019-01-25 14:24:36.433472')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 02:47:36.433416') end timestamp('2019-01-25 08:14:36.433446')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 04:09:36.840755') end timestamp('2019-01-25 13:40:36.840759')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('udp'), service('youtube') start timestamp('2019-01-25 05:46:36.840734') end timestamp('2019-01-25 13:51:36.840749')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('torrent'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block protocol('tcp'), protocol('snmp') start timestamp('2019-01-25 09:07:37.713276') end timestamp('2019-01-25 14:56:37.713281')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 04:00:37.713248') end timestamp('2019-01-25 08:16:37.713270')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:47:37.713365') end timestamp('2019-01-25 14:33:37.713369')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 02:42:37.713353') end timestamp('2019-01-25 08:09:37.713360')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') start timestamp('2019-01-25 08:32:38.176172') end timestamp('2019-01-25 13:15:38.176177')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 02:05:38.176160') end timestamp('2019-01-25 07:08:38.176166')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('ids') block traffic('social-media'), service('netflix') start timestamp('2019-01-25 09:23:38.368660') end timestamp('2019-01-25 14:29:38.368664')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') block traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 02:14:38.368617') end timestamp('2019-01-25 09:03:38.368654')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset quota('6', 'gb/wk') block service('amazon-prime'), protocol('snmp') start timestamp('2019-01-25 05:45:38.678033') end timestamp('2019-01-25 13:22:38.678039')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 05:42:38.677990') end timestamp('2019-01-25 15:00:38.678023')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('https'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('http'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 05:09:39.102778') end timestamp('2019-01-25 14:01:39.102783')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 04:19:39.102751') end timestamp('2019-01-25 14:13:39.102772')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 08:41:39.769938') end timestamp('2019-01-25 14:15:39.769942')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 02:40:39.769910') end timestamp('2019-01-25 08:26:39.769931')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 09:38:39.841599') end timestamp('2019-01-25 14:54:39.841604')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow protocol('http'), service('popcorn-time') start timestamp('2019-01-25 03:34:39.841578') end timestamp('2019-01-25 07:47:39.841593')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block service('vimeo'), service('facebook') start timestamp('2019-01-25 09:35:40.098862') end timestamp('2019-01-25 14:49:40.098865')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 03:03:40.098841') end timestamp('2019-01-25 08:40:40.098845')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') block protocol('https'), service('stremio') start timestamp('2019-01-25 08:44:40.098969') end timestamp('2019-01-25 14:18:40.098972')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') allow protocol('https'), traffic('streaming') start timestamp('2019-01-25 03:33:40.098957') end timestamp('2019-01-25 08:22:40.098964')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '40', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('2', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('dpi'), middlebox('load-balancer') block service('facebook'), service('netflix') start timestamp('2019-01-25 09:45:41.371023') end timestamp('2019-01-25 14:50:41.371027')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow service('instagram'), service('netflix') start timestamp('2019-01-25 02:31:41.371000') end timestamp('2019-01-25 07:57:41.371017')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 08:40:41.371178') end timestamp('2019-01-25 13:57:41.371182')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 02:30:41.371166') end timestamp('2019-01-25 08:34:41.371173')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset quota('6', 'gb/wk') start timestamp('2019-01-25 05:01:41.968603') end timestamp('2019-01-25 14:09:41.968607')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') unset quota('4', 'gb/wk') start timestamp('2019-01-25 05:22:41.968581') end timestamp('2019-01-25 14:58:41.968597')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '90', 'mbps') block protocol('icmp'), service('netflix') start timestamp('2019-01-25 05:47:42.269703') end timestamp('2019-01-25 14:51:42.269707')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block service('vimeo'), protocol('snmp') start timestamp('2019-01-25 04:03:42.269675') end timestamp('2019-01-25 13:46:42.269697')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('quic'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set quota('9', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('ids') set quota('9', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('telnet'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 08:56:45.310593') end timestamp('2019-01-25 13:38:45.310597')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 03:35:45.310564') end timestamp('2019-01-25 08:11:45.310584')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('8', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 08:56:47.600874') end timestamp('2019-01-25 13:43:47.600877')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('tcp'), service('instagram') start timestamp('2019-01-25 03:51:47.600866') end timestamp('2019-01-25 07:59:47.600870')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('ids'), middlebox('load-balancer') unset quota('7', 'gb/wk') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset quota('7', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('https'), service('youtube') start timestamp('2019-01-25 08:54:47.895899') end timestamp('2019-01-25 13:57:47.895904')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 03:54:47.895861') end timestamp('2019-01-25 08:27:47.895893')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '90', 'mbps') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 05:21:48.397312') end timestamp('2019-01-25 14:03:48.397316')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset bandwidth('max', '40', 'mbps') block protocol('http'), protocol('snmp') start timestamp('2019-01-25 05:00:48.397289') end timestamp('2019-01-25 13:35:48.397306')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 08:43:48.592259') end timestamp('2019-01-25 13:59:48.592263')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 03:14:48.592220') end timestamp('2019-01-25 07:35:48.592252')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('quic'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '50', 'mbps') allow protocol('http'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 09:33:48.966932') end timestamp('2019-01-25 13:50:48.966936')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 03:25:48.966905') end timestamp('2019-01-25 07:59:48.966923')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('sftp') start timestamp('2019-01-25 04:16:49.299910') end timestamp('2019-01-25 13:11:49.299927')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 05:55:49.299870') end timestamp('2019-01-25 15:03:49.299904')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 04:28:49.733936') end timestamp('2019-01-25 14:07:49.733940')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 05:44:49.733909') end timestamp('2019-01-25 14:18:49.733930')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 08:34:49.748209') end timestamp('2019-01-25 14:45:49.748212')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 02:26:49.748186') end timestamp('2019-01-25 07:33:49.748190')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '10', 'mbps') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 04:52:49.952000') end timestamp('2019-01-25 14:00:49.952004')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('tcp'), service('instagram') start timestamp('2019-01-25 05:10:49.951980') end timestamp('2019-01-25 14:51:49.951995')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') start timestamp('2019-01-25 05:41:50.244826') end timestamp('2019-01-25 13:47:50.244831')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:38:50.244800') end timestamp('2019-01-25 13:41:50.244820')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('facebook'), service('netflix') start timestamp('2019-01-25 09:19:50.332796') end timestamp('2019-01-25 14:26:50.332800')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') unset quota('6', 'gb/wk') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 03:54:50.332775') end timestamp('2019-01-25 07:11:50.332791')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 09:24:50.543333') end timestamp('2019-01-25 13:53:50.543337')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('smtp'), service('bittorrent') start timestamp('2019-01-25 03:37:50.543326') end timestamp('2019-01-25 07:23:50.543329')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('instagram'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control') set quota('8', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') start timestamp('2019-01-25 09:39:51.415213') end timestamp('2019-01-25 14:17:51.415217')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') start timestamp('2019-01-25 02:45:51.415191') end timestamp('2019-01-25 07:56:51.415207')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('https'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 08:42:51.642995') end timestamp('2019-01-25 13:23:51.643000')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 03:55:51.642958') end timestamp('2019-01-25 07:52:51.642976')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '70', 'mbps') block service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') set quota('7', 'gb/wk') block service('vimeo'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 09:12:52.168862') end timestamp('2019-01-25 14:05:52.168866')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 02:47:52.168841') end timestamp('2019-01-25 08:28:52.168856')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 08:19:52.248034') end timestamp('2019-01-25 14:39:52.248038')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 02:24:52.248013') end timestamp('2019-01-25 07:28:52.248017')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('stremio'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 08:37:53.058412') end timestamp('2019-01-25 14:15:53.058416')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('ids') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 03:45:53.058392') end timestamp('2019-01-25 07:49:53.058406')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('load-balancer'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('http'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') add middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('telnet'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids') set quota('3', 'gb/wk') allow protocol('telnet'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi') set quota('9', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('load-balancer') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('amazon-prime'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('netflix'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') allow protocol('https'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 09:56:54.396452') end timestamp('2019-01-25 14:20:54.396456')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('dpi') allow service('stremio'), service('instagram') start timestamp('2019-01-25 03:55:54.396431') end timestamp('2019-01-25 08:15:54.396446')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') start timestamp('2019-01-25 04:20:54.449529') end timestamp('2019-01-25 14:36:54.449534')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') unset bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 05:48:54.449509') end timestamp('2019-01-25 14:43:54.449523')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('4', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('instagram'), service('facebook') start timestamp('2019-01-25 04:49:54.616717') end timestamp('2019-01-25 13:49:54.616721')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 04:46:54.616695') end timestamp('2019-01-25 13:08:54.616712')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 05:51:54.716371') end timestamp('2019-01-25 14:00:54.716375')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:20:54.716353') end timestamp('2019-01-25 14:26:54.716366')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('icmp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 05:52:54.985921') end timestamp('2019-01-25 13:26:54.985924')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '70', 'mbps') allow service('stremio'), service('facebook') start timestamp('2019-01-25 05:31:54.985899') end timestamp('2019-01-25 14:28:54.985915')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('smtp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('sftp'), protocol('quic') start timestamp('2019-01-25 04:12:55.584140') end timestamp('2019-01-25 13:23:55.584144')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 05:13:55.584119') end timestamp('2019-01-25 14:54:55.584135')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') start timestamp('2019-01-25 05:34:55.691751') end timestamp('2019-01-25 14:50:55.691755')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:33:55.691731') end timestamp('2019-01-25 13:23:55.691745')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk') block protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('5', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 05:40:56.096542') end timestamp('2019-01-25 13:05:56.096546')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') unset bandwidth('min', '70', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 05:53:56.096520') end timestamp('2019-01-25 14:00:56.096536')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') block protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('torrent'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('parental-control') set quota('6', 'gb/wk') block service('bittorrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('5', 'gb/wk') allow service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block service('instagram'), protocol('udp') start timestamp('2019-01-25 09:53:57.619834') end timestamp('2019-01-25 14:43:57.619838')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 03:30:57.619814') end timestamp('2019-01-25 08:20:57.619828')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '60', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('dpi') set quota('7', 'gb/wk') block protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 05:50:58.901285') end timestamp('2019-01-25 15:01:58.901289')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset quota('5', 'gb/wk') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 04:05:58.901265') end timestamp('2019-01-25 13:45:58.901280')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') unset quota('9', 'gb/wk') start timestamp('2019-01-25 05:11:58.927421') end timestamp('2019-01-25 13:49:58.927425')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') unset bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 05:26:58.927404') end timestamp('2019-01-25 13:05:58.927415')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '90', 'mbps') allow protocol('ftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set quota('8', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('http'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('youtube') start timestamp('2019-01-25 08:44:01.235177') end timestamp('2019-01-25 14:53:01.235181')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('netflix') start timestamp('2019-01-25 02:28:01.235157') end timestamp('2019-01-25 08:20:01.235172')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('snmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') set bandwidth('max', '50', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '20', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 05:33:02.085817') end timestamp('2019-01-25 13:10:02.085821')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('3', 'gb/wk') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 05:26:02.085794') end timestamp('2019-01-25 14:46:02.085811')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 09:03:02.112696') end timestamp('2019-01-25 13:31:02.112700')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('6', 'gb/wk') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 02:33:02.112678') end timestamp('2019-01-25 07:33:02.112690')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block protocol('icmp'), protocol('udp') start timestamp('2019-01-25 08:11:02.190684') end timestamp('2019-01-25 13:26:02.190688')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 02:24:02.190665') end timestamp('2019-01-25 07:50:02.190678')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 09:03:02.190879') end timestamp('2019-01-25 14:12:02.190882')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 03:16:02.190871') end timestamp('2019-01-25 08:49:02.190875')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') set quota('3', 'gb/wk') allow protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('quic'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('http'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:50:03.238395') end timestamp('2019-01-25 15:02:03.238399')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 04:11:03.238375') end timestamp('2019-01-25 15:03:03.238390')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('http'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('quic'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') block service('stremio'), service('popcorn-time') start timestamp('2019-01-25 09:18:04.045951') end timestamp('2019-01-25 14:25:04.045968')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 03:23:04.045902') end timestamp('2019-01-25 07:47:04.045932')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('ids') set quota('2', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow protocol('tcp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('3', 'gb/wk') start timestamp('2019-01-25 05:00:04.086062') end timestamp('2019-01-25 14:07:04.086066')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') start timestamp('2019-01-25 04:24:04.086041') end timestamp('2019-01-25 14:28:04.086056')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '70', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('3', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') add middlebox('ids'), middlebox('firewall') unset quota('5', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') set bandwidth('max', '80', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 08:46:04.641694') end timestamp('2019-01-25 13:58:04.641698')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 03:01:04.641672') end timestamp('2019-01-25 08:42:04.641688')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') add middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('snmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('1', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 09:22:05.145192') end timestamp('2019-01-25 14:52:05.145196')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow service('instagram'), protocol('ftp') start timestamp('2019-01-25 03:25:05.145171') end timestamp('2019-01-25 08:31:05.145185')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('1', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('sftp'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 09:00:05.779050') end timestamp('2019-01-25 15:00:05.779054')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('facebook') start timestamp('2019-01-25 02:31:05.779028') end timestamp('2019-01-25 08:11:05.779044')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') allow service('facebook'), traffic('social-media') start timestamp('2019-01-25 10:02:06.388322') end timestamp('2019-01-25 13:17:06.388326')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block protocol('https'), protocol('quic') start timestamp('2019-01-25 03:35:06.388302') end timestamp('2019-01-25 07:35:06.388317')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') set quota('9', 'gb/wk') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '90', 'mbps') block service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 09:20:06.666556') end timestamp('2019-01-25 13:57:06.666560')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') start timestamp('2019-01-25 03:30:06.666534') end timestamp('2019-01-25 08:51:06.666550')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block protocol('https'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('social-media'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 04:08:07.290750') end timestamp('2019-01-25 14:31:07.290754')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset quota('9', 'gb/wk') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 04:14:07.290728') end timestamp('2019-01-25 13:13:07.290744')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 08:55:08.191075') end timestamp('2019-01-25 13:06:08.191078')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') start timestamp('2019-01-25 02:46:08.191054') end timestamp('2019-01-25 07:50:08.191069')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('popcorn-time'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('telnet'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('popcorn-time'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '10', 'mbps') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block protocol('sftp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '20', 'mbps') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 04:38:10.369181') end timestamp('2019-01-25 13:39:10.369185')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow protocol('sftp'), service('instagram') start timestamp('2019-01-25 05:28:10.369159') end timestamp('2019-01-25 14:56:10.369176')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set quota('8', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 04:15:10.542842') end timestamp('2019-01-25 14:14:10.542846')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 05:30:10.542820') end timestamp('2019-01-25 14:31:10.542837')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow protocol('telnet'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('snmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('instagram'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '70', 'mbps') block protocol('udp'), service('netflix') start timestamp('2019-01-25 04:32:13.136792') end timestamp('2019-01-25 14:03:13.136795')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('youtube'), service('facebook') start timestamp('2019-01-25 04:19:13.136769') end timestamp('2019-01-25 13:50:13.136786')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('sftp'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') unset bandwidth('min', '80', 'mbps') allow protocol('sftp'), protocol('smtp') start timestamp('2019-01-25 04:21:14.027358') end timestamp('2019-01-25 13:42:14.027362')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 04:48:14.027334') end timestamp('2019-01-25 14:49:14.027352')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('8', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '90', 'mbps') block protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 05:02:14.067068') end timestamp('2019-01-25 14:28:14.067072')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('5', 'gb/wk') allow service('instagram'), service('youtube') start timestamp('2019-01-25 04:53:14.067047') end timestamp('2019-01-25 15:02:14.067062')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('instagram'), service('netflix') start timestamp('2019-01-25 09:00:14.067288') end timestamp('2019-01-25 14:20:14.067305')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 02:42:14.067262') end timestamp('2019-01-25 08:07:14.067283')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 05:21:14.187402') end timestamp('2019-01-25 13:06:14.187406')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('6', 'gb/wk') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:41:14.187380') end timestamp('2019-01-25 13:33:14.187396')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 09:43:14.465744') end timestamp('2019-01-25 14:05:14.465748')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('firewall'), middlebox('dpi') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 03:46:14.465723') end timestamp('2019-01-25 07:58:14.465738')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '40', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('min', '70', 'mbps') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 04:18:15.347066') end timestamp('2019-01-25 14:32:15.347070')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 04:37:15.347044') end timestamp('2019-01-25 14:23:15.347061')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '70', 'mbps') block service('instagram'), protocol('udp') start timestamp('2019-01-25 05:19:15.732245') end timestamp('2019-01-25 13:52:15.732249')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('1', 'gb/wk') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 05:25:15.732216') end timestamp('2019-01-25 13:46:15.732239')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 08:59:16.069824') end timestamp('2019-01-25 13:27:16.069828')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:08:16.069803') end timestamp('2019-01-25 08:57:16.069818')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('stremio'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('parental-control') set quota('5', 'gb/wk') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('tcp'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow protocol('quic'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('6', 'gb/wk') block service('vimeo'), service('instagram') start timestamp('2019-01-25 05:34:16.952136') end timestamp('2019-01-25 14:28:16.952141')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 05:44:16.952115') end timestamp('2019-01-25 14:47:16.952131')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('dpi'), middlebox('parental-control') block protocol('ftp'), traffic('streaming') start timestamp('2019-01-25 09:21:17.071745') end timestamp('2019-01-25 13:42:17.071750')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('stremio'), service('netflix') start timestamp('2019-01-25 02:05:17.071724') end timestamp('2019-01-25 07:25:17.071739')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('8', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') start timestamp('2019-01-25 09:49:19.787559') end timestamp('2019-01-25 14:09:19.787576')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') start timestamp('2019-01-25 03:40:19.787511') end timestamp('2019-01-25 08:14:19.787540')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 09:38:19.930054') end timestamp('2019-01-25 14:13:19.930057')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('dpi') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 03:43:19.930047') end timestamp('2019-01-25 07:34:19.930050')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 05:18:20.187844') end timestamp('2019-01-25 13:38:20.187848')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('ids') set quota('4', 'gb/wk') allow service('stremio'), protocol('udp') start timestamp('2019-01-25 04:47:20.187820') end timestamp('2019-01-25 14:36:20.187838')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 09:09:20.434035') end timestamp('2019-01-25 14:02:20.434039')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 02:20:20.434013') end timestamp('2019-01-25 08:18:20.434029')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 08:23:20.608335') end timestamp('2019-01-25 14:12:20.608339')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 02:51:20.608313') end timestamp('2019-01-25 07:30:20.608329')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('icmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block protocol('https'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 09:14:20.838195') end timestamp('2019-01-25 13:22:20.838212')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') allow protocol('tcp'), protocol('udp') start timestamp('2019-01-25 03:58:20.838159') end timestamp('2019-01-25 07:17:20.838174')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 09:18:21.437439') end timestamp('2019-01-25 14:01:21.437447')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:01:21.437395') end timestamp('2019-01-25 07:05:21.437429')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('max', '40', 'mbps') allow protocol('http'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 08:49:22.452083') end timestamp('2019-01-25 14:18:22.452086')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('parental-control') allow protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 02:24:22.452075') end timestamp('2019-01-25 07:21:22.452079')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow service('youtube'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('stremio'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('vimeo'), service('instagram') start timestamp('2019-01-25 08:46:22.908674') end timestamp('2019-01-25 14:13:22.908678')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 03:53:22.908644') end timestamp('2019-01-25 08:17:22.908667')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') start timestamp('2019-01-25 09:55:23.096106') end timestamp('2019-01-25 13:59:23.096112')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 03:52:23.096076') end timestamp('2019-01-25 07:46:23.096100')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('max', '50', 'mbps') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 08:35:23.543396') end timestamp('2019-01-25 13:14:23.543402')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') add middlebox('parental-control') unset quota('2', 'gb/wk') start timestamp('2019-01-25 02:06:23.543355') end timestamp('2019-01-25 07:40:23.543386')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set quota('5', 'gb/wk') allow traffic('social-media'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block protocol('quic'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk') allow traffic('torrent'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps') allow protocol('quic'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('parental-control'), middlebox('firewall') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 09:39:24.984842') end timestamp('2019-01-25 13:33:24.984846')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow protocol('tcp'), service('netflix') start timestamp('2019-01-25 03:43:24.984798') end timestamp('2019-01-25 08:31:24.984836')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids') set quota('8', 'gb/wk') block protocol('icmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block protocol('icmp'), protocol('ftp') start timestamp('2019-01-25 09:33:25.150336') end timestamp('2019-01-25 13:47:25.150339')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 03:28:25.150328') end timestamp('2019-01-25 07:56:25.150332')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall') set quota('7', 'gb/wk') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('telnet'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('dpi') set quota('1', 'gb/wk') allow protocol('icmp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('2', 'gb/wk') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 08:58:27.647776') end timestamp('2019-01-25 14:32:27.647780')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('quic'), service('instagram') start timestamp('2019-01-25 02:45:27.647753') end timestamp('2019-01-25 08:16:27.647770')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 04:19:27.758222') end timestamp('2019-01-25 13:11:27.758226')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('http'), traffic('streaming') start timestamp('2019-01-25 04:41:27.758198') end timestamp('2019-01-25 14:17:27.758216')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow service('instagram'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set quota('8', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:09:28.471983') end timestamp('2019-01-25 13:45:28.471987')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:38:28.471958') end timestamp('2019-01-25 13:09:28.471976')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('quic'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('tcp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control') set quota('1', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') unset quota('5', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('sftp'), service('vimeo')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') set bandwidth('max', '80', 'mbps') block protocol('telnet'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps') allow service('vimeo'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('7', 'gb/wk') allow protocol('udp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('max', '40', 'mbps') allow protocol('http'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') block service('vimeo'), service('stremio') start timestamp('2019-01-25 08:48:32.818288') end timestamp('2019-01-25 13:48:32.818291')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow service('vimeo'), protocol('udp') start timestamp('2019-01-25 02:15:32.818281') end timestamp('2019-01-25 07:35:32.818284')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 09:05:32.818390') end timestamp('2019-01-25 13:07:32.818406')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('instagram'), service('netflix') start timestamp('2019-01-25 03:58:32.818365') end timestamp('2019-01-25 08:08:32.818385')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall') unset bandwidth('min', '60', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control') set quota('8', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), protocol('snmp') start timestamp('2019-01-25 09:58:33.225850') end timestamp('2019-01-25 13:40:33.225854')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 03:17:33.225828') end timestamp('2019-01-25 08:52:33.225832')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') block service('stremio'), service('youtube') start timestamp('2019-01-25 09:52:33.226081') end timestamp('2019-01-25 13:26:33.226085')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 03:15:33.226069') end timestamp('2019-01-25 07:36:33.226076')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('8', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('tcp'), protocol('http') start timestamp('2019-01-25 05:10:33.411390') end timestamp('2019-01-25 14:16:33.411393')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow protocol('tcp'), service('netflix') start timestamp('2019-01-25 05:31:33.411368') end timestamp('2019-01-25 14:09:33.411384')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 09:48:33.466264') end timestamp('2019-01-25 14:00:33.466268')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 03:11:33.466243') end timestamp('2019-01-25 07:13:33.466247')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') allow protocol('snmp'), traffic('social-media') start timestamp('2019-01-25 05:00:34.390781') end timestamp('2019-01-25 14:38:34.390785')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset bandwidth('min', '20', 'mbps') block protocol('udp'), traffic('streaming') start timestamp('2019-01-25 05:11:34.390761') end timestamp('2019-01-25 13:30:34.390776')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('udp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer') start timestamp('2019-01-25 08:28:34.798465') end timestamp('2019-01-25 14:04:34.798469')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 03:00:34.798458') end timestamp('2019-01-25 07:05:34.798461')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer') set quota('6', 'gb/wk') allow service('facebook'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps') block service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('max', '60', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') block protocol('tcp'), service('facebook') start timestamp('2019-01-25 08:06:35.437427') end timestamp('2019-01-25 14:17:35.437431')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') allow service('vimeo'), protocol('smtp') start timestamp('2019-01-25 03:20:35.437406') end timestamp('2019-01-25 07:16:35.437421')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') allow traffic('social-media'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer') set quota('9', 'gb/wk') allow service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('snmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') set quota('4', 'gb/wk') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '20', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 09:58:36.241598') end timestamp('2019-01-25 13:44:36.241602')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 02:24:36.241577') end timestamp('2019-01-25 08:00:36.241592')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow protocol('tcp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('quic'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('7', 'gb/wk') allow service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('dpi') set quota('3', 'gb/wk') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('sftp'), service('stremio') start timestamp('2019-01-25 09:19:36.691349') end timestamp('2019-01-25 13:31:36.691353')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') allow protocol('sftp'), service('youtube') start timestamp('2019-01-25 02:48:36.691327') end timestamp('2019-01-25 08:01:36.691342')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('load-balancer') unset bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 08:55:36.705888') end timestamp('2019-01-25 13:46:36.705892')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 03:33:36.705868') end timestamp('2019-01-25 08:23:36.705882')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('quic'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') start timestamp('2019-01-25 08:21:37.012482') end timestamp('2019-01-25 14:30:37.012486')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 03:51:37.012460') end timestamp('2019-01-25 07:27:37.012475')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 05:55:37.321273') end timestamp('2019-01-25 13:58:37.321277')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 04:06:37.321252') end timestamp('2019-01-25 14:48:37.321268')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids') set quota('2', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('7', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:15:37.532248') end timestamp('2019-01-25 14:53:37.532253')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') unset quota('5', 'gb/wk') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 05:43:37.532224') end timestamp('2019-01-25 14:34:37.532242')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('https'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '50', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('telnet'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block protocol('https'), service('popcorn-time') start timestamp('2019-01-25 08:08:38.432760') end timestamp('2019-01-25 14:52:38.432764')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 03:24:38.432735') end timestamp('2019-01-25 07:59:38.432754')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block protocol('snmp'), service('bittorrent') start timestamp('2019-01-25 08:35:38.961659') end timestamp('2019-01-25 14:42:38.961664')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('bittorrent'), protocol('ftp') start timestamp('2019-01-25 02:57:38.961637') end timestamp('2019-01-25 07:21:38.961653')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 05:32:39.331424') end timestamp('2019-01-25 13:54:39.331428')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('sftp'), protocol('https') start timestamp('2019-01-25 06:01:39.331401') end timestamp('2019-01-25 14:21:39.331418')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 09:02:40.136160') end timestamp('2019-01-25 14:22:40.136164')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow protocol('quic'), protocol('telnet') start timestamp('2019-01-25 02:54:40.136138') end timestamp('2019-01-25 08:21:40.136154')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') allow service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:09:40.448738') end timestamp('2019-01-25 14:26:40.448741')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '30', 'mbps') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 04:23:40.448717') end timestamp('2019-01-25 14:39:40.448733')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('instagram'), service('youtube') start timestamp('2019-01-25 08:35:41.604017') end timestamp('2019-01-25 14:17:41.604021')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') allow protocol('udp'), service('youtube') start timestamp('2019-01-25 02:14:41.603992') end timestamp('2019-01-25 08:00:41.604010')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall') set quota('6', 'gb/wk') allow protocol('https'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 04:40:42.337889') end timestamp('2019-01-25 14:07:42.337893')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('https'), service('instagram') start timestamp('2019-01-25 04:59:42.337868') end timestamp('2019-01-25 14:35:42.337884')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') block service('facebook'), service('youtube') start timestamp('2019-01-25 09:06:42.338040') end timestamp('2019-01-25 13:42:42.338045')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') allow protocol('telnet'), service('youtube') start timestamp('2019-01-25 03:46:42.338026') end timestamp('2019-01-25 09:00:42.338034')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 09:55:42.588715') end timestamp('2019-01-25 13:05:42.588719')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 03:22:42.588664') end timestamp('2019-01-25 07:20:42.588695')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('load-balancer') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow protocol('smtp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') start timestamp('2019-01-25 09:37:43.217952') end timestamp('2019-01-25 13:12:43.217957')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') start timestamp('2019-01-25 02:20:43.217929') end timestamp('2019-01-25 08:16:43.217946')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('telnet'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 04:17:43.976703') end timestamp('2019-01-25 14:36:43.976707')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('8', 'gb/wk') allow protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 04:17:43.976678') end timestamp('2019-01-25 14:37:43.976697')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 08:50:44.003036') end timestamp('2019-01-25 13:58:44.003040')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 03:56:44.003019') end timestamp('2019-01-25 08:07:44.003030')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('vimeo'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall') set quota('8', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:25:44.976968') end timestamp('2019-01-25 13:26:44.976972')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') unset quota('6', 'gb/wk') start timestamp('2019-01-25 05:20:44.976945') end timestamp('2019-01-25 14:51:44.976962')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('amazon-prime')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('2', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), protocol('icmp') start timestamp('2019-01-25 05:30:46.002775') end timestamp('2019-01-25 13:33:46.002779')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 04:56:46.002752') end timestamp('2019-01-25 14:30:46.002769')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('tcp'), protocol('ftp') start timestamp('2019-01-25 05:57:46.137771') end timestamp('2019-01-25 14:16:46.137775')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow service('instagram'), service('netflix') start timestamp('2019-01-25 04:20:46.137752') end timestamp('2019-01-25 13:44:46.137766')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '30', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '70', 'mbps') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 09:01:46.322515') end timestamp('2019-01-25 13:41:46.322519')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('http'), service('youtube') start timestamp('2019-01-25 03:22:46.322494') end timestamp('2019-01-25 08:59:46.322509')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('7', 'gb/wk') block protocol('https'), protocol('snmp') start timestamp('2019-01-25 05:27:47.052315') end timestamp('2019-01-25 13:23:47.052319')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 05:27:47.052292') end timestamp('2019-01-25 13:08:47.052309')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('amazon-prime') start timestamp('2019-01-25 09:38:47.461554') end timestamp('2019-01-25 13:54:47.461558')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '70', 'mbps') block protocol('telnet'), service('facebook') start timestamp('2019-01-25 02:23:47.461533') end timestamp('2019-01-25 07:07:47.461549')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block traffic('streaming'), service('netflix') start timestamp('2019-01-25 05:17:47.495003') end timestamp('2019-01-25 13:09:47.495007')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow protocol('http'), traffic('streaming') start timestamp('2019-01-25 04:55:47.494984') end timestamp('2019-01-25 13:05:47.494998')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('1', 'gb/wk') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 04:39:47.521679') end timestamp('2019-01-25 14:56:47.521683')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('8', 'gb/wk') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 04:15:47.521660') end timestamp('2019-01-25 15:04:47.521673')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') allow service('amazon-prime') start timestamp('2019-01-25 08:39:47.521851') end timestamp('2019-01-25 14:09:47.521855')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') allow protocol('https'), traffic('social-media') start timestamp('2019-01-25 02:40:47.521826') end timestamp('2019-01-25 08:06:47.521833')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '40', 'mbps') block protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 09:59:47.856720') end timestamp('2019-01-25 14:36:47.856724')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set quota('3', 'gb/wk') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 02:51:47.856698') end timestamp('2019-01-25 08:37:47.856714')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('firewall') set quota('4', 'gb/wk') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') unset quota('5', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('icmp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 09:50:48.120884') end timestamp('2019-01-25 13:21:48.120888')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 03:54:48.120849') end timestamp('2019-01-25 08:51:48.120877')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') block service('stremio'), service('netflix') start timestamp('2019-01-25 05:30:48.429263') end timestamp('2019-01-25 13:36:48.429266')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 04:17:48.429238') end timestamp('2019-01-25 15:00:48.429257')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('streaming'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') set bandwidth('max', '20', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '10', 'mbps') allow protocol('smtp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') allow traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 08:56:49.288577') end timestamp('2019-01-25 13:32:49.288581')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') allow service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 02:07:49.288529') end timestamp('2019-01-25 08:30:49.288571')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('vimeo'), service('youtube') start timestamp('2019-01-25 09:10:49.380158') end timestamp('2019-01-25 13:48:49.380162')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block protocol('smtp'), service('bittorrent') start timestamp('2019-01-25 02:42:49.380139') end timestamp('2019-01-25 07:47:49.380152')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('tcp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 08:33:49.659388') end timestamp('2019-01-25 13:08:49.659392')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 02:53:49.659381') end timestamp('2019-01-25 08:00:49.659384')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('ids') set quota('7', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('tcp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 09:15:51.411020') end timestamp('2019-01-25 14:17:51.411023')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 03:24:51.411012') end timestamp('2019-01-25 08:36:51.411016')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('sftp'), protocol('snmp') start timestamp('2019-01-25 04:08:51.923150') end timestamp('2019-01-25 14:51:51.923154')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('load-balancer') set quota('9', 'gb/wk') allow service('stremio'), service('instagram') start timestamp('2019-01-25 04:09:51.923130') end timestamp('2019-01-25 14:55:51.923145')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') start timestamp('2019-01-25 05:10:52.320171') end timestamp('2019-01-25 14:54:52.320175')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('load-balancer') unset quota('8', 'gb/wk') start timestamp('2019-01-25 06:03:52.320149') end timestamp('2019-01-25 14:23:52.320166')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('snmp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('8', 'gb/wk') block protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 05:48:53.799170') end timestamp('2019-01-25 14:29:53.799174')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') allow protocol('tcp'), service('netflix') start timestamp('2019-01-25 06:01:53.799148') end timestamp('2019-01-25 13:44:53.799165')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('telnet'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps') allow protocol('http'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') unset quota('4', 'gb/wk') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 09:09:54.867042') end timestamp('2019-01-25 13:18:54.867046')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime') start timestamp('2019-01-25 03:57:54.867019') end timestamp('2019-01-25 08:52:54.867036')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('4', 'gb/wk') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 05:52:55.258674') end timestamp('2019-01-25 13:05:55.258679')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') unset quota('7', 'gb/wk') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 04:31:55.258652') end timestamp('2019-01-25 13:08:55.258669')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset quota('2', 'gb/wk') start timestamp('2019-01-25 04:49:55.285391') end timestamp('2019-01-25 15:02:55.285395')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') unset quota('2', 'gb/wk') start timestamp('2019-01-25 04:43:55.285373') end timestamp('2019-01-25 14:46:55.285385')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') unset quota('5', 'gb/wk') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 08:48:55.618622') end timestamp('2019-01-25 14:27:55.618626')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 03:52:55.618597') end timestamp('2019-01-25 08:06:55.618616')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') set quota('9', 'gb/wk') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('quic'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('2', 'gb/wk') block service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 04:31:55.845667') end timestamp('2019-01-25 13:50:55.845671')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') unset quota('9', 'gb/wk') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 05:31:55.845644') end timestamp('2019-01-25 15:00:55.845661')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow protocol('https'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('load-balancer') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') block protocol('sftp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') set bandwidth('min', '40', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 09:45:56.182809') end timestamp('2019-01-25 14:06:56.182813')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') start timestamp('2019-01-25 02:09:56.182775') end timestamp('2019-01-25 09:02:56.182803')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 09:52:56.967348') end timestamp('2019-01-25 14:50:56.967353')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('icmp'), service('popcorn-time') start timestamp('2019-01-25 04:02:56.967326') end timestamp('2019-01-25 07:27:56.967343')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 08:39:57.151828') end timestamp('2019-01-25 14:50:57.151832')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('bittorrent'), service('netflix') start timestamp('2019-01-25 03:05:57.151807') end timestamp('2019-01-25 08:09:57.151822')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset quota('5', 'gb/wk') start timestamp('2019-01-25 04:39:57.301433') end timestamp('2019-01-25 14:03:57.301438')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:18:57.301411') end timestamp('2019-01-25 15:01:57.301427')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block protocol('quic'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set quota('1', 'gb/wk') allow protocol('telnet'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 09:38:57.460571') end timestamp('2019-01-25 13:11:57.460575')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 02:17:57.460535') end timestamp('2019-01-25 08:50:57.460550')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 04:28:57.698424') end timestamp('2019-01-25 14:20:57.698428')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 04:38:57.698398') end timestamp('2019-01-25 14:59:57.698419')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') add middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('icmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('telnet'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set quota('6', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('telnet'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids') allow traffic('torrent'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('ids') set quota('6', 'gb/wk') allow protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('firewall') unset quota('2', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('icmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control') block service('amazon-prime'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow protocol('smtp'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('telnet'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') allow traffic('peer2peer') start timestamp('2019-01-25 09:53:59.051061') end timestamp('2019-01-25 14:41:59.051066')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') allow protocol('http'), service('instagram') start timestamp('2019-01-25 02:30:59.051026') end timestamp('2019-01-25 07:46:59.051055')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('3', 'gb/wk') block protocol('sftp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('dpi') set quota('5', 'gb/wk') block traffic('streaming') start timestamp('2019-01-25 04:15:59.157727') end timestamp('2019-01-25 14:18:59.157731')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset quota('6', 'gb/wk') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:41:59.157708') end timestamp('2019-01-25 14:35:59.157722')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('5', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 04:14:59.837509') end timestamp('2019-01-25 14:54:59.837513')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 04:13:59.837486') end timestamp('2019-01-25 13:40:59.837504')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('quic'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 05:21:00.119534') end timestamp('2019-01-25 14:39:00.119538')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') block protocol('snmp'), service('youtube') start timestamp('2019-01-25 05:56:00.119513') end timestamp('2019-01-25 13:13:00.119529')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('sftp'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('dpi'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') start timestamp('2019-01-25 05:04:00.634276') end timestamp('2019-01-25 15:01:00.634280')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 05:35:00.634253') end timestamp('2019-01-25 14:24:00.634270')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 09:12:00.705822') end timestamp('2019-01-25 14:08:00.705842')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control') allow service('instagram'), service('netflix') start timestamp('2019-01-25 02:31:00.705798') end timestamp('2019-01-25 07:36:00.705816')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 08:27:00.969352') end timestamp('2019-01-25 14:18:00.969356')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 03:05:00.969330') end timestamp('2019-01-25 08:19:00.969346')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('social-media'), service('youtube') start timestamp('2019-01-25 09:28:01.558997') end timestamp('2019-01-25 13:37:01.559001')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('quic'), service('bittorrent') start timestamp('2019-01-25 03:03:01.558975') end timestamp('2019-01-25 07:54:01.558991')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('stremio'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') block service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 05:40:02.450755') end timestamp('2019-01-25 14:46:02.450759')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('smtp'), protocol('icmp') start timestamp('2019-01-25 05:08:02.450736') end timestamp('2019-01-25 14:59:02.450750')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('1', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('stremio'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('load-balancer'), middlebox('dpi') block protocol('sftp'), service('bittorrent') start timestamp('2019-01-25 09:34:02.844494') end timestamp('2019-01-25 13:08:02.844498')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('parental-control') allow traffic('streaming'), service('netflix') start timestamp('2019-01-25 02:52:02.844473') end timestamp('2019-01-25 07:57:02.844488')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('2', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('ids') set quota('7', 'gb/wk') block protocol('telnet'), protocol('smtp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 09:49:03.728661') end timestamp('2019-01-25 14:34:03.728665')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('tcp'), protocol('udp') start timestamp('2019-01-25 02:33:03.728638') end timestamp('2019-01-25 08:51:03.728655')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 05:56:03.847492') end timestamp('2019-01-25 13:06:03.847496')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow protocol('smtp'), service('instagram') start timestamp('2019-01-25 05:33:03.847471') end timestamp('2019-01-25 14:48:03.847487')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow protocol('snmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 08:20:04.477442') end timestamp('2019-01-25 14:01:04.477459')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 02:53:04.477393') end timestamp('2019-01-25 08:06:04.477435')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('udp'), traffic('streaming') start timestamp('2019-01-25 04:07:04.918974') end timestamp('2019-01-25 14:09:04.918978')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids') unset bandwidth('min', '30', 'mbps') allow protocol('https'), service('popcorn-time') start timestamp('2019-01-25 05:42:04.918952') end timestamp('2019-01-25 13:15:04.918969')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('9', 'gb/wk') allow service('amazon-prime'), protocol('telnet') start timestamp('2019-01-25 05:28:05.188718') end timestamp('2019-01-25 14:38:05.188722')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('tcp'), protocol('ftp') start timestamp('2019-01-25 04:07:05.188695') end timestamp('2019-01-25 14:38:05.188712')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('quic'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block traffic('streaming') start timestamp('2019-01-25 09:34:05.282961') end timestamp('2019-01-25 14:55:05.282965')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') allow protocol('udp'), traffic('streaming') start timestamp('2019-01-25 03:28:05.282910') end timestamp('2019-01-25 07:53:05.282940')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 08:06:05.427529') end timestamp('2019-01-25 13:22:05.427546')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 03:49:05.427495') end timestamp('2019-01-25 08:05:05.427522')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('sftp'), protocol('tcp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('firewall'), middlebox('parental-control') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('load-balancer') allow service('stremio'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control') set quota('6', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('instagram'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('http'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block service('amazon-prime'), service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('dpi') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 05:39:07.336664') end timestamp('2019-01-25 13:36:07.336668')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('5', 'gb/wk') start timestamp('2019-01-25 04:35:07.336640') end timestamp('2019-01-25 14:32:07.336658')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('7', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('https'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('tcp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control') set quota('8', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset quota('8', 'gb/wk') start timestamp('2019-01-25 04:38:08.458711') end timestamp('2019-01-25 13:33:08.458715')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset quota('9', 'gb/wk') start timestamp('2019-01-25 05:12:08.458689') end timestamp('2019-01-25 13:44:08.458705')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') set quota('4', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') set quota('8', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 05:24:09.024328') end timestamp('2019-01-25 14:21:09.024332')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 06:02:09.024305') end timestamp('2019-01-25 13:08:09.024322')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('udp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow protocol('sftp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 09:26:09.396567') end timestamp('2019-01-25 14:30:09.396571')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 03:35:09.396546') end timestamp('2019-01-25 08:13:09.396561')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block protocol('quic'), traffic('social-media') start timestamp('2019-01-25 08:43:09.410724') end timestamp('2019-01-25 13:34:09.410740')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') allow protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 03:56:09.410679') end timestamp('2019-01-25 07:39:09.410717')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') allow service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 09:01:09.477679') end timestamp('2019-01-25 14:42:09.477683')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') allow protocol('snmp'), protocol('icmp') start timestamp('2019-01-25 03:14:09.477633') end timestamp('2019-01-25 07:12:09.477673')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('https'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('snmp'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 08:49:10.160256') end timestamp('2019-01-25 14:11:10.160260')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') unset quota('1', 'gb/wk') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 02:24:10.160234') end timestamp('2019-01-25 08:43:10.160250')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('quic'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 04:15:10.543146') end timestamp('2019-01-25 13:17:10.543149')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 04:44:10.543122') end timestamp('2019-01-25 13:33:10.543140')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow protocol('udp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:06:11.041967') end timestamp('2019-01-25 14:07:11.041971')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') start timestamp('2019-01-25 05:46:11.041947') end timestamp('2019-01-25 14:33:11.041962')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') set bandwidth('min', '40', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') set bandwidth('max', '70', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 06:04:12.000136') end timestamp('2019-01-25 14:52:12.000141')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 05:34:12.000113') end timestamp('2019-01-25 14:56:12.000131')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block protocol('icmp'), service('facebook') start timestamp('2019-01-25 10:00:12.000315') end timestamp('2019-01-25 13:19:12.000319')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 02:17:12.000288') end timestamp('2019-01-25 08:50:12.000295')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('sftp'), protocol('https') start timestamp('2019-01-25 08:59:12.312345') end timestamp('2019-01-25 14:07:12.312349')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('dpi') set bandwidth('min', '70', 'mbps') allow protocol('smtp'), service('netflix') start timestamp('2019-01-25 02:58:12.312325') end timestamp('2019-01-25 07:24:12.312340')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow protocol('smtp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set quota('1', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('http'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow protocol('ftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '30', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '80', 'mbps') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 08:25:12.875359') end timestamp('2019-01-25 14:28:12.875363')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '30', 'mbps') block traffic('social-media'), service('facebook') start timestamp('2019-01-25 03:26:12.875338') end timestamp('2019-01-25 07:12:12.875353')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block protocol('sftp'), service('stremio') start timestamp('2019-01-25 08:35:12.953754') end timestamp('2019-01-25 13:29:12.953758')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 02:37:12.953735') end timestamp('2019-01-25 07:08:12.953748')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '90', 'mbps') block protocol('https') start timestamp('2019-01-25 04:46:13.199372') end timestamp('2019-01-25 14:00:13.199376')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 04:39:13.199345') end timestamp('2019-01-25 14:53:13.199366')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 09:06:13.757604') end timestamp('2019-01-25 14:45:13.757608')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 03:31:13.757583') end timestamp('2019-01-25 08:18:13.757598')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') allow protocol('https'), protocol('snmp') start timestamp('2019-01-25 08:55:14.024323') end timestamp('2019-01-25 13:33:14.024327')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 03:04:14.024299') end timestamp('2019-01-25 08:01:14.024317')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 08:45:14.050989') end timestamp('2019-01-25 13:43:14.050993')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), protocol('udp') start timestamp('2019-01-25 03:02:14.050969') end timestamp('2019-01-25 07:36:14.050984')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('firewall') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') unset quota('5', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') unset quota('3', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block service('amazon-prime'), service('facebook') start timestamp('2019-01-25 08:37:15.195331') end timestamp('2019-01-25 13:41:15.195335')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow protocol('udp'), service('facebook') start timestamp('2019-01-25 03:54:15.195323') end timestamp('2019-01-25 08:34:15.195327')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('sftp'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block protocol('sftp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block protocol('https'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('8', 'gb/wk') allow protocol('http'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('quic'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 05:36:16.615013') end timestamp('2019-01-25 15:05:16.615017')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') start timestamp('2019-01-25 04:14:16.614990') end timestamp('2019-01-25 14:48:16.615007')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('telnet'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('tcp'), protocol('smtp') start timestamp('2019-01-25 09:15:16.899059') end timestamp('2019-01-25 13:27:16.899063')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('facebook') start timestamp('2019-01-25 02:37:16.899038') end timestamp('2019-01-25 08:10:16.899053')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 09:57:16.899197') end timestamp('2019-01-25 13:46:16.899201')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 02:38:16.899159') end timestamp('2019-01-25 07:54:16.899180')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 08:42:17.445906') end timestamp('2019-01-25 14:36:17.445910')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('ids'), middlebox('firewall') allow service('stremio'), service('youtube') start timestamp('2019-01-25 02:06:17.445886') end timestamp('2019-01-25 07:36:17.445900')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset quota('4', 'gb/wk') block service('vimeo'), protocol('https') start timestamp('2019-01-25 08:21:17.500381') end timestamp('2019-01-25 14:19:17.500385')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset quota('7', 'gb/wk') block protocol('tcp'), protocol('smtp') start timestamp('2019-01-25 03:38:17.500360') end timestamp('2019-01-25 08:14:17.500375')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('2', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('8', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') unset quota('1', 'gb/wk') block traffic('social-media'), service('youtube') start timestamp('2019-01-25 04:35:18.041775') end timestamp('2019-01-25 13:08:18.041779')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 04:36:18.041752') end timestamp('2019-01-25 14:53:18.041769')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 05:31:18.442691') end timestamp('2019-01-25 14:36:18.442695')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') unset quota('8', 'gb/wk') allow traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 04:49:18.442667') end timestamp('2019-01-25 14:01:18.442685')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') block service('instagram'), service('youtube') start timestamp('2019-01-25 08:48:18.669813') end timestamp('2019-01-25 13:48:18.669817')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow protocol('https'), service('facebook') start timestamp('2019-01-25 03:48:18.669777') end timestamp('2019-01-25 07:41:18.669807')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 08:41:19.704982') end timestamp('2019-01-25 13:17:19.704986')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow service('stremio'), service('instagram') start timestamp('2019-01-25 03:47:19.704962') end timestamp('2019-01-25 07:12:19.704977')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 08:47:19.759078') end timestamp('2019-01-25 13:49:19.759082')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer') allow protocol('tcp'), service('stremio') start timestamp('2019-01-25 02:23:19.759070') end timestamp('2019-01-25 07:19:19.759074')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('dpi'), middlebox('load-balancer') unset quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 05:55:20.591905') end timestamp('2019-01-25 14:03:20.591909')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 04:08:20.591881') end timestamp('2019-01-25 15:03:20.591899')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 09:14:20.672432') end timestamp('2019-01-25 14:17:20.672436')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 03:50:20.672412') end timestamp('2019-01-25 07:34:20.672426')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 08:12:21.091265') end timestamp('2019-01-25 14:29:21.091285')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 04:03:21.091244') end timestamp('2019-01-25 07:07:21.091259')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids'), middlebox('firewall') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('load-balancer'), middlebox('ids') block service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 09:40:21.157792') end timestamp('2019-01-25 13:53:21.157796')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow protocol('smtp'), service('instagram') start timestamp('2019-01-25 02:11:21.157774') end timestamp('2019-01-25 08:30:21.157786')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '10', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') set quota('7', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('8', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') set quota('1', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer'), middlebox('ids') block protocol('udp'), service('bittorrent') start timestamp('2019-01-25 09:46:22.190712') end timestamp('2019-01-25 13:35:22.190715')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 02:08:22.190689') end timestamp('2019-01-25 07:30:22.190706')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('https'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('ids'), middlebox('dpi') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 09:12:22.624773') end timestamp('2019-01-25 14:05:22.624777')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 03:37:22.624752') end timestamp('2019-01-25 08:50:22.624767')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('stremio'), service('popcorn-time') start timestamp('2019-01-25 08:44:22.638447') end timestamp('2019-01-25 14:11:22.638451')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('firewall'), middlebox('ids') unset quota('1', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 03:52:22.638430') end timestamp('2019-01-25 07:43:22.638441')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('smtp'), protocol('snmp') start timestamp('2019-01-25 08:57:22.862307') end timestamp('2019-01-25 14:34:22.862311')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 03:36:22.862300') end timestamp('2019-01-25 07:36:22.862304')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block traffic('peer2peer') start timestamp('2019-01-25 05:45:23.116743') end timestamp('2019-01-25 13:11:23.116747')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('facebook') start timestamp('2019-01-25 06:01:23.116720') end timestamp('2019-01-25 14:40:23.116737')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') allow protocol('sftp'), service('netflix') start timestamp('2019-01-25 08:45:23.116942') end timestamp('2019-01-25 14:34:23.116946')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 03:50:23.116915') end timestamp('2019-01-25 07:27:23.116937')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi') set bandwidth('min', '30', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set quota('8', 'gb/wk') block service('netflix'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 09:50:24.730232') end timestamp('2019-01-25 14:47:24.730236')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('dpi') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 02:25:24.730211') end timestamp('2019-01-25 08:32:24.730226')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('parental-control') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '20', 'mbps') block traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 04:37:24.874666') end timestamp('2019-01-25 13:34:24.874670')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 05:12:24.874642') end timestamp('2019-01-25 13:11:24.874660')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 05:00:25.777769') end timestamp('2019-01-25 14:34:25.777773')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps') allow protocol('https'), service('stremio') start timestamp('2019-01-25 05:27:25.777747') end timestamp('2019-01-25 13:55:25.777763')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow protocol('quic'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('telnet'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set quota('2', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 09:22:26.478122') end timestamp('2019-01-25 13:12:26.478126')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 03:18:26.478101') end timestamp('2019-01-25 07:06:26.478116')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer') set quota('3', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:23:27.106178') end timestamp('2019-01-25 14:12:27.106182')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 02:21:27.106157') end timestamp('2019-01-25 07:48:27.106172')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 08:44:27.845240') end timestamp('2019-01-25 14:30:27.845243')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 03:49:27.845232') end timestamp('2019-01-25 07:28:27.845236')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 08:05:27.845415') end timestamp('2019-01-25 14:19:27.845418')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 03:31:27.845408') end timestamp('2019-01-25 07:56:27.845411')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 09:18:28.011135') end timestamp('2019-01-25 14:12:28.011139')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 02:59:28.011108') end timestamp('2019-01-25 08:24:28.011128')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer') set quota('9', 'gb/wk') allow service('stremio'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow traffic('streaming'), service('netflix') start timestamp('2019-01-25 09:43:28.837297') end timestamp('2019-01-25 14:06:28.837302')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block protocol('telnet'), service('instagram') start timestamp('2019-01-25 02:21:28.837248') end timestamp('2019-01-25 08:26:28.837291')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('7', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi') allow service('stremio'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') block protocol('https'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('udp'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 09:14:29.600585') end timestamp('2019-01-25 14:20:29.600588')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('dpi'), middlebox('firewall') allow traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 03:42:29.600577') end timestamp('2019-01-25 07:53:29.600581')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('5', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('3', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('telnet'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('ftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') set quota('2', 'gb/wk') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 08:51:30.767210') end timestamp('2019-01-25 14:55:30.767214')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 03:20:30.767161') end timestamp('2019-01-25 08:40:30.767191')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset quota('7', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('https'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow protocol('sftp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('8', 'gb/wk') block service('bittorrent'), protocol('ftp') start timestamp('2019-01-25 09:04:32.052974') end timestamp('2019-01-25 13:22:32.052978')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('streaming') start timestamp('2019-01-25 02:52:32.052948') end timestamp('2019-01-25 08:59:32.052967')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:55:32.147014') end timestamp('2019-01-25 13:28:32.147033')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:08:32.146962') end timestamp('2019-01-25 13:25:32.146991')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('7', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow protocol('tcp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset quota('1', 'gb/wk') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 04:23:32.499792') end timestamp('2019-01-25 13:49:32.499796')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi') unset quota('2', 'gb/wk') allow protocol('udp'), traffic('streaming') start timestamp('2019-01-25 04:09:32.499765') end timestamp('2019-01-25 13:16:32.499786')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '70', 'mbps') block service('facebook'), traffic('social-media') start timestamp('2019-01-25 05:28:32.786023') end timestamp('2019-01-25 15:00:32.786027')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 04:53:32.785997') end timestamp('2019-01-25 13:55:32.786017')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids') set quota('8', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('social-media'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') unset quota('5', 'gb/wk') block service('facebook'), service('netflix') start timestamp('2019-01-25 05:41:33.475878') end timestamp('2019-01-25 13:58:33.475882')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 05:52:33.475851') end timestamp('2019-01-25 13:54:33.475871')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:36:33.585898') end timestamp('2019-01-25 13:56:33.585902')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('5', 'gb/wk') allow service('youtube'), traffic('streaming') start timestamp('2019-01-25 04:33:33.585877') end timestamp('2019-01-25 14:43:33.585893')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 09:36:33.601941') end timestamp('2019-01-25 13:57:33.601945')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer') unset bandwidth('min', '20', 'mbps') block protocol('udp') start timestamp('2019-01-25 02:10:33.601916') end timestamp('2019-01-25 08:26:33.601935')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('smtp'), protocol('udp') start timestamp('2019-01-25 09:59:34.137943') end timestamp('2019-01-25 14:30:34.137946')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 03:08:34.137922') end timestamp('2019-01-25 07:36:34.137937')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 05:35:34.607509') end timestamp('2019-01-25 14:31:34.607513')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), protocol('http') start timestamp('2019-01-25 05:43:34.607487') end timestamp('2019-01-25 14:12:34.607503')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('stremio'), protocol('icmp') start timestamp('2019-01-25 09:08:34.634628') end timestamp('2019-01-25 13:34:34.634632')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 02:47:34.634611') end timestamp('2019-01-25 07:23:34.634623')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:11:34.812803') end timestamp('2019-01-25 14:30:34.812807')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('1', 'gb/wk') allow protocol('smtp'), service('youtube') start timestamp('2019-01-25 06:03:34.812780') end timestamp('2019-01-25 14:35:34.812797')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('quic'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset quota('6', 'gb/wk') start timestamp('2019-01-25 04:28:35.255160') end timestamp('2019-01-25 13:08:35.255164')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 06:02:35.255137') end timestamp('2019-01-25 14:17:35.255154')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set bandwidth('min', '10', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer') unset quota('1', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow protocol('snmp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('udp'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('load-balancer') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') block protocol('icmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids') set bandwidth('max', '90', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('instagram'), service('facebook') start timestamp('2019-01-25 05:04:38.490295') end timestamp('2019-01-25 13:51:38.490299')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('youtube') start timestamp('2019-01-25 05:26:38.490261') end timestamp('2019-01-25 14:09:38.490289')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set quota('4', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') block traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('3', 'gb/wk') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 05:17:39.720917') end timestamp('2019-01-25 14:36:39.720921')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 06:02:39.720896') end timestamp('2019-01-25 13:27:39.720912')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow protocol('telnet'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids') block protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('icmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('7', 'gb/wk') block protocol('http'), protocol('udp') start timestamp('2019-01-25 04:05:39.877251') end timestamp('2019-01-25 13:39:39.877255')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 04:59:39.877226') end timestamp('2019-01-25 13:57:39.877245')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') set quota('3', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') set quota('2', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '80', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 08:57:42.536480') end timestamp('2019-01-25 14:02:42.536485')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') allow service('vimeo'), protocol('https') start timestamp('2019-01-25 02:53:42.536432') end timestamp('2019-01-25 08:34:42.536461')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('8', 'gb/wk') block traffic('social-media') start timestamp('2019-01-25 05:45:42.564539') end timestamp('2019-01-25 14:28:42.564543')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') unset quota('6', 'gb/wk') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 05:58:42.564516') end timestamp('2019-01-25 13:52:42.564533')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall') set quota('1', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids') set quota('8', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), protocol('sftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset quota('7', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 10:00:42.958301') end timestamp('2019-01-25 14:53:42.958304')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer') allow protocol('icmp'), service('popcorn-time') start timestamp('2019-01-25 02:55:42.958280') end timestamp('2019-01-25 08:55:42.958295')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('6', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('amazon-prime'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer') allow service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('3', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 09:36:44.838777') end timestamp('2019-01-25 15:02:44.838781')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 03:03:44.838753') end timestamp('2019-01-25 07:39:44.838771')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 05:46:44.920878') end timestamp('2019-01-25 14:15:44.920882')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 04:51:44.920856') end timestamp('2019-01-25 13:18:44.920873')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 08:38:46.168271') end timestamp('2019-01-25 13:43:46.168275')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('ids') block protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 02:48:46.168231') end timestamp('2019-01-25 07:45:46.168264')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '60', 'mbps') allow protocol('telnet'), service('bittorrent') start timestamp('2019-01-25 05:19:46.297945') end timestamp('2019-01-25 13:29:46.297949')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('facebook') start timestamp('2019-01-25 04:14:46.297920') end timestamp('2019-01-25 13:07:46.297939')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('8', 'gb/wk') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 08:19:46.379560') end timestamp('2019-01-25 13:41:46.379564')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 03:35:46.379553') end timestamp('2019-01-25 07:29:46.379557')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 09:40:46.408433') end timestamp('2019-01-25 13:23:46.408451')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 03:49:46.408412') end timestamp('2019-01-25 07:32:46.408426')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 09:32:46.674279') end timestamp('2019-01-25 13:24:46.674283')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 02:47:46.674260') end timestamp('2019-01-25 08:26:46.674273')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('min', '70', 'mbps') allow protocol('ftp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset quota('1', 'gb/wk') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 04:49:47.129634') end timestamp('2019-01-25 13:20:47.129638')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), protocol('udp') start timestamp('2019-01-25 04:30:47.129612') end timestamp('2019-01-25 13:14:47.129629')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '30', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset quota('6', 'gb/wk') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 04:55:47.215496') end timestamp('2019-01-25 13:10:47.215500')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('https'), service('youtube') start timestamp('2019-01-25 04:52:47.215470') end timestamp('2019-01-25 13:09:47.215490')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 09:41:47.243071') end timestamp('2019-01-25 13:39:47.243076')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('3', 'gb/wk') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 02:48:47.243040') end timestamp('2019-01-25 08:42:47.243053')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('http'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 04:10:47.992202') end timestamp('2019-01-25 14:08:47.992206')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 05:25:47.992174') end timestamp('2019-01-25 13:38:47.992196')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('telnet'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('sftp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk') allow protocol('sftp'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('2', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('firewall') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 08:43:48.678574') end timestamp('2019-01-25 13:49:48.678578')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('ids') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 02:28:48.678550') end timestamp('2019-01-25 08:26:48.678567')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 08:27:48.966104') end timestamp('2019-01-25 13:16:48.966110')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') start timestamp('2019-01-25 03:30:48.966076') end timestamp('2019-01-25 08:15:48.966095')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block service('youtube'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:16:49.077203') end timestamp('2019-01-25 13:19:49.077207')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 06:03:49.077177') end timestamp('2019-01-25 14:19:49.077196')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 10:02:49.077343') end timestamp('2019-01-25 14:57:49.077348')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 03:52:49.077325') end timestamp('2019-01-25 08:15:49.077336')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('icmp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('firewall'), middlebox('load-balancer') allow service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall') allow protocol('http'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 08:18:50.173650') end timestamp('2019-01-25 13:09:50.173655')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') block protocol('https'), service('netflix') start timestamp('2019-01-25 03:57:50.173586') end timestamp('2019-01-25 08:12:50.173629')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 08:32:50.173824') end timestamp('2019-01-25 14:20:50.173828')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow protocol('smtp'), service('facebook') start timestamp('2019-01-25 03:16:50.173800') end timestamp('2019-01-25 07:55:50.173806')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('ids'), middlebox('dpi') allow service('vimeo'), protocol('icmp') start timestamp('2019-01-25 09:05:51.257425') end timestamp('2019-01-25 14:50:51.257429')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow protocol('http'), protocol('ftp') start timestamp('2019-01-25 03:40:51.257404') end timestamp('2019-01-25 07:40:51.257419')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow protocol('ftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow protocol('udp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') unset quota('2', 'gb/wk') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 05:12:53.997422') end timestamp('2019-01-25 14:33:53.997426')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 05:46:53.997397') end timestamp('2019-01-25 14:59:53.997416')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 04:17:54.277688') end timestamp('2019-01-25 14:31:54.277692')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('ftp') start timestamp('2019-01-25 05:17:54.277668') end timestamp('2019-01-25 13:45:54.277683')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '90', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 09:46:54.306110') end timestamp('2019-01-25 13:23:54.306114')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('tcp'), protocol('telnet') start timestamp('2019-01-25 03:31:54.306087') end timestamp('2019-01-25 08:05:54.306103')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('sftp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 04:05:54.391618') end timestamp('2019-01-25 14:33:54.391622')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 04:53:54.391596') end timestamp('2019-01-25 15:03:54.391612')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 09:11:54.603625') end timestamp('2019-01-25 13:21:54.603629')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 03:26:54.603604') end timestamp('2019-01-25 08:47:54.603619')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') block traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 09:23:54.633138') end timestamp('2019-01-25 13:23:54.633142')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 02:32:54.633117') end timestamp('2019-01-25 07:37:54.633132')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('firewall') block traffic('social-media'), service('netflix') start timestamp('2019-01-25 09:21:55.117946') end timestamp('2019-01-25 14:21:55.117950')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 02:12:55.117924') end timestamp('2019-01-25 07:51:55.117940')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('vimeo'), service('youtube') start timestamp('2019-01-25 05:05:55.889401') end timestamp('2019-01-25 13:20:55.889405')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 05:50:55.889379') end timestamp('2019-01-25 14:29:55.889396')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '70', 'mbps') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '90', 'mbps') allow service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('vimeo'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('instagram'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') start timestamp('2019-01-25 09:56:56.262060') end timestamp('2019-01-25 13:20:56.262064')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids') start timestamp('2019-01-25 02:45:56.262053') end timestamp('2019-01-25 07:49:56.262057')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '80', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block protocol('icmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset quota('4', 'gb/wk') block service('vimeo'), service('stremio') start timestamp('2019-01-25 05:01:57.064779') end timestamp('2019-01-25 14:38:57.064783')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') unset quota('3', 'gb/wk') allow traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 05:50:57.064753') end timestamp('2019-01-25 13:45:57.064773')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:55:57.320060') end timestamp('2019-01-25 13:44:57.320064')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') unset quota('5', 'gb/wk') start timestamp('2019-01-25 06:01:57.320036') end timestamp('2019-01-25 14:31:57.320054')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('9', 'gb/wk') allow protocol('https'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('2', 'gb/wk') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 05:22:58.666055') end timestamp('2019-01-25 13:35:58.666059')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') block protocol('https'), protocol('tcp') start timestamp('2019-01-25 04:06:58.666034') end timestamp('2019-01-25 14:14:58.666050')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') start timestamp('2019-01-25 09:27:59.093404') end timestamp('2019-01-25 13:06:59.093409')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 03:32:59.093366') end timestamp('2019-01-25 08:04:59.093398')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') allow traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('2', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set bandwidth('min', '80', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('sftp'), service('instagram') start timestamp('2019-01-25 05:49:00.050153') end timestamp('2019-01-25 13:34:00.050157')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 04:55:00.050126') end timestamp('2019-01-25 13:45:00.050147')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 05:15:00.289997') end timestamp('2019-01-25 14:54:00.290001')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 05:46:00.289977') end timestamp('2019-01-25 13:10:00.289992')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') set quota('6', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('telnet'), service('youtube') start timestamp('2019-01-25 08:59:00.358544') end timestamp('2019-01-25 15:00:00.358548')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 03:54:00.358522') end timestamp('2019-01-25 07:29:00.358538')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('icmp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('7', 'gb/wk') block service('amazon-prime')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('quic'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:00:02.317380') end timestamp('2019-01-25 14:17:02.317384')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('firewall') block protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 02:35:02.317355') end timestamp('2019-01-25 07:27:02.317374')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 09:36:02.795762') end timestamp('2019-01-25 14:30:02.795767')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') block service('stremio'), protocol('tcp') start timestamp('2019-01-25 03:04:02.795726') end timestamp('2019-01-25 08:15:02.795741')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') allow protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') allow service('youtube'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('firewall'), middlebox('ids') allow protocol('snmp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi') allow protocol('https'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps') block protocol('telnet'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block protocol('tcp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block protocol('quic'), service('facebook') start timestamp('2019-01-25 06:00:03.968492') end timestamp('2019-01-25 14:06:03.968495')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 04:23:03.968467') end timestamp('2019-01-25 13:16:03.968486')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('5', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('2', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') block traffic('torrent'), protocol('http') start timestamp('2019-01-25 08:49:03.996252') end timestamp('2019-01-25 14:25:03.996256')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') allow service('stremio') start timestamp('2019-01-25 03:22:03.996206') end timestamp('2019-01-25 07:24:03.996246')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('load-balancer'), middlebox('ids') block traffic('streaming'), service('netflix') start timestamp('2019-01-25 08:54:04.128660') end timestamp('2019-01-25 14:14:04.128664')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow protocol('ftp'), service('netflix') start timestamp('2019-01-25 02:09:04.128653') end timestamp('2019-01-25 07:14:04.128656')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('parental-control') set bandwidth('min', '20', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') unset quota('4', 'gb/wk') start timestamp('2019-01-25 09:30:04.479607') end timestamp('2019-01-25 13:16:04.479611')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 03:32:04.479584') end timestamp('2019-01-25 08:42:04.479601')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') start timestamp('2019-01-25 08:50:04.507654') end timestamp('2019-01-25 13:34:04.507659')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 02:38:04.507634') end timestamp('2019-01-25 07:57:04.507648')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('dpi') unset quota('7', 'gb/wk') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 08:11:04.574493') end timestamp('2019-01-25 14:50:04.574497')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 03:21:04.574473') end timestamp('2019-01-25 08:07:04.574487')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi') set quota('9', 'gb/wk') allow protocol('telnet'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set quota('9', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('4', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set quota('1', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control') allow protocol('sftp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') allow protocol('http'), service('instagram') start timestamp('2019-01-25 09:20:05.582836') end timestamp('2019-01-25 14:44:05.582840')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') allow service('amazon-prime') start timestamp('2019-01-25 04:02:05.582814') end timestamp('2019-01-25 07:51:05.582829')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('6', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('telnet'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('https'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:31:06.174500') end timestamp('2019-01-25 14:42:06.174505')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 03:11:06.174438') end timestamp('2019-01-25 07:20:06.174480')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow protocol('tcp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 04:14:06.227728') end timestamp('2019-01-25 14:15:06.227732')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:20:06.227706') end timestamp('2019-01-25 14:29:06.227722')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 09:18:06.362186') end timestamp('2019-01-25 14:03:06.362190')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 03:14:06.362165') end timestamp('2019-01-25 08:35:06.362180')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 04:40:07.080227') end timestamp('2019-01-25 14:21:07.080231')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('3', 'gb/wk') allow protocol('tcp') start timestamp('2019-01-25 04:52:07.080203') end timestamp('2019-01-25 14:25:07.080221')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk') allow service('stremio'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow protocol('udp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('icmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('telnet'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') unset quota('7', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('max', '10', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps') allow service('bittorrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('icmp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') block protocol('smtp'), service('facebook') start timestamp('2019-01-25 04:25:09.006427') end timestamp('2019-01-25 14:40:09.006430')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('dpi') unset bandwidth('min', '90', 'mbps') allow service('stremio'), service('facebook') start timestamp('2019-01-25 04:23:09.006405') end timestamp('2019-01-25 13:35:09.006421')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('ids') set quota('3', 'gb/wk') allow protocol('quic'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('https'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 09:22:10.576701') end timestamp('2019-01-25 14:27:10.576705')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 03:09:10.576675') end timestamp('2019-01-25 07:33:10.576694')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') start timestamp('2019-01-25 09:17:10.576809') end timestamp('2019-01-25 14:42:10.576814')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:59:10.576794') end timestamp('2019-01-25 07:20:10.576802')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 08:32:10.576886') end timestamp('2019-01-25 13:44:10.576890')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 03:37:10.576875') end timestamp('2019-01-25 07:40:10.576882')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 08:36:10.768969') end timestamp('2019-01-25 13:23:10.768973')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 02:11:10.768933') end timestamp('2019-01-25 07:33:10.768962')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set bandwidth('min', '30', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 10:01:10.956610') end timestamp('2019-01-25 14:34:10.956629')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') block traffic('peer2peer'), protocol('icmp') start timestamp('2019-01-25 03:55:10.956588') end timestamp('2019-01-25 08:15:10.956604')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 04:22:10.984503') end timestamp('2019-01-25 14:22:10.984507')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow protocol('ftp'), service('bittorrent') start timestamp('2019-01-25 04:57:10.984478') end timestamp('2019-01-25 13:47:10.984497')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('icmp'), service('bittorrent') start timestamp('2019-01-25 09:26:11.288098') end timestamp('2019-01-25 14:10:11.288102')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 03:45:11.288076') end timestamp('2019-01-25 07:33:11.288092')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 09:43:11.315786') end timestamp('2019-01-25 14:38:11.315789')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer') start timestamp('2019-01-25 03:47:11.315778') end timestamp('2019-01-25 08:24:11.315782')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('ids') set quota('4', 'gb/wk') allow protocol('icmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 06:03:11.731788') end timestamp('2019-01-25 13:49:11.731793')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') unset bandwidth('max', '70', 'mbps') block protocol('sftp'), protocol('udp') start timestamp('2019-01-25 04:37:11.731759') end timestamp('2019-01-25 14:50:11.731782')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '60', 'mbps') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 05:09:11.763642') end timestamp('2019-01-25 14:59:11.763649')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') unset quota('2', 'gb/wk') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 04:34:11.763604') end timestamp('2019-01-25 14:00:11.763634')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('8', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') start timestamp('2019-01-25 08:24:12.118411') end timestamp('2019-01-25 13:54:12.118415')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') add middlebox('firewall') set quota('6', 'gb/wk') start timestamp('2019-01-25 03:49:12.118385') end timestamp('2019-01-25 07:20:12.118405')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '20', 'mbps') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 05:30:12.875066') end timestamp('2019-01-25 13:19:12.875071')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control') unset quota('5', 'gb/wk') block traffic('streaming'), protocol('ftp') start timestamp('2019-01-25 04:41:12.875017') end timestamp('2019-01-25 13:08:12.875059')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('1', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('firewall') block service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 08:58:13.467761') end timestamp('2019-01-25 14:06:13.467765')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow protocol('ftp'), service('popcorn-time') start timestamp('2019-01-25 03:46:13.467734') end timestamp('2019-01-25 08:12:13.467754')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('firewall') set quota('5', 'gb/wk') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('icmp'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '70', 'mbps') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 05:21:13.716589') end timestamp('2019-01-25 13:46:13.716593')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('dpi') unset quota('7', 'gb/wk') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 04:49:13.716566') end timestamp('2019-01-25 14:48:13.716584')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 05:34:13.764815') end timestamp('2019-01-25 13:30:13.764819')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset quota('4', 'gb/wk') allow service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 05:43:13.764790') end timestamp('2019-01-25 14:02:13.764809')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block service('instagram'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('6', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 04:56:14.405917') end timestamp('2019-01-25 13:59:14.405921')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('snmp'), service('bittorrent') start timestamp('2019-01-25 05:33:14.405892') end timestamp('2019-01-25 14:20:14.405911')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 08:16:15.267679') end timestamp('2019-01-25 13:57:15.267684')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('https'), service('netflix') start timestamp('2019-01-25 03:30:15.267656') end timestamp('2019-01-25 07:44:15.267674')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:46:15.377833') end timestamp('2019-01-25 14:56:15.377838')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 05:16:15.377810') end timestamp('2019-01-25 13:17:15.377827')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('social-media') start timestamp('2019-01-25 05:59:15.911548') end timestamp('2019-01-25 14:23:15.911552')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset quota('7', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:52:15.911520') end timestamp('2019-01-25 14:11:15.911542')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('http'), traffic('streaming') start timestamp('2019-01-25 08:56:15.925447') end timestamp('2019-01-25 13:30:15.925450')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('telnet'), service('youtube') start timestamp('2019-01-25 02:09:15.925426') end timestamp('2019-01-25 08:22:15.925441')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall') allow service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') block service('stremio'), service('instagram') start timestamp('2019-01-25 09:50:17.077480') end timestamp('2019-01-25 14:59:17.077483')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 03:01:17.077472') end timestamp('2019-01-25 07:45:17.077476')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('telnet'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('4', 'gb/wk') block protocol('quic'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') block service('facebook'), service('bittorrent') start timestamp('2019-01-25 09:59:18.261577') end timestamp('2019-01-25 13:38:18.261581')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('facebook'), traffic('social-media') start timestamp('2019-01-25 03:17:18.261555') end timestamp('2019-01-25 08:09:18.261571')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 08:14:18.288121') end timestamp('2019-01-25 13:16:18.288126')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 02:34:18.288085') end timestamp('2019-01-25 07:22:18.288111')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('icmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('min', '40', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 09:27:19.128456') end timestamp('2019-01-25 13:39:19.128460')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 03:18:19.128448') end timestamp('2019-01-25 07:35:19.128452')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 05:23:19.804281') end timestamp('2019-01-25 13:33:19.804285')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') unset quota('4', 'gb/wk') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 05:36:19.804258') end timestamp('2019-01-25 13:37:19.804275')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids') set quota('3', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('snmp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('http'), traffic('streaming') start timestamp('2019-01-25 05:25:21.686010') end timestamp('2019-01-25 13:55:21.686014')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:44:21.685993') end timestamp('2019-01-25 14:51:21.686005')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('8', 'gb/wk') start timestamp('2019-01-25 09:35:21.712614') end timestamp('2019-01-25 14:21:21.712618')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') unset bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 02:52:21.712595') end timestamp('2019-01-25 07:33:21.712608')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') unset quota('7', 'gb/wk') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '60', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('tcp'), protocol('snmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') block protocol('https'), service('netflix') start timestamp('2019-01-25 08:51:21.804067') end timestamp('2019-01-25 14:18:21.804071')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 02:25:21.804044') end timestamp('2019-01-25 08:36:21.804061')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') set quota('3', 'gb/wk') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('5', 'gb/wk') allow service('bittorrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi') set quota('6', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:50:22.449364') end timestamp('2019-01-25 13:26:22.449368')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('ids') start timestamp('2019-01-25 03:13:22.449343') end timestamp('2019-01-25 07:55:22.449358')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi') set quota('8', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('stremio'), service('netflix') start timestamp('2019-01-25 09:17:22.477427') end timestamp('2019-01-25 13:10:22.477433')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 03:28:22.477375') end timestamp('2019-01-25 08:50:22.477405')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') block service('amazon-prime'), protocol('tcp') start timestamp('2019-01-25 09:56:22.477665') end timestamp('2019-01-25 14:52:22.477669')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') allow service('instagram'), traffic('social-media') start timestamp('2019-01-25 03:02:22.477650') end timestamp('2019-01-25 08:03:22.477659')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block service('popcorn-time'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('http'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('snmp'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 05:57:23.659802') end timestamp('2019-01-25 13:43:23.659806')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') allow protocol('sftp'), service('stremio') start timestamp('2019-01-25 05:38:23.659779') end timestamp('2019-01-25 14:18:23.659796')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('torrent'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block protocol('quic'), service('instagram') start timestamp('2019-01-25 09:03:24.756962') end timestamp('2019-01-25 14:21:24.756967')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 03:27:24.756918') end timestamp('2019-01-25 07:44:24.756940')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 05:30:25.491923') end timestamp('2019-01-25 13:19:25.491940')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('dpi') set quota('7', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 06:03:25.491861') end timestamp('2019-01-25 13:23:25.491917')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 04:20:26.511846') end timestamp('2019-01-25 13:44:26.511850')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') block protocol('http'), protocol('smtp') start timestamp('2019-01-25 04:06:26.511823') end timestamp('2019-01-25 13:09:26.511840')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 04:41:27.828974') end timestamp('2019-01-25 15:00:27.828978')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('2', 'gb/wk') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 05:51:27.828941') end timestamp('2019-01-25 14:27:27.828968')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') allow protocol('udp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('parental-control') block traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('https'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 08:45:28.646150') end timestamp('2019-01-25 14:21:28.646153')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 02:08:28.646142') end timestamp('2019-01-25 07:24:28.646146')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('youtube'), traffic('streaming') start timestamp('2019-01-25 04:52:29.376038') end timestamp('2019-01-25 14:26:29.376042')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 05:11:29.376014') end timestamp('2019-01-25 14:40:29.376032')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 05:02:31.041271') end timestamp('2019-01-25 13:09:31.041276')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:50:31.041245') end timestamp('2019-01-25 13:17:31.041266')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set bandwidth('min', '60', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '20', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('http'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block protocol('telnet'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('telnet'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '70', 'mbps') allow protocol('smtp'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set quota('5', 'gb/wk') block traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('7', 'gb/wk') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 08:45:33.025141') end timestamp('2019-01-25 13:33:33.025145')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 03:05:33.025106') end timestamp('2019-01-25 07:08:33.025135')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('smtp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') start timestamp('2019-01-25 09:54:34.337400') end timestamp('2019-01-25 14:03:34.337404')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 02:07:34.337379') end timestamp('2019-01-25 08:07:34.337394')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 04:54:35.122140') end timestamp('2019-01-25 14:33:35.122144')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow protocol('http'), service('popcorn-time') start timestamp('2019-01-25 05:49:35.122111') end timestamp('2019-01-25 14:13:35.122135')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('stremio'), protocol('icmp') start timestamp('2019-01-25 05:48:35.701594') end timestamp('2019-01-25 14:54:35.701598')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:42:35.701574') end timestamp('2019-01-25 13:27:35.701588')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') add middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('snmp'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('http'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('min', '10', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('firewall') set quota('5', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('parental-control'), middlebox('firewall') block protocol('quic'), protocol('smtp') start timestamp('2019-01-25 09:31:37.261407') end timestamp('2019-01-25 14:35:37.261411')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('http'), traffic('streaming') start timestamp('2019-01-25 02:18:37.261386') end timestamp('2019-01-25 07:35:37.261401')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('2', 'gb/wk') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 05:10:37.288103') end timestamp('2019-01-25 14:26:37.288107')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 05:06:37.288085') end timestamp('2019-01-25 14:00:37.288098')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('6', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps') block protocol('https'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 05:48:37.354813') end timestamp('2019-01-25 14:12:37.354817')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 05:27:37.354793') end timestamp('2019-01-25 14:05:37.354808')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 05:49:37.434262') end timestamp('2019-01-25 14:20:37.434266')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') unset quota('1', 'gb/wk') allow protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 06:01:37.434242') end timestamp('2019-01-25 13:18:37.434257')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('ids') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:38:37.580983') end timestamp('2019-01-25 14:34:37.580987')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('parental-control') unset bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 05:28:37.580964') end timestamp('2019-01-25 14:23:37.580978')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('https'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '50', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps') allow traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 09:30:37.824602') end timestamp('2019-01-25 13:16:37.824606')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('5', 'gb/wk') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 03:41:37.824582') end timestamp('2019-01-25 07:56:37.824596')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 08:52:37.930656') end timestamp('2019-01-25 14:28:37.930660')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 03:58:37.930637') end timestamp('2019-01-25 07:59:37.930650')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps') block service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('stremio'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow protocol('http'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 09:28:38.790974') end timestamp('2019-01-25 14:53:38.790977')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('parental-control') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 03:14:38.790967') end timestamp('2019-01-25 08:10:38.790970')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('4', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '30', 'mbps') block protocol('snmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('telnet'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids'), middlebox('dpi') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 04:36:39.833737') end timestamp('2019-01-25 14:39:39.833741')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 04:14:39.833717') end timestamp('2019-01-25 15:05:39.833731')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow protocol('sftp'), service('bittorrent') start timestamp('2019-01-25 08:39:41.086215') end timestamp('2019-01-25 14:53:41.086218')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow service('stremio'), service('facebook') start timestamp('2019-01-25 02:13:41.086193') end timestamp('2019-01-25 08:39:41.086209')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 05:52:41.250623') end timestamp('2019-01-25 13:48:41.250627')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('https'), service('netflix') start timestamp('2019-01-25 05:06:41.250600') end timestamp('2019-01-25 14:36:41.250617')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 04:43:41.942823') end timestamp('2019-01-25 14:54:41.942827')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset quota('1', 'gb/wk') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 04:43:41.942801') end timestamp('2019-01-25 15:02:41.942818')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow protocol('tcp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 04:08:43.716867') end timestamp('2019-01-25 14:08:43.716871')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 04:11:43.716847') end timestamp('2019-01-25 14:07:43.716861')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('parental-control') block protocol('https'), service('youtube') start timestamp('2019-01-25 08:14:43.784054') end timestamp('2019-01-25 13:27:43.784058')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 02:17:43.784034') end timestamp('2019-01-25 08:14:43.784048')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set quota('8', 'gb/wk') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 09:23:44.226669') end timestamp('2019-01-25 14:00:44.226672')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 02:42:44.226648') end timestamp('2019-01-25 07:45:44.226665')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 05:13:44.497361') end timestamp('2019-01-25 13:28:44.497365')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '90', 'mbps') allow protocol('telnet'), service('youtube') start timestamp('2019-01-25 04:25:44.497305') end timestamp('2019-01-25 14:59:44.497354')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 08:21:44.928709') end timestamp('2019-01-25 14:26:44.928713')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi') start timestamp('2019-01-25 02:26:44.928687') end timestamp('2019-01-25 07:20:44.928702')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('icmp'), protocol('ftp') start timestamp('2019-01-25 05:17:44.956034') end timestamp('2019-01-25 13:07:44.956038')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') unset quota('2', 'gb/wk') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 04:14:44.956014') end timestamp('2019-01-25 14:01:44.956028')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 04:17:44.983108') end timestamp('2019-01-25 14:25:44.983112')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('4', 'gb/wk') start timestamp('2019-01-25 04:56:44.983088') end timestamp('2019-01-25 14:58:44.983102')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 05:49:45.494128') end timestamp('2019-01-25 13:56:45.494134')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') add middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 04:18:45.494091') end timestamp('2019-01-25 13:51:45.494122')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') block protocol('telnet'), service('instagram') start timestamp('2019-01-25 09:05:46.571788') end timestamp('2019-01-25 13:51:46.571792')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('dpi') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 02:37:46.571762') end timestamp('2019-01-25 08:18:46.571782')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 09:54:46.646082') end timestamp('2019-01-25 13:18:46.646086')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 02:53:46.646059') end timestamp('2019-01-25 08:07:46.646076')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '60', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('tcp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('tcp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps') block service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 04:48:48.331972') end timestamp('2019-01-25 13:55:48.331976')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('instagram'), service('youtube') start timestamp('2019-01-25 04:35:48.331949') end timestamp('2019-01-25 15:04:48.331966')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall') set quota('4', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('quic'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('dpi') unset bandwidth('max', '50', 'mbps') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:41:49.732650') end timestamp('2019-01-25 13:26:49.732653')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') unset bandwidth('max', '30', 'mbps') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 04:40:49.732630') end timestamp('2019-01-25 14:39:49.732644')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('5', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') start timestamp('2019-01-25 08:50:50.780691') end timestamp('2019-01-25 14:26:50.780695')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi') set quota('1', 'gb/wk') start timestamp('2019-01-25 04:03:50.780683') end timestamp('2019-01-25 07:24:50.780687')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') allow service('netflix'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('min', '40', 'mbps') block protocol('sftp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '90', 'mbps') allow protocol('sftp'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') start timestamp('2019-01-25 08:47:52.424021') end timestamp('2019-01-25 13:53:52.424024')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') start timestamp('2019-01-25 03:37:52.424013') end timestamp('2019-01-25 07:27:52.424017')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('netflix'), traffic('streaming') start timestamp('2019-01-25 09:09:52.547511') end timestamp('2019-01-25 13:28:52.547529')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('firewall') unset quota('1', 'gb/wk') allow traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 03:40:52.547485') end timestamp('2019-01-25 07:14:52.547505')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '40', 'mbps') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 06:02:52.810123') end timestamp('2019-01-25 14:44:52.810127')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 04:22:52.810098') end timestamp('2019-01-25 14:38:52.810117')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') block traffic('peer2peer') start timestamp('2019-01-25 05:12:52.925257') end timestamp('2019-01-25 14:36:52.925261')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set quota('2', 'gb/wk') allow protocol('http'), service('bittorrent') start timestamp('2019-01-25 05:33:52.925231') end timestamp('2019-01-25 14:33:52.925250')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('9', 'gb/wk') block protocol('https'), service('facebook') start timestamp('2019-01-25 05:53:53.014908') end timestamp('2019-01-25 14:30:53.014912')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow protocol('tcp'), service('instagram') start timestamp('2019-01-25 05:00:53.014877') end timestamp('2019-01-25 13:25:53.014901')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids'), middlebox('load-balancer') allow service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi') allow protocol('telnet'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow protocol('https'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 09:52:54.451593') end timestamp('2019-01-25 13:24:54.451597')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:18:54.451566') end timestamp('2019-01-25 08:01:54.451586')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 09:42:55.029985') end timestamp('2019-01-25 14:36:55.029989')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('ids'), middlebox('firewall') allow service('instagram'), service('netflix') start timestamp('2019-01-25 02:26:55.029960') end timestamp('2019-01-25 08:27:55.029979')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 08:52:55.030116') end timestamp('2019-01-25 13:25:55.030135')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 03:44:55.030101') end timestamp('2019-01-25 07:10:55.030110')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('8', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('dpi') unset quota('3', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('ids') set bandwidth('min', '90', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') set quota('8', 'gb/wk') allow service('amazon-prime'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') block service('vimeo'), protocol('udp') start timestamp('2019-01-25 09:59:56.510016') end timestamp('2019-01-25 13:55:56.510019')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control') allow protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 03:49:56.509993') end timestamp('2019-01-25 08:16:56.510011')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') unset bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 05:34:56.801401') end timestamp('2019-01-25 14:15:56.801405')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 06:02:56.801377') end timestamp('2019-01-25 15:05:56.801395')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set quota('2', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps') allow protocol('sftp'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 09:26:57.493123') end timestamp('2019-01-25 14:24:57.493126')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 02:17:57.493102') end timestamp('2019-01-25 08:56:57.493117')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 06:03:57.521300') end timestamp('2019-01-25 13:51:57.521304')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('6', 'gb/wk') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 05:42:57.521278') end timestamp('2019-01-25 14:38:57.521294')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('5', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('telnet'), service('netflix') start timestamp('2019-01-25 09:50:57.930802') end timestamp('2019-01-25 14:33:57.930805')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('vimeo') start timestamp('2019-01-25 03:50:57.930781') end timestamp('2019-01-25 08:49:57.930796')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('sftp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') block protocol('udp'), service('netflix') start timestamp('2019-01-25 09:02:59.641888') end timestamp('2019-01-25 14:43:59.641892')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:39:59.641866') end timestamp('2019-01-25 07:17:59.641882')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('parental-control'), middlebox('load-balancer') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('torrent'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('udp'), traffic('social-media') start timestamp('2019-01-25 09:17:00.297159') end timestamp('2019-01-25 13:58:00.297178')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 03:32:00.297129') end timestamp('2019-01-25 08:14:00.297152')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 09:51:00.374799') end timestamp('2019-01-25 14:32:00.374802')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('dpi') unset quota('3', 'gb/wk') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 03:00:00.374791') end timestamp('2019-01-25 08:37:00.374795')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('sftp'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('firewall'), middlebox('load-balancer') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids') set quota('9', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('quic'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow protocol('https'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:49:01.840254') end timestamp('2019-01-25 14:47:01.840258')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 04:39:01.840231') end timestamp('2019-01-25 14:06:01.840248')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('8', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('2', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('load-balancer') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('dpi') unset quota('8', 'gb/wk') block service('youtube'), protocol('udp') start timestamp('2019-01-25 04:41:02.423038') end timestamp('2019-01-25 14:07:02.423042')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '50', 'mbps') allow protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 04:36:02.423015') end timestamp('2019-01-25 13:30:02.423032')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('dpi') set quota('5', 'gb/wk') allow protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 05:07:02.746858') end timestamp('2019-01-25 14:26:02.746863')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 04:57:02.746830') end timestamp('2019-01-25 14:56:02.746852')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:49:03.119563') end timestamp('2019-01-25 13:55:03.119567')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 04:10:03.119536') end timestamp('2019-01-25 13:44:03.119556')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 09:31:03.210504') end timestamp('2019-01-25 14:27:03.210512')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer') allow service('stremio'), protocol('snmp') start timestamp('2019-01-25 02:40:03.210439') end timestamp('2019-01-25 07:09:03.210494')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('stremio'), service('youtube') start timestamp('2019-01-25 05:57:03.709686') end timestamp('2019-01-25 13:23:03.709690')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 05:33:03.709662') end timestamp('2019-01-25 15:02:03.709680')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 05:49:03.764352') end timestamp('2019-01-25 13:57:03.764356')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 05:11:03.764326') end timestamp('2019-01-25 14:50:03.764346')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset quota('7', 'gb/wk') block traffic('peer2peer'), protocol('ftp') start timestamp('2019-01-25 05:40:05.556958') end timestamp('2019-01-25 13:32:05.556975')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('stremio') start timestamp('2019-01-25 04:56:05.556895') end timestamp('2019-01-25 14:46:05.556952')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('snmp'), service('facebook') start timestamp('2019-01-25 04:36:06.562786') end timestamp('2019-01-25 14:40:06.562790')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('5', 'gb/wk') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 05:33:06.562762') end timestamp('2019-01-25 13:40:06.562780')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('sftp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') unset quota('2', 'gb/wk') block protocol('http'), traffic('streaming') start timestamp('2019-01-25 09:15:06.704190') end timestamp('2019-01-25 13:49:06.704194')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '40', 'mbps') allow protocol('smtp') start timestamp('2019-01-25 03:43:06.704168') end timestamp('2019-01-25 08:41:06.704184')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block protocol('tcp'), protocol('udp') start timestamp('2019-01-25 10:04:06.744503') end timestamp('2019-01-25 13:32:06.744508')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:01:06.744457') end timestamp('2019-01-25 09:05:06.744497')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 09:23:07.247732') end timestamp('2019-01-25 14:25:07.247736')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), protocol('https') start timestamp('2019-01-25 03:27:07.247709') end timestamp('2019-01-25 07:39:07.247725')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 09:13:07.247888') end timestamp('2019-01-25 13:10:07.247892')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi') allow protocol('icmp'), protocol('ftp') start timestamp('2019-01-25 02:45:07.247876') end timestamp('2019-01-25 07:46:07.247883')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 05:29:07.829044') end timestamp('2019-01-25 14:39:07.829048')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall') unset quota('9', 'gb/wk') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 04:09:07.829017') end timestamp('2019-01-25 14:04:07.829037')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') unset quota('1', 'gb/wk') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') set quota('4', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('max', '80', 'mbps') allow service('vimeo'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block protocol('snmp'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset bandwidth('max', '60', 'mbps') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 09:39:08.432632') end timestamp('2019-01-25 14:00:08.432636')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 03:06:08.432610') end timestamp('2019-01-25 08:29:08.432626')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') block protocol('snmp'), service('youtube') start timestamp('2019-01-25 08:45:08.460916') end timestamp('2019-01-25 14:11:08.460920')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('parental-control') set quota('7', 'gb/wk') allow service('youtube'), traffic('streaming') start timestamp('2019-01-25 03:08:08.460891') end timestamp('2019-01-25 07:37:08.460910')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('9', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 09:43:08.800044') end timestamp('2019-01-25 14:21:08.800047')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '90', 'mbps') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 02:33:08.800036') end timestamp('2019-01-25 07:18:08.800040')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('9', 'gb/wk') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control') set quota('8', 'gb/wk') allow service('popcorn-time'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('dpi') allow protocol('sftp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('dpi') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') unset bandwidth('max', '70', 'mbps') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 04:35:10.010589') end timestamp('2019-01-25 14:46:10.010593')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 04:10:10.010562') end timestamp('2019-01-25 15:07:10.010583')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') start timestamp('2019-01-25 10:05:10.486505') end timestamp('2019-01-25 14:20:10.486509')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 03:52:10.486483') end timestamp('2019-01-25 08:25:10.486498')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), protocol('sftp') start timestamp('2019-01-25 08:43:11.123034') end timestamp('2019-01-25 13:23:11.123053')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('ids') allow service('stremio'), protocol('telnet') start timestamp('2019-01-25 02:48:11.122986') end timestamp('2019-01-25 08:31:11.123028')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('https'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 05:44:11.377886') end timestamp('2019-01-25 13:27:11.377890')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 05:30:11.377861') end timestamp('2019-01-25 13:32:11.377881')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 05:36:11.460439') end timestamp('2019-01-25 15:01:11.460443')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') unset quota('5', 'gb/wk') allow protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 04:26:11.460413') end timestamp('2019-01-25 14:43:11.460433')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('dpi') unset bandwidth('min', '30', 'mbps') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 06:01:11.817359') end timestamp('2019-01-25 14:04:11.817363')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('min', '30', 'mbps') block service('stremio'), protocol('smtp') start timestamp('2019-01-25 05:53:11.817333') end timestamp('2019-01-25 13:36:11.817353')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '10', 'mbps') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 05:34:12.660572') end timestamp('2019-01-25 13:44:12.660575')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('dpi') unset quota('5', 'gb/wk') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 04:41:12.660552') end timestamp('2019-01-25 14:45:12.660566')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('snmp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('ids'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 09:34:12.759336') end timestamp('2019-01-25 13:45:12.759340')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 02:39:12.759286') end timestamp('2019-01-25 07:26:12.759316')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 04:51:12.907549') end timestamp('2019-01-25 15:01:12.907553')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('parental-control') unset quota('4', 'gb/wk') start timestamp('2019-01-25 04:41:12.907527') end timestamp('2019-01-25 14:14:12.907544')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('2', 'gb/wk') block protocol('telnet'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('7', 'gb/wk') allow protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('quic'), traffic('social-media') start timestamp('2019-01-25 09:41:14.246842') end timestamp('2019-01-25 14:53:14.246845')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('ids') set quota('8', 'gb/wk') block protocol('ftp'), service('netflix') start timestamp('2019-01-25 02:53:14.246821') end timestamp('2019-01-25 08:56:14.246836')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('stremio'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block protocol('sftp'), protocol('http')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow protocol('udp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 09:46:17.409053') end timestamp('2019-01-25 15:01:17.409058')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 03:47:17.409022') end timestamp('2019-01-25 08:13:17.409046')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('ftp') start timestamp('2019-01-25 06:01:17.755316') end timestamp('2019-01-25 13:08:17.755321')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 04:47:17.755291') end timestamp('2019-01-25 14:00:17.755310')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('2', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('3', 'gb/wk') block protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') allow protocol('telnet'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') set quota('3', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set quota('6', 'gb/wk') start timestamp('2019-01-25 04:38:18.357173') end timestamp('2019-01-25 14:12:18.357177')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall') set quota('1', 'gb/wk') start timestamp('2019-01-25 04:19:18.357149') end timestamp('2019-01-25 14:11:18.357167')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block protocol('ftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('instagram'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('parental-control') set quota('1', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block protocol('tcp'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow service('vimeo'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') unset quota('7', 'gb/wk') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 09:39:18.702870') end timestamp('2019-01-25 14:19:18.702874')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 03:46:18.702849') end timestamp('2019-01-25 07:14:18.702864')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('7', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('4', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow protocol('icmp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') unset quota('7', 'gb/wk') block service('popcorn-time'), protocol('ftp') start timestamp('2019-01-25 05:57:19.309417') end timestamp('2019-01-25 14:28:19.309421')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '40', 'mbps') block traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 05:19:19.309393') end timestamp('2019-01-25 13:48:19.309411')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('amazon-prime')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('quic'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('tcp'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 09:57:19.599747') end timestamp('2019-01-25 14:22:19.599751')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('dpi') unset bandwidth('max', '60', 'mbps') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 02:20:19.599740') end timestamp('2019-01-25 08:54:19.599743')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow protocol('http'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('https'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block service('facebook') start timestamp('2019-01-25 04:56:21.888765') end timestamp('2019-01-25 13:44:21.888769')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids') set quota('2', 'gb/wk') block protocol('quic') start timestamp('2019-01-25 04:15:21.888745') end timestamp('2019-01-25 14:18:21.888760')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 09:27:21.916771') end timestamp('2019-01-25 14:29:21.916775')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('8', 'gb/wk') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 03:27:21.916750') end timestamp('2019-01-25 07:10:21.916765')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('4', 'gb/wk') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 05:35:22.398912') end timestamp('2019-01-25 13:13:22.398916')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 04:15:22.398889') end timestamp('2019-01-25 13:51:22.398906')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow protocol('snmp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('9', 'gb/wk') block protocol('http') start timestamp('2019-01-25 09:55:22.769147') end timestamp('2019-01-25 14:46:22.769151')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 02:20:22.769126') end timestamp('2019-01-25 08:18:22.769141')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('load-balancer') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('quic'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), protocol('icmp') start timestamp('2019-01-25 08:36:23.516239') end timestamp('2019-01-25 14:14:23.516244')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block service('netflix') start timestamp('2019-01-25 03:10:23.516217') end timestamp('2019-01-25 07:26:23.516233')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('streaming'), protocol('ftp') start timestamp('2019-01-25 05:52:23.763883') end timestamp('2019-01-25 14:24:23.763887')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 05:31:23.763853') end timestamp('2019-01-25 14:39:23.763877')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('firewall'), middlebox('load-balancer') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 09:27:24.596375') end timestamp('2019-01-25 14:20:24.596379')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids') allow service('stremio'), protocol('http') start timestamp('2019-01-25 02:38:24.596354') end timestamp('2019-01-25 07:56:24.596369')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 09:44:24.655435') end timestamp('2019-01-25 13:55:24.655439')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 03:18:24.655414') end timestamp('2019-01-25 08:24:24.655431')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 06:00:24.685564') end timestamp('2019-01-25 14:11:24.685568')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 04:19:24.685539') end timestamp('2019-01-25 14:23:24.685558')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('telnet'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') set quota('7', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '10', 'mbps') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 05:19:26.020198') end timestamp('2019-01-25 14:30:26.020202')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('dpi'), middlebox('parental-control') unset quota('2', 'gb/wk') allow service('stremio'), service('youtube') start timestamp('2019-01-25 05:06:26.020166') end timestamp('2019-01-25 14:40:26.020192')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 08:59:26.106230') end timestamp('2019-01-25 14:48:26.106234')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 02:11:26.106208') end timestamp('2019-01-25 08:55:26.106224')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('stremio'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set bandwidth('max', '10', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 04:07:27.207098') end timestamp('2019-01-25 13:11:27.207102')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') allow protocol('https'), service('stremio') start timestamp('2019-01-25 05:16:27.207074') end timestamp('2019-01-25 14:41:27.207092')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block service('vimeo'), protocol('https') start timestamp('2019-01-25 05:16:27.234243') end timestamp('2019-01-25 13:38:27.234247')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 04:36:27.234223') end timestamp('2019-01-25 13:20:27.234238')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('icmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 08:39:27.403950') end timestamp('2019-01-25 13:50:27.403953')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 03:56:27.403942') end timestamp('2019-01-25 07:33:27.403945')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids'), middlebox('dpi') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') start timestamp('2019-01-25 04:56:27.599347') end timestamp('2019-01-25 13:09:27.599351')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') start timestamp('2019-01-25 05:46:27.599317') end timestamp('2019-01-25 13:12:27.599339')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('parental-control') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 09:40:28.142275') end timestamp('2019-01-25 14:56:28.142279')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 03:41:28.142252') end timestamp('2019-01-25 07:35:28.142269')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') block service('stremio'), service('youtube') start timestamp('2019-01-25 09:48:28.285881') end timestamp('2019-01-25 14:49:28.285885')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 04:06:28.285858') end timestamp('2019-01-25 07:40:28.285874')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('8', 'gb/wk') block protocol('quic'), protocol('snmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), protocol('ftp') start timestamp('2019-01-25 04:22:30.568067') end timestamp('2019-01-25 13:42:30.568071')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids') unset bandwidth('min', '60', 'mbps') block traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 04:28:30.568045') end timestamp('2019-01-25 13:39:30.568062')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('smtp'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('4', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') set bandwidth('max', '20', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '70', 'mbps') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('telnet'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('max', '90', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('9', 'gb/wk') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:50:31.903048') end timestamp('2019-01-25 14:33:31.903052')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:39:31.903025') end timestamp('2019-01-25 15:00:31.903042')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') set bandwidth('max', '80', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow protocol('sftp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('udp'), service('bittorrent') start timestamp('2019-01-25 08:11:32.525256') end timestamp('2019-01-25 13:51:32.525260')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 02:22:32.525235') end timestamp('2019-01-25 08:08:32.525250')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('2', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('firewall'), middlebox('parental-control') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 09:58:32.867684') end timestamp('2019-01-25 13:16:32.867688')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('dpi') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 02:18:32.867659') end timestamp('2019-01-25 08:47:32.867678')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '70', 'mbps') allow service('facebook'), service('youtube') start timestamp('2019-01-25 09:56:32.895522') end timestamp('2019-01-25 13:42:32.895527')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('tcp'), service('stremio') start timestamp('2019-01-25 04:00:32.895500') end timestamp('2019-01-25 08:16:32.895516')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('9', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') start timestamp('2019-01-25 04:11:33.011338') end timestamp('2019-01-25 15:00:33.011341')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('parental-control') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:20:33.011316') end timestamp('2019-01-25 14:44:33.011332')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('youtube'), service('facebook') start timestamp('2019-01-25 05:06:33.038361') end timestamp('2019-01-25 13:43:33.038366')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 05:58:33.038341') end timestamp('2019-01-25 13:42:33.038355')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '50', 'mbps') block service('stremio'), service('popcorn-time') start timestamp('2019-01-25 05:06:33.284265') end timestamp('2019-01-25 13:54:33.284268')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('facebook'), protocol('udp') start timestamp('2019-01-25 04:56:33.284239') end timestamp('2019-01-25 14:15:33.284259')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('2', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 04:31:34.274794') end timestamp('2019-01-25 14:07:34.274799')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') start timestamp('2019-01-25 05:57:34.274767') end timestamp('2019-01-25 13:51:34.274787')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 05:17:34.478462') end timestamp('2019-01-25 14:31:34.478467')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 05:58:34.478433') end timestamp('2019-01-25 14:33:34.478456')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('max', '90', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') allow service('bittorrent'), protocol('ftp') start timestamp('2019-01-25 09:01:35.387004') end timestamp('2019-01-25 15:07:35.387008')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block protocol('sftp'), service('instagram') start timestamp('2019-01-25 03:13:35.386978') end timestamp('2019-01-25 07:30:35.386997')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow service('instagram'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') start timestamp('2019-01-25 08:50:35.859716') end timestamp('2019-01-25 13:11:35.859737')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:34:35.859687') end timestamp('2019-01-25 07:35:35.859708')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') unset quota('7', 'gb/wk') block traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set quota('7', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer') start timestamp('2019-01-25 09:47:35.948974') end timestamp('2019-01-25 14:47:35.948979')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 03:51:35.948945') end timestamp('2019-01-25 08:23:35.948967')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') start timestamp('2019-01-25 08:54:36.210985') end timestamp('2019-01-25 14:27:36.210990')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 02:42:36.210948') end timestamp('2019-01-25 08:02:36.210965')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('7', 'gb/wk') block protocol('snmp'), protocol('udp') start timestamp('2019-01-25 09:41:37.131160') end timestamp('2019-01-25 14:57:37.131164')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('sftp'), service('stremio') start timestamp('2019-01-25 03:54:37.131138') end timestamp('2019-01-25 08:41:37.131154')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') set bandwidth('max', '80', 'mbps') block protocol('quic'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset quota('5', 'gb/wk') start timestamp('2019-01-25 04:19:37.719687') end timestamp('2019-01-25 13:51:37.719691')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 04:58:37.719656') end timestamp('2019-01-25 14:01:37.719681')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '40', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 09:39:38.704254') end timestamp('2019-01-25 14:59:38.704259')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 03:06:38.704216') end timestamp('2019-01-25 07:53:38.704248')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('ids') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('firewall') unset quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('parental-control') set quota('2', 'gb/wk') block protocol('telnet'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('https'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('2', 'gb/wk') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 05:41:39.005654') end timestamp('2019-01-25 13:11:39.005658')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') allow traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 04:15:39.005624') end timestamp('2019-01-25 13:44:39.005648')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block protocol('udp'), protocol('ftp') start timestamp('2019-01-25 09:08:39.005866') end timestamp('2019-01-25 14:01:39.005870')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') allow protocol('https'), service('youtube') start timestamp('2019-01-25 02:24:39.005838') end timestamp('2019-01-25 07:48:39.005846')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block service('instagram'), protocol('udp') start timestamp('2019-01-25 09:33:39.697406') end timestamp('2019-01-25 14:20:39.697410')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:08:39.697370') end timestamp('2019-01-25 08:01:39.697399')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') unset bandwidth('max', '60', 'mbps') block service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('http'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('firewall') set quota('6', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 09:58:40.827643') end timestamp('2019-01-25 13:12:40.827647')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 03:45:40.827620') end timestamp('2019-01-25 08:19:40.827637')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow protocol('quic'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow service('netflix'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '20', 'mbps') block protocol('snmp'), protocol('smtp') start timestamp('2019-01-25 04:43:41.066659') end timestamp('2019-01-25 14:53:41.066663')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset quota('5', 'gb/wk') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 04:50:41.066638') end timestamp('2019-01-25 14:41:41.066654')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') unset quota('7', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 05:27:41.262836') end timestamp('2019-01-25 13:14:41.262840')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:56:41.262814') end timestamp('2019-01-25 14:14:41.262830')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 05:54:41.289118') end timestamp('2019-01-25 14:35:41.289121')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') start timestamp('2019-01-25 04:08:41.289089') end timestamp('2019-01-25 13:18:41.289112')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('social-media'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk') block protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set quota('9', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 09:10:42.254681') end timestamp('2019-01-25 13:13:42.254685')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('firewall') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 03:41:42.254658') end timestamp('2019-01-25 08:06:42.254675')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 09:30:42.477209') end timestamp('2019-01-25 13:59:42.477213')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 03:10:42.477171') end timestamp('2019-01-25 08:43:42.477202')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 10:06:42.662425') end timestamp('2019-01-25 15:06:42.662429')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') unset quota('8', 'gb/wk') start timestamp('2019-01-25 04:00:42.662399') end timestamp('2019-01-25 08:47:42.662417')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '30', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi') block protocol('http'), service('bittorrent') start timestamp('2019-01-25 09:40:42.737685') end timestamp('2019-01-25 14:14:42.737689')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('bittorrent'), protocol('ftp') start timestamp('2019-01-25 03:03:42.737646') end timestamp('2019-01-25 07:16:42.737678')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 09:16:43.139540') end timestamp('2019-01-25 13:11:43.139544')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 02:12:43.139510') end timestamp('2019-01-25 07:35:43.139533')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block service('stremio'), protocol('snmp') start timestamp('2019-01-25 08:19:43.341171') end timestamp('2019-01-25 14:51:43.341175')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 03:10:43.341143') end timestamp('2019-01-25 08:18:43.341164')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '60', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set quota('9', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('youtube'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 09:33:43.681225') end timestamp('2019-01-25 14:00:43.681229')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('1', 'gb/wk') start timestamp('2019-01-25 03:41:43.681197') end timestamp('2019-01-25 07:37:43.681216')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('popcorn-time') start timestamp('2019-01-25 09:48:44.806819') end timestamp('2019-01-25 14:05:44.806824')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block service('instagram'), protocol('ftp') start timestamp('2019-01-25 02:53:44.806792') end timestamp('2019-01-25 09:06:44.806813')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set quota('4', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') start timestamp('2019-01-25 09:38:45.108801') end timestamp('2019-01-25 13:53:45.108808')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 03:28:45.108751') end timestamp('2019-01-25 07:54:45.108791')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 09:50:45.787631') end timestamp('2019-01-25 14:37:45.787635')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 03:37:45.787606') end timestamp('2019-01-25 08:59:45.787624')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 09:56:46.007292') end timestamp('2019-01-25 14:52:46.007297')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 03:39:46.007250') end timestamp('2019-01-25 07:52:46.007285')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') allow service('amazon-prime'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 05:29:46.601399') end timestamp('2019-01-25 14:21:46.601404')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids') set quota('5', 'gb/wk') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 05:44:46.601363') end timestamp('2019-01-25 13:44:46.601391')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 05:38:46.818441') end timestamp('2019-01-25 13:26:46.818446')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset quota('8', 'gb/wk') start timestamp('2019-01-25 05:25:46.818416') end timestamp('2019-01-25 14:14:46.818435')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') allow protocol('smtp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '10', 'mbps') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 08:57:47.066291') end timestamp('2019-01-25 14:04:47.066295')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids') allow service('vimeo'), protocol('quic') start timestamp('2019-01-25 02:31:47.066240') end timestamp('2019-01-25 08:03:47.066284')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 09:13:47.110477') end timestamp('2019-01-25 14:40:47.110481')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 03:29:47.110453') end timestamp('2019-01-25 07:25:47.110471')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 05:05:47.425876') end timestamp('2019-01-25 13:23:47.425880')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('sftp') start timestamp('2019-01-25 05:21:47.425849') end timestamp('2019-01-25 13:10:47.425870')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('dpi') set quota('4', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('min', '10', 'mbps') allow service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('min', '70', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 04:30:48.847204') end timestamp('2019-01-25 13:08:48.847208')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('dpi') set bandwidth('max', '60', 'mbps') block protocol('telnet'), service('facebook') start timestamp('2019-01-25 05:03:48.847179') end timestamp('2019-01-25 13:44:48.847199')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') block protocol('sftp'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('telnet'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('telnet'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('smtp'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 05:01:49.839974') end timestamp('2019-01-25 13:51:49.839978')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 04:38:49.839934') end timestamp('2019-01-25 13:55:49.839968')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') allow protocol('quic'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 08:35:50.431875') end timestamp('2019-01-25 13:53:50.431881')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') start timestamp('2019-01-25 02:26:50.431836') end timestamp('2019-01-25 07:17:50.431859')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block protocol('https'), service('popcorn-time') start timestamp('2019-01-25 09:51:50.575985') end timestamp('2019-01-25 13:58:50.575989')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 02:52:50.575955') end timestamp('2019-01-25 07:28:50.575977')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') unset quota('3', 'gb/wk') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 04:35:51.195131') end timestamp('2019-01-25 14:33:51.195135')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 06:06:51.195107') end timestamp('2019-01-25 13:25:51.195125')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('smtp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 09:53:52.068048') end timestamp('2019-01-25 14:26:52.068052')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 02:34:52.068024') end timestamp('2019-01-25 08:56:52.068041')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids') allow protocol('quic'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('stremio'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer') start timestamp('2019-01-25 09:39:53.022230') end timestamp('2019-01-25 13:19:53.022234')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 03:45:53.022207') end timestamp('2019-01-25 08:59:53.022224')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('4', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('smtp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 09:27:53.464026') end timestamp('2019-01-25 14:42:53.464044')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') allow service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 03:02:53.463978') end timestamp('2019-01-25 08:05:53.464003')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('parental-control') start timestamp('2019-01-25 09:35:53.833420') end timestamp('2019-01-25 14:22:53.833424')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 02:50:53.833397') end timestamp('2019-01-25 08:41:53.833413')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '80', 'mbps') block protocol('telnet'), service('instagram') start timestamp('2019-01-25 04:44:54.821513') end timestamp('2019-01-25 14:53:54.821517')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 04:39:54.821485') end timestamp('2019-01-25 13:27:54.821507')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow traffic('streaming'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '40', 'mbps') allow protocol('telnet'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block service('stremio'), service('popcorn-time') start timestamp('2019-01-25 09:18:55.128470') end timestamp('2019-01-25 14:59:55.128474')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 02:23:55.128442') end timestamp('2019-01-25 07:22:55.128463')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('6', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 09:57:56.220076') end timestamp('2019-01-25 14:31:56.220080')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 02:58:56.220037') end timestamp('2019-01-25 07:30:56.220070')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 04:15:56.641952') end timestamp('2019-01-25 13:58:56.641956')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block service('facebook'), service('netflix') start timestamp('2019-01-25 05:33:56.641922') end timestamp('2019-01-25 14:59:56.641946')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('min', '50', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('stremio'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 05:51:57.208784') end timestamp('2019-01-25 14:40:57.208788')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('sftp'), service('facebook') start timestamp('2019-01-25 04:46:57.208753') end timestamp('2019-01-25 13:32:57.208778')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 09:20:57.854946') end timestamp('2019-01-25 14:46:57.854950')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 02:39:57.854918') end timestamp('2019-01-25 08:56:57.854939')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('quic'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') unset bandwidth('min', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 04:16:58.101491') end timestamp('2019-01-25 14:41:58.101496')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('3', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 05:17:58.101458') end timestamp('2019-01-25 14:02:58.101484')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('parental-control') set quota('8', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 05:42:58.179183') end timestamp('2019-01-25 14:33:58.179187')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 04:12:58.179150') end timestamp('2019-01-25 14:52:58.179176')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 05:16:58.314269') end timestamp('2019-01-25 14:58:58.314273')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 05:12:58.314238') end timestamp('2019-01-25 13:36:58.314263')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') unset bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 08:54:58.358835') end timestamp('2019-01-25 14:34:58.358839')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 02:24:58.358794') end timestamp('2019-01-25 08:09:58.358828')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 04:39:58.508671') end timestamp('2019-01-25 14:42:58.508678')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') start timestamp('2019-01-25 05:15:58.508637') end timestamp('2019-01-25 14:47:58.508662')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('icmp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('load-balancer') set quota('9', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 05:30:59.765764') end timestamp('2019-01-25 14:04:59.765768')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('social-media'), protocol('udp') start timestamp('2019-01-25 04:30:59.765736') end timestamp('2019-01-25 14:07:59.765758')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset quota('5', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('sftp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('streaming'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('2', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('1', 'gb/wk') allow protocol('udp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('youtube') start timestamp('2019-01-25 09:16:00.224722') end timestamp('2019-01-25 14:01:00.224725')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') allow traffic('torrent') start timestamp('2019-01-25 02:31:00.224714') end timestamp('2019-01-25 07:36:00.224718')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('ftp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:14:00.652477') end timestamp('2019-01-25 14:44:00.652481')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('snmp'), protocol('udp') start timestamp('2019-01-25 05:32:00.652451') end timestamp('2019-01-25 14:33:00.652471')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('quic'), traffic('social-media') start timestamp('2019-01-25 05:26:01.318079') end timestamp('2019-01-25 13:15:01.318086')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '10', 'mbps') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 04:11:01.318054') end timestamp('2019-01-25 14:22:01.318072')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('6', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('3', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block traffic('peer2peer') start timestamp('2019-01-25 08:34:02.181764') end timestamp('2019-01-25 13:43:02.181768')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 03:06:02.181737') end timestamp('2019-01-25 07:16:02.181758')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('ids') set quota('2', 'gb/wk') allow traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 04:50:03.228461') end timestamp('2019-01-25 13:22:03.228465')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '90', 'mbps') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 05:33:03.228439') end timestamp('2019-01-25 14:00:03.228456')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 09:55:03.720773') end timestamp('2019-01-25 13:41:03.720777')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 04:01:03.720751') end timestamp('2019-01-25 07:22:03.720767')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi') unset quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('telnet'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 08:44:04.027290') end timestamp('2019-01-25 13:22:04.027294')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer') allow protocol('sftp'), service('bittorrent') start timestamp('2019-01-25 03:54:04.027263') end timestamp('2019-01-25 08:17:04.027283')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 08:22:04.202224') end timestamp('2019-01-25 14:29:04.202228')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 04:04:04.202201') end timestamp('2019-01-25 07:57:04.202217')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 05:11:04.439111') end timestamp('2019-01-25 14:39:04.439117')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('7', 'gb/wk') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 04:39:04.439074') end timestamp('2019-01-25 13:18:04.439102')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 04:42:05.336030') end timestamp('2019-01-25 14:05:05.336034')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 05:50:05.336007') end timestamp('2019-01-25 15:02:05.336024')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('ids'), middlebox('parental-control') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('firewall') allow protocol('sftp'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('http'), service('bittorrent') start timestamp('2019-01-25 04:17:05.831200') end timestamp('2019-01-25 14:36:05.831204')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 05:43:05.831176') end timestamp('2019-01-25 14:24:05.831195')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') block service('stremio'), service('instagram') start timestamp('2019-01-25 08:21:05.885290') end timestamp('2019-01-25 15:08:05.885295')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 02:48:05.885239') end timestamp('2019-01-25 07:45:05.885271')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('http'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('torrent'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') block protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 10:07:06.278050') end timestamp('2019-01-25 13:30:06.278057')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') block protocol('sftp'), service('stremio') start timestamp('2019-01-25 02:25:06.277980') end timestamp('2019-01-25 08:00:06.278028')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 09:55:06.320064') end timestamp('2019-01-25 15:00:06.320068')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow service('netflix'), traffic('streaming') start timestamp('2019-01-25 03:10:06.320043') end timestamp('2019-01-25 09:04:06.320058')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('sftp'), service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block service('vimeo'), protocol('https') start timestamp('2019-01-25 05:17:07.273676') end timestamp('2019-01-25 14:47:07.273680')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '20', 'mbps') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 04:30:07.273652') end timestamp('2019-01-25 15:00:07.273670')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow protocol('snmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') set bandwidth('min', '20', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('9', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('7', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:16:08.927241') end timestamp('2019-01-25 14:38:08.927245')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '10', 'mbps') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 05:17:08.927208') end timestamp('2019-01-25 14:41:08.927234')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset quota('6', 'gb/wk') allow protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('load-balancer') unset bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') unset quota('6', 'gb/wk') start timestamp('2019-01-25 05:34:09.085440') end timestamp('2019-01-25 13:21:09.085444')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:27:09.085410') end timestamp('2019-01-25 13:49:09.085433')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block traffic('torrent'), protocol('http') start timestamp('2019-01-25 09:17:09.158523') end timestamp('2019-01-25 13:57:09.158527')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 02:29:09.158498') end timestamp('2019-01-25 08:14:09.158516')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('6', 'gb/wk') start timestamp('2019-01-25 09:38:09.349876') end timestamp('2019-01-25 13:49:09.349893')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') start timestamp('2019-01-25 02:46:09.349848') end timestamp('2019-01-25 08:10:09.349869')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk') allow service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('http'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') set quota('9', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('7', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('https'), protocol('smtp') start timestamp('2019-01-25 04:28:09.614931') end timestamp('2019-01-25 13:17:09.614935')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '70', 'mbps') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 05:49:09.614902') end timestamp('2019-01-25 14:54:09.614924')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 09:54:10.061323') end timestamp('2019-01-25 13:53:10.061328')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 03:44:10.061300') end timestamp('2019-01-25 07:44:10.061317')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 09:37:10.197122') end timestamp('2019-01-25 15:03:10.197127')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') allow service('instagram'), service('youtube') start timestamp('2019-01-25 02:25:10.197085') end timestamp('2019-01-25 08:45:10.197101')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('load-balancer') allow service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 08:53:10.265434') end timestamp('2019-01-25 13:29:10.265453')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 03:49:10.265401') end timestamp('2019-01-25 07:11:10.265428')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') allow service('instagram'), traffic('social-media') start timestamp('2019-01-25 08:45:10.825522') end timestamp('2019-01-25 13:51:10.825526')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 03:54:10.825499') end timestamp('2019-01-25 07:30:10.825515')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') unset quota('5', 'gb/wk') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 08:57:11.129329') end timestamp('2019-01-25 14:43:11.129333')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 02:34:11.129302') end timestamp('2019-01-25 07:17:11.129322')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('2', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('icmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 08:22:11.457108') end timestamp('2019-01-25 14:13:11.457114')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids') allow protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 03:17:11.457029') end timestamp('2019-01-25 07:31:11.457084')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('quic'), service('stremio') start timestamp('2019-01-25 04:10:11.643109') end timestamp('2019-01-25 14:57:11.643113')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 05:31:11.643080') end timestamp('2019-01-25 14:27:11.643102')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 08:43:12.168463') end timestamp('2019-01-25 14:42:12.168467')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow service('stremio'), service('netflix') start timestamp('2019-01-25 02:28:12.168440') end timestamp('2019-01-25 07:30:12.168457')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 04:51:12.317077') end timestamp('2019-01-25 14:06:12.317081')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('ids'), middlebox('parental-control') unset quota('2', 'gb/wk') start timestamp('2019-01-25 05:33:12.317053') end timestamp('2019-01-25 13:21:12.317072')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:19:12.880268') end timestamp('2019-01-25 14:13:12.880272')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 04:18:12.880237') end timestamp('2019-01-25 14:30:12.880261')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 05:27:13.559172') end timestamp('2019-01-25 13:24:13.559176')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 04:34:13.559148') end timestamp('2019-01-25 13:15:13.559166')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 09:00:13.839427') end timestamp('2019-01-25 14:00:13.839431')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 02:59:13.839404') end timestamp('2019-01-25 07:28:13.839420')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set bandwidth('min', '30', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('https'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('instagram'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 09:15:15.315831') end timestamp('2019-01-25 13:32:15.315836')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 04:04:15.315800') end timestamp('2019-01-25 08:52:15.315824')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block protocol('udp'), service('netflix') start timestamp('2019-01-25 08:27:15.716068') end timestamp('2019-01-25 13:59:15.716072')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 02:32:15.716061') end timestamp('2019-01-25 07:17:15.716064')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') unset bandwidth('min', '90', 'mbps') block protocol('sftp'), service('bittorrent') start timestamp('2019-01-25 09:45:16.260699') end timestamp('2019-01-25 15:02:16.260704')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 03:16:16.260671') end timestamp('2019-01-25 08:45:16.260693')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow protocol('https'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('parental-control') set quota('2', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 09:00:16.480290') end timestamp('2019-01-25 14:34:16.480294')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 03:41:16.480268') end timestamp('2019-01-25 07:30:16.480285')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('http'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 09:59:17.186102') end timestamp('2019-01-25 14:02:17.186105')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 03:43:17.186080') end timestamp('2019-01-25 08:57:17.186095')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('tcp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 09:50:18.002283') end timestamp('2019-01-25 13:20:18.002290')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 03:27:18.002231') end timestamp('2019-01-25 07:09:18.002261')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('sftp'), service('netflix') start timestamp('2019-01-25 08:15:18.310157') end timestamp('2019-01-25 15:07:18.310162')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 02:19:18.310130') end timestamp('2019-01-25 07:15:18.310151')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('5', 'gb/wk') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 05:25:18.490936') end timestamp('2019-01-25 13:22:18.490941')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('telnet'), traffic('social-media') start timestamp('2019-01-25 04:53:18.490912') end timestamp('2019-01-25 14:27:18.490931')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 09:20:18.549688') end timestamp('2019-01-25 14:01:18.549707')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 02:32:18.549663') end timestamp('2019-01-25 07:21:18.549681')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') unset quota('8', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 09:55:18.577213') end timestamp('2019-01-25 13:38:18.577217')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') unset quota('4', 'gb/wk') block protocol('snmp'), protocol('ftp') start timestamp('2019-01-25 02:12:18.577193') end timestamp('2019-01-25 08:36:18.577208')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('telnet'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('5', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 09:14:20.122772') end timestamp('2019-01-25 13:54:20.122776')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('stremio'), protocol('snmp') start timestamp('2019-01-25 03:58:20.122764') end timestamp('2019-01-25 09:06:20.122768')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') set quota('3', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '70', 'mbps') block protocol('quic'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 09:21:20.486870') end timestamp('2019-01-25 14:41:20.486873')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), protocol('ftp') start timestamp('2019-01-25 02:57:20.486862') end timestamp('2019-01-25 07:23:20.486866')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall') set quota('3', 'gb/wk') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('6', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') unset quota('6', 'gb/wk') block protocol('snmp'), traffic('social-media') start timestamp('2019-01-25 04:49:20.867666') end timestamp('2019-01-25 13:45:20.867670')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('instagram'), protocol('ftp') start timestamp('2019-01-25 04:29:20.867640') end timestamp('2019-01-25 13:47:20.867660')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('8', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 05:41:21.541267') end timestamp('2019-01-25 13:23:21.541271')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 05:04:21.541220') end timestamp('2019-01-25 14:39:21.541248')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('telnet'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('5', 'gb/wk') block service('facebook'), service('bittorrent') start timestamp('2019-01-25 09:38:21.900114') end timestamp('2019-01-25 13:45:21.900118')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('icmp'), service('bittorrent') start timestamp('2019-01-25 02:55:21.900089') end timestamp('2019-01-25 08:07:21.900108')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow traffic('streaming'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('snmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block service('vimeo'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('6', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow protocol('quic'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('9', 'gb/wk') allow protocol('http'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('peer2peer'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('6', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('3', 'gb/wk') start timestamp('2019-01-25 04:39:25.843476') end timestamp('2019-01-25 14:39:25.843480')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('dpi') unset quota('6', 'gb/wk') start timestamp('2019-01-25 05:28:25.843454') end timestamp('2019-01-25 13:54:25.843471')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 09:55:26.044937') end timestamp('2019-01-25 14:05:26.044941')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow protocol('sftp'), protocol('smtp') start timestamp('2019-01-25 03:05:26.044914') end timestamp('2019-01-25 07:30:26.044931')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block service('facebook'), traffic('social-media') start timestamp('2019-01-25 09:00:26.154546') end timestamp('2019-01-25 14:08:26.154550')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 02:49:26.154519') end timestamp('2019-01-25 08:40:26.154539')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('8', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') start timestamp('2019-01-25 08:21:26.681175') end timestamp('2019-01-25 13:45:26.681179')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') start timestamp('2019-01-25 03:53:26.681151') end timestamp('2019-01-25 07:26:26.681169')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('firewall') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 09:36:27.443334') end timestamp('2019-01-25 14:40:27.443338')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('load-balancer'), middlebox('parental-control') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 03:35:27.443312') end timestamp('2019-01-25 08:55:27.443328')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 09:06:27.722024') end timestamp('2019-01-25 14:16:27.722028')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('firewall') allow service('vimeo'), protocol('tcp') start timestamp('2019-01-25 03:24:27.722016') end timestamp('2019-01-25 08:27:27.722020')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:28:28.082950') end timestamp('2019-01-25 14:37:28.082953')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:25:28.082930') end timestamp('2019-01-25 13:47:28.082945')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('stremio'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi') allow protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('stremio'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control') allow protocol('snmp'), protocol('icmp') start timestamp('2019-01-25 09:17:28.575416') end timestamp('2019-01-25 13:55:28.575420')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 03:09:28.575380') end timestamp('2019-01-25 09:04:28.575410')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '70', 'mbps') allow protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('load-balancer') set quota('8', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') unset quota('9', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), protocol('http')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 08:51:29.433561') end timestamp('2019-01-25 15:07:29.433565')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 03:16:29.433539') end timestamp('2019-01-25 07:51:29.433555')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control') block traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '10', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '50', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 09:49:30.124580') end timestamp('2019-01-25 13:22:30.124584')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 02:51:30.124548') end timestamp('2019-01-25 08:34:30.124572')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set quota('2', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 08:21:30.585377') end timestamp('2019-01-25 14:13:30.585396')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 03:32:30.585340') end timestamp('2019-01-25 07:36:30.585356')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 05:12:31.389621') end timestamp('2019-01-25 13:29:31.389625')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 04:52:31.389594') end timestamp('2019-01-25 13:47:31.389615')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi') set quota('2', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('https'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer') start timestamp('2019-01-25 05:23:31.966910') end timestamp('2019-01-25 13:21:31.966914')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 05:39:31.966886') end timestamp('2019-01-25 14:12:31.966904')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow protocol('telnet'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('vimeo'), service('facebook') start timestamp('2019-01-25 04:26:32.318489') end timestamp('2019-01-25 14:09:32.318493')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow service('stremio'), service('netflix') start timestamp('2019-01-25 04:12:32.318464') end timestamp('2019-01-25 13:11:32.318484')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '20', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set quota('5', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') block protocol('https'), protocol('smtp') start timestamp('2019-01-25 09:51:33.164750') end timestamp('2019-01-25 14:55:33.164769')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') allow protocol('quic'), service('instagram') start timestamp('2019-01-25 03:34:33.164698') end timestamp('2019-01-25 08:36:33.164729')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('http'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('6', 'gb/wk') allow protocol('sftp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block service('amazon-prime'), protocol('snmp') start timestamp('2019-01-25 10:03:33.483000') end timestamp('2019-01-25 13:42:33.483003')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('udp'), service('netflix') start timestamp('2019-01-25 03:46:33.482978') end timestamp('2019-01-25 07:15:33.482996')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '40', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') start timestamp('2019-01-25 09:42:33.746789') end timestamp('2019-01-25 15:04:33.746793')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:22:33.746740') end timestamp('2019-01-25 08:52:33.746769')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 09:19:34.044352') end timestamp('2019-01-25 14:43:34.044369')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 03:36:34.044315') end timestamp('2019-01-25 08:26:34.044331')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('parental-control') set quota('3', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 09:31:34.376462') end timestamp('2019-01-25 14:13:34.376465')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('https'), service('facebook') start timestamp('2019-01-25 02:42:34.376454') end timestamp('2019-01-25 09:05:34.376458')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('youtube'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('6', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') add middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('icmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('5', 'gb/wk') block service('stremio'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('8', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '10', 'mbps') block protocol('smtp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:58:36.564763') end timestamp('2019-01-25 13:10:36.564768')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') start timestamp('2019-01-25 02:39:36.564742') end timestamp('2019-01-25 07:38:36.564757')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 09:44:36.750706') end timestamp('2019-01-25 15:08:36.750711')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 02:44:36.750682') end timestamp('2019-01-25 08:22:36.750700')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 04:57:37.351040') end timestamp('2019-01-25 13:59:37.351044')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 04:17:37.351000') end timestamp('2019-01-25 13:39:37.351021')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 09:36:37.545614') end timestamp('2019-01-25 13:30:37.545618')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 02:33:37.545590') end timestamp('2019-01-25 08:53:37.545608')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('snmp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('https'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('4', 'gb/wk') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('udp'), protocol('ftp') start timestamp('2019-01-25 05:48:38.892397') end timestamp('2019-01-25 13:13:38.892401')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 05:20:38.892374') end timestamp('2019-01-25 13:35:38.892391')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('udp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 08:40:40.679735') end timestamp('2019-01-25 14:25:40.679739')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 03:01:40.679713') end timestamp('2019-01-25 07:34:40.679728')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control') unset quota('2', 'gb/wk') allow protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 05:09:40.917216') end timestamp('2019-01-25 13:36:40.917220')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 05:05:40.917188') end timestamp('2019-01-25 13:30:40.917210')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('netflix'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('netflix'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('quic'), service('facebook') start timestamp('2019-01-25 05:27:41.234958') end timestamp('2019-01-25 13:20:41.234962')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 04:10:41.234933') end timestamp('2019-01-25 13:27:41.234952')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('telnet'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('telnet'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('tcp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('ids') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi') set quota('6', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('6', 'gb/wk') block service('amazon-prime'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 09:41:43.799230') end timestamp('2019-01-25 13:32:43.799234')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 02:41:43.799208') end timestamp('2019-01-25 08:53:43.799224')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('load-balancer'), middlebox('dpi') block service('stremio'), service('youtube') start timestamp('2019-01-25 09:36:44.331284') end timestamp('2019-01-25 13:45:44.331289')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 02:34:44.331263') end timestamp('2019-01-25 08:42:44.331279')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer') allow service('instagram'), service('facebook') start timestamp('2019-01-25 09:22:45.425889') end timestamp('2019-01-25 14:09:45.425894')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('parental-control') block service('netflix'), service('bittorrent') start timestamp('2019-01-25 03:24:45.425863') end timestamp('2019-01-25 08:01:45.425883')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control') set quota('2', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') unset quota('6', 'gb/wk') block service('stremio'), protocol('quic') start timestamp('2019-01-25 04:31:45.872384') end timestamp('2019-01-25 13:33:45.872390')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('telnet'), service('instagram') start timestamp('2019-01-25 04:55:45.872351') end timestamp('2019-01-25 14:39:45.872376')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 04:44:46.683466') end timestamp('2019-01-25 15:00:46.683470')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') unset quota('5', 'gb/wk') allow protocol('snmp'), protocol('udp') start timestamp('2019-01-25 05:21:46.683440') end timestamp('2019-01-25 14:45:46.683460')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 05:48:46.777101') end timestamp('2019-01-25 14:58:46.777105')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:37:46.777072') end timestamp('2019-01-25 13:33:46.777095')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') set quota('2', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 08:44:47.646245') end timestamp('2019-01-25 14:50:47.646249')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('youtube'), protocol('ftp') start timestamp('2019-01-25 03:40:47.646195') end timestamp('2019-01-25 08:20:47.646239')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('1', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('bittorrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') set quota('5', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') set quota('8', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('ftp'), traffic('streaming') start timestamp('2019-01-25 04:47:49.318013') end timestamp('2019-01-25 13:30:49.318018')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '10', 'mbps') allow protocol('telnet'), service('youtube') start timestamp('2019-01-25 04:12:49.317982') end timestamp('2019-01-25 14:45:49.318007')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '40', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 09:40:49.793244') end timestamp('2019-01-25 14:35:49.793248')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), protocol('https') start timestamp('2019-01-25 03:32:49.793220') end timestamp('2019-01-25 08:08:49.793238')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('dpi') set quota('2', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 05:41:49.891803') end timestamp('2019-01-25 15:06:49.891808')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 05:45:49.891750') end timestamp('2019-01-25 13:25:49.891797')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi') set bandwidth('min', '50', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('facebook'), service('netflix') start timestamp('2019-01-25 04:50:50.133351') end timestamp('2019-01-25 13:52:50.133355')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('netflix') start timestamp('2019-01-25 04:46:50.133325') end timestamp('2019-01-25 14:55:50.133346')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 05:44:50.353655') end timestamp('2019-01-25 13:51:50.353662')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 05:02:50.353612') end timestamp('2019-01-25 14:46:50.353645')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('ids') allow service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('dpi') allow traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall') set quota('4', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 04:41:51.404147') end timestamp('2019-01-25 14:36:51.404151')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('netflix') start timestamp('2019-01-25 05:07:51.404124') end timestamp('2019-01-25 14:32:51.404141')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer') unset quota('2', 'gb/wk') allow service('facebook'), traffic('social-media') start timestamp('2019-01-25 09:36:51.577925') end timestamp('2019-01-25 14:48:51.577929')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('parental-control') unset quota('2', 'gb/wk') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 03:33:51.577904') end timestamp('2019-01-25 07:30:51.577919')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 10:06:51.606480') end timestamp('2019-01-25 14:36:51.606485')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('dpi') unset bandwidth('max', '50', 'mbps') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 02:55:51.606459') end timestamp('2019-01-25 08:51:51.606474')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow protocol('telnet'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('vimeo'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '70', 'mbps') allow protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') unset bandwidth('min', '70', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('load-balancer') allow protocol('quic'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block traffic('torrent'), protocol('udp') start timestamp('2019-01-25 09:09:53.666957') end timestamp('2019-01-25 13:21:53.666961')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 02:43:53.666933') end timestamp('2019-01-25 08:58:53.666951')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('dpi'), middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('1', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set quota('6', 'gb/wk') allow protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('torrent'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('quic'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block service('stremio'), service('instagram') start timestamp('2019-01-25 08:34:56.273648') end timestamp('2019-01-25 13:11:56.273651')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') allow service('stremio'), service('netflix') start timestamp('2019-01-25 03:44:56.273639') end timestamp('2019-01-25 08:31:56.273643')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset quota('2', 'gb/wk') allow service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 08:23:56.630733') end timestamp('2019-01-25 14:43:56.630737')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 02:28:56.630708') end timestamp('2019-01-25 08:12:56.630726')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') block service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 05:36:56.894126') end timestamp('2019-01-25 13:20:56.894130')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('4', 'gb/wk') allow protocol('https'), service('popcorn-time') start timestamp('2019-01-25 04:20:56.894096') end timestamp('2019-01-25 13:37:56.894119')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '10', 'mbps') block service('facebook'), service('netflix') start timestamp('2019-01-25 04:27:57.000587') end timestamp('2019-01-25 14:58:57.000591')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') unset quota('6', 'gb/wk') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 06:02:57.000560') end timestamp('2019-01-25 14:05:57.000580')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('2', 'gb/wk') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 05:56:57.234107') end timestamp('2019-01-25 14:02:57.234112')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('6', 'gb/wk') block protocol('sftp'), service('netflix') start timestamp('2019-01-25 05:03:57.234081') end timestamp('2019-01-25 13:11:57.234101')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') unset quota('6', 'gb/wk') start timestamp('2019-01-25 05:33:58.132615') end timestamp('2019-01-25 15:03:58.132619')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') start timestamp('2019-01-25 04:20:58.132583') end timestamp('2019-01-25 13:52:58.132608')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('6', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall') set quota('5', 'gb/wk') allow protocol('quic'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 09:02:58.335896') end timestamp('2019-01-25 14:18:58.335902')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 03:18:58.335854') end timestamp('2019-01-25 08:51:58.335886')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 05:04:58.744816') end timestamp('2019-01-25 15:05:58.744820')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 04:48:58.744791') end timestamp('2019-01-25 14:35:58.744810')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('vimeo'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:46:59.712831') end timestamp('2019-01-25 13:55:59.712835')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 04:36:59.712800') end timestamp('2019-01-25 13:36:59.712825')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 04:33:59.740589') end timestamp('2019-01-25 14:13:59.740593')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') unset bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:34:59.740562') end timestamp('2019-01-25 13:59:59.740584')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('parental-control') set quota('9', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') start timestamp('2019-01-25 08:51:59.839894') end timestamp('2019-01-25 13:09:59.839914')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 02:52:59.839882') end timestamp('2019-01-25 07:41:59.839889')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('1', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('parental-control') set quota('5', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('ids') set quota('4', 'gb/wk') allow protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') unset quota('4', 'gb/wk') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 04:51:00.201040') end timestamp('2019-01-25 14:45:00.201044')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 04:10:00.201016') end timestamp('2019-01-25 14:01:00.201034')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('snmp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('snmp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('9', 'gb/wk') block service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '70', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') set quota('9', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('5', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('load-balancer'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow protocol('icmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 05:55:01.532448') end timestamp('2019-01-25 13:52:01.532452')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') unset quota('3', 'gb/wk') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 05:16:01.532416') end timestamp('2019-01-25 13:13:01.532442')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 05:32:03.675022') end timestamp('2019-01-25 14:55:03.675026')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 04:47:03.674999') end timestamp('2019-01-25 14:44:03.675015')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set quota('9', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('firewall') set quota('7', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('udp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '20', 'mbps') allow service('facebook'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block service('facebook'), service('popcorn-time') start timestamp('2019-01-25 09:10:04.609149') end timestamp('2019-01-25 13:48:04.609153')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 04:05:04.609114') end timestamp('2019-01-25 07:27:04.609143')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('tcp'), service('facebook') start timestamp('2019-01-25 04:18:04.897982') end timestamp('2019-01-25 13:57:04.897986')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 06:04:04.897955') end timestamp('2019-01-25 15:01:04.897976')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('stremio'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 09:42:05.389033') end timestamp('2019-01-25 13:37:05.389038')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('stremio'), protocol('udp') start timestamp('2019-01-25 02:17:05.388996') end timestamp('2019-01-25 07:22:05.389027')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') allow protocol('smtp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 10:00:07.429113') end timestamp('2019-01-25 14:21:07.429117')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow protocol('udp'), traffic('streaming') start timestamp('2019-01-25 03:43:07.429090') end timestamp('2019-01-25 08:51:07.429107')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('popcorn-time'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('ids') set quota('3', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('netflix'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 09:21:08.021350') end timestamp('2019-01-25 14:48:08.021354')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:27:08.021322') end timestamp('2019-01-25 07:54:08.021342')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('vimeo'), protocol('icmp') start timestamp('2019-01-25 05:38:08.255347') end timestamp('2019-01-25 14:09:08.255351')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('http'), protocol('udp') start timestamp('2019-01-25 05:15:08.255309') end timestamp('2019-01-25 13:28:08.255341')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 09:03:08.372762') end timestamp('2019-01-25 13:54:08.372768')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 03:28:08.372723') end timestamp('2019-01-25 08:10:08.372754')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow protocol('telnet'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('stremio'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') set quota('7', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('min', '20', 'mbps') block service('vimeo'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), protocol('snmp') start timestamp('2019-01-25 04:26:08.981647') end timestamp('2019-01-25 14:03:08.981651')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 05:57:08.981623') end timestamp('2019-01-25 13:57:08.981641')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('quic'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('min', '10', 'mbps') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('ids') set quota('6', 'gb/wk') block service('instagram'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') block protocol('snmp'), protocol('udp') start timestamp('2019-01-25 08:55:09.841869') end timestamp('2019-01-25 14:02:09.841874')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 02:38:09.841848') end timestamp('2019-01-25 07:24:09.841863')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block service('stremio'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') set quota('3', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') set bandwidth('max', '70', 'mbps') allow protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('5', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set quota('9', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('3', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') set bandwidth('max', '80', 'mbps') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') set bandwidth('max', '30', 'mbps') block service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('5', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('stremio'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') set bandwidth('min', '20', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('snmp'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow protocol('smtp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('9', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set quota('4', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set quota('3', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:04:12.471449') end timestamp('2019-01-25 13:28:12.471453')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi') set quota('8', 'gb/wk') start timestamp('2019-01-25 06:01:12.471421') end timestamp('2019-01-25 14:54:12.471442')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('7', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('2', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') add middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('7', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('smtp'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 05:16:14.342424') end timestamp('2019-01-25 15:07:14.342428')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 05:53:14.342401') end timestamp('2019-01-25 14:04:14.342418')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') unset quota('7', 'gb/wk') block protocol('udp'), service('netflix') start timestamp('2019-01-25 05:54:14.616115') end timestamp('2019-01-25 13:59:14.616119')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:37:14.616091') end timestamp('2019-01-25 13:55:14.616109')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:39:15.220789') end timestamp('2019-01-25 14:21:15.220793')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:57:15.220766') end timestamp('2019-01-25 13:34:15.220783')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('2', 'gb/wk') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 05:59:15.304810') end timestamp('2019-01-25 13:27:15.304814')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('2', 'gb/wk') allow protocol('icmp'), service('bittorrent') start timestamp('2019-01-25 04:09:15.304787') end timestamp('2019-01-25 14:31:15.304804')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set quota('9', 'gb/wk') block service('instagram'), service('facebook') start timestamp('2019-01-25 04:45:15.795627') end timestamp('2019-01-25 14:36:15.795631')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset quota('2', 'gb/wk') allow service('instagram'), service('youtube') start timestamp('2019-01-25 04:40:15.795604') end timestamp('2019-01-25 13:17:15.795621')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow protocol('https'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('parental-control') set quota('6', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 09:52:16.851912') end timestamp('2019-01-25 14:46:16.851916')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall') allow service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 02:37:16.851890') end timestamp('2019-01-25 08:24:16.851906')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow protocol('snmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 08:10:17.202410') end timestamp('2019-01-25 14:04:17.202414')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block protocol('udp'), traffic('streaming') start timestamp('2019-01-25 03:51:17.202388') end timestamp('2019-01-25 08:08:17.202404')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 09:19:17.470030') end timestamp('2019-01-25 13:30:17.470034')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:13:17.469982') end timestamp('2019-01-25 07:46:17.470011')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('dpi') set bandwidth('min', '30', 'mbps') allow protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:55:17.512652') end timestamp('2019-01-25 13:27:17.512656')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 04:00:17.512603') end timestamp('2019-01-25 08:03:17.512633')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 08:46:17.512818') end timestamp('2019-01-25 14:57:17.512835')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') allow protocol('quic'), service('bittorrent') start timestamp('2019-01-25 02:27:17.512794') end timestamp('2019-01-25 07:26:17.512814')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('youtube'), service('netflix') start timestamp('2019-01-25 06:03:17.595748') end timestamp('2019-01-25 13:20:17.595752')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:10:17.595725') end timestamp('2019-01-25 13:24:17.595742')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 05:26:17.678346') end timestamp('2019-01-25 14:50:17.678350')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 05:08:17.678323') end timestamp('2019-01-25 13:47:17.678340')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 05:26:18.314940') end timestamp('2019-01-25 13:45:18.314944')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 05:42:18.314914') end timestamp('2019-01-25 13:35:18.314934')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('4', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('parental-control') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow protocol('quic'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi') set quota('7', 'gb/wk') allow traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('4', 'gb/wk') block protocol('sftp'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('6', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('6', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('dpi') unset bandwidth('min', '90', 'mbps') allow service('popcorn-time') start timestamp('2019-01-25 04:40:21.284965') end timestamp('2019-01-25 14:07:21.284969')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 06:00:21.284944') end timestamp('2019-01-25 13:54:21.284960')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 04:55:21.435383') end timestamp('2019-01-25 13:25:21.435386')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('tcp'), service('facebook') start timestamp('2019-01-25 04:19:21.435358') end timestamp('2019-01-25 14:43:21.435377')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 04:23:21.821980') end timestamp('2019-01-25 14:44:21.821984')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset quota('3', 'gb/wk') allow traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 04:11:21.821953') end timestamp('2019-01-25 13:49:21.821974')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set quota('7', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '10', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('tcp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('https'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('http'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('udp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('min', '90', 'mbps') block protocol('icmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 09:16:24.857134') end timestamp('2019-01-25 13:17:24.857138')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') allow service('facebook') start timestamp('2019-01-25 03:34:24.857110') end timestamp('2019-01-25 08:00:24.857127')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall') set quota('9', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 06:05:25.381156') end timestamp('2019-01-25 14:28:25.381160')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 04:23:25.381132') end timestamp('2019-01-25 14:56:25.381150')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids') set quota('9', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 05:29:25.480775') end timestamp('2019-01-25 14:39:25.480779')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') start timestamp('2019-01-25 05:23:25.480750') end timestamp('2019-01-25 14:52:25.480769')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block protocol('http'), service('instagram') start timestamp('2019-01-25 08:20:25.655619') end timestamp('2019-01-25 13:21:25.655624')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') allow service('stremio'), protocol('icmp') start timestamp('2019-01-25 02:57:25.655598') end timestamp('2019-01-25 07:47:25.655613')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') allow service('vimeo'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 09:37:25.754830') end timestamp('2019-01-25 13:48:25.754834')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 03:51:25.754806') end timestamp('2019-01-25 08:13:25.754824')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('quic'), service('youtube') start timestamp('2019-01-25 05:31:25.790638') end timestamp('2019-01-25 14:52:25.790643')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow traffic('streaming') start timestamp('2019-01-25 05:01:25.790582') end timestamp('2019-01-25 13:48:25.790619')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('ids') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow protocol('icmp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') block service('amazon-prime'), protocol('http') start timestamp('2019-01-25 04:50:25.890069') end timestamp('2019-01-25 15:05:25.890073')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') unset quota('3', 'gb/wk') block service('facebook'), service('popcorn-time') start timestamp('2019-01-25 04:41:25.890044') end timestamp('2019-01-25 14:01:25.890063')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('5', 'gb/wk') block protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '20', 'mbps') block service('instagram'), service('facebook') start timestamp('2019-01-25 06:03:26.290861') end timestamp('2019-01-25 13:14:26.290865')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 05:34:26.290839') end timestamp('2019-01-25 14:32:26.290856')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 05:54:27.572200') end timestamp('2019-01-25 14:29:27.572204')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('tcp'), service('facebook') start timestamp('2019-01-25 04:28:27.572160') end timestamp('2019-01-25 13:17:27.572194')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('sftp'), service('facebook') start timestamp('2019-01-25 04:55:28.190916') end timestamp('2019-01-25 14:17:28.190920')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 04:10:28.190891') end timestamp('2019-01-25 14:08:28.190909')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('load-balancer') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 10:07:28.729048') end timestamp('2019-01-25 13:22:28.729053')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('udp'), service('facebook') start timestamp('2019-01-25 02:28:28.729023') end timestamp('2019-01-25 08:41:28.729042')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 05:43:29.288527') end timestamp('2019-01-25 13:18:29.288531')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow service('instagram'), service('netflix') start timestamp('2019-01-25 04:46:29.288501') end timestamp('2019-01-25 15:04:29.288522')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('9', 'gb/wk') allow protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow protocol('telnet'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') set quota('9', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('6', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('snmp'), service('youtube') start timestamp('2019-01-25 08:32:29.793678') end timestamp('2019-01-25 13:32:29.793683')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 02:45:29.793652') end timestamp('2019-01-25 07:56:29.793672')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') allow service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 10:01:29.793915') end timestamp('2019-01-25 14:07:29.793919')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow traffic('streaming'), service('netflix') start timestamp('2019-01-25 02:20:29.793902') end timestamp('2019-01-25 09:01:29.793910')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset quota('5', 'gb/wk') block traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 04:59:29.860260') end timestamp('2019-01-25 14:41:29.860265')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 05:15:29.860231') end timestamp('2019-01-25 14:15:29.860254')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('snmp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '50', 'mbps') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 08:36:29.951449') end timestamp('2019-01-25 13:24:29.951453')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('dpi') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 02:50:29.951428') end timestamp('2019-01-25 07:54:29.951443')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset quota('4', 'gb/wk') block protocol('sftp'), protocol('smtp') start timestamp('2019-01-25 05:33:30.222726') end timestamp('2019-01-25 14:24:30.222730')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:05:30.222703') end timestamp('2019-01-25 13:56:30.222720')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow protocol('snmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') unset quota('3', 'gb/wk') block protocol('telnet'), protocol('udp') start timestamp('2019-01-25 04:43:30.911236') end timestamp('2019-01-25 14:13:30.911240')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('https'), service('bittorrent') start timestamp('2019-01-25 05:34:30.911212') end timestamp('2019-01-25 14:50:30.911230')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('1', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('min', '60', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:20:31.424957') end timestamp('2019-01-25 14:13:31.424961')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 04:34:31.424933') end timestamp('2019-01-25 15:02:31.424951')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') unset quota('2', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block service('instagram'), protocol('ftp') start timestamp('2019-01-25 09:16:32.218612') end timestamp('2019-01-25 14:55:32.218619')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow service('stremio'), service('instagram') start timestamp('2019-01-25 02:34:32.218557') end timestamp('2019-01-25 07:51:32.218585')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 09:39:32.552806') end timestamp('2019-01-25 13:54:32.552810')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block service('instagram') start timestamp('2019-01-25 02:37:32.552784') end timestamp('2019-01-25 07:33:32.552800')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block protocol('quic') start timestamp('2019-01-25 09:47:32.958805') end timestamp('2019-01-25 14:10:32.958809')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 03:37:32.958767') end timestamp('2019-01-25 09:05:32.958799')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 09:23:33.176228') end timestamp('2019-01-25 14:57:33.176233')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 03:09:33.176205') end timestamp('2019-01-25 07:39:33.176222')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('quic'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk') block traffic('social-media'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') unset bandwidth('max', '30', 'mbps') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 04:18:34.364254') end timestamp('2019-01-25 13:21:34.364258')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set quota('1', 'gb/wk') allow service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 05:53:34.364229') end timestamp('2019-01-25 13:26:34.364248')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 08:46:34.420016') end timestamp('2019-01-25 15:02:34.420019')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow protocol('http'), service('youtube') start timestamp('2019-01-25 03:48:34.420009') end timestamp('2019-01-25 08:09:34.420012')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') add middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('bittorrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block traffic('torrent') start timestamp('2019-01-25 09:24:34.857682') end timestamp('2019-01-25 13:33:34.857685')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 02:17:34.857674') end timestamp('2019-01-25 07:29:34.857678')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('smtp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('firewall') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') unset quota('2', 'gb/wk') start timestamp('2019-01-25 04:22:34.993745') end timestamp('2019-01-25 13:17:34.993749')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset quota('4', 'gb/wk') start timestamp('2019-01-25 05:41:34.993714') end timestamp('2019-01-25 13:56:34.993738')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 08:22:35.191802') end timestamp('2019-01-25 13:50:35.191806')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 03:52:35.191777') end timestamp('2019-01-25 07:44:35.191795')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('stremio'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('4', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi') set quota('3', 'gb/wk') block service('amazon-prime'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('load-balancer') start timestamp('2019-01-25 08:55:36.164506') end timestamp('2019-01-25 14:16:36.164510')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 02:40:36.164481') end timestamp('2019-01-25 08:26:36.164499')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 09:48:36.754702') end timestamp('2019-01-25 13:33:36.754707')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 03:17:36.754677') end timestamp('2019-01-25 07:43:36.754696')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('http'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('ids') set quota('6', 'gb/wk') allow protocol('telnet'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('torrent'), protocol('udp') start timestamp('2019-01-25 04:53:37.793331') end timestamp('2019-01-25 14:57:37.793335')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('instagram'), protocol('udp') start timestamp('2019-01-25 04:50:37.793302') end timestamp('2019-01-25 13:56:37.793325')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('9', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('min', '30', 'mbps') block service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('parental-control'), middlebox('dpi') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow protocol('quic'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set quota('6', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('3', 'gb/wk') allow service('stremio'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('dpi') allow protocol('https'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') set quota('3', 'gb/wk') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('5', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('telnet'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block service('vimeo'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') unset bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 08:59:40.826143') end timestamp('2019-01-25 13:30:40.826147')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') unset quota('3', 'gb/wk') start timestamp('2019-01-25 03:55:40.826115') end timestamp('2019-01-25 08:51:40.826136')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('dpi') set quota('1', 'gb/wk') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block service('facebook'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') unset quota('3', 'gb/wk') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 05:40:41.244347') end timestamp('2019-01-25 14:31:41.244350')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 05:31:41.244322') end timestamp('2019-01-25 13:15:41.244341')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 05:48:41.755282') end timestamp('2019-01-25 13:47:41.755286')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 06:08:41.755247') end timestamp('2019-01-25 14:19:41.755275')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('ids') set quota('1', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset quota('2', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 09:41:42.159719') end timestamp('2019-01-25 14:55:42.159724')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi') unset quota('6', 'gb/wk') start timestamp('2019-01-25 02:59:42.159692') end timestamp('2019-01-25 07:23:42.159712')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('2', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 04:50:42.448718') end timestamp('2019-01-25 14:29:42.448722')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') unset quota('1', 'gb/wk') allow service('instagram'), service('facebook') start timestamp('2019-01-25 05:45:42.448684') end timestamp('2019-01-25 13:10:42.448712')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('8', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow protocol('udp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') unset quota('2', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('load-balancer') block service('netflix'), traffic('streaming') start timestamp('2019-01-25 10:07:43.314424') end timestamp('2019-01-25 13:49:43.314428')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control') allow service('netflix') start timestamp('2019-01-25 02:26:43.314400') end timestamp('2019-01-25 08:12:43.314418')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 05:39:44.161985') end timestamp('2019-01-25 14:17:44.161989')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow service('youtube'), service('netflix') start timestamp('2019-01-25 04:26:44.161961') end timestamp('2019-01-25 15:06:44.161979')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall'), middlebox('dpi') block service('amazon-prime')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') allow protocol('sftp'), service('youtube') start timestamp('2019-01-25 08:42:44.512082') end timestamp('2019-01-25 14:57:44.512087')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 02:15:44.512057') end timestamp('2019-01-25 08:01:44.512075')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 09:22:44.635699') end timestamp('2019-01-25 14:46:44.635703')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('load-balancer') start timestamp('2019-01-25 03:43:44.635678') end timestamp('2019-01-25 08:20:44.635693')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '80', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('netflix'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '40', 'mbps') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('tcp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('icmp'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi') set quota('4', 'gb/wk') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 05:51:45.997681') end timestamp('2019-01-25 15:04:45.997685')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 05:05:45.997661') end timestamp('2019-01-25 14:48:45.997676')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block protocol('quic'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('1', 'gb/wk') block service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 04:15:46.827341') end timestamp('2019-01-25 13:25:46.827345')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') unset bandwidth('min', '90', 'mbps') allow service('vimeo'), protocol('smtp') start timestamp('2019-01-25 05:48:46.827314') end timestamp('2019-01-25 13:21:46.827335')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset quota('7', 'gb/wk') start timestamp('2019-01-25 05:30:47.131767') end timestamp('2019-01-25 13:55:47.131771')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 04:40:47.131742') end timestamp('2019-01-25 14:03:47.131761')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('3', 'gb/wk') allow service('vimeo'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') set quota('6', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('3', 'gb/wk') allow protocol('tcp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control') allow protocol('quic'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') set bandwidth('min', '30', 'mbps') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 05:19:49.778377') end timestamp('2019-01-25 14:29:49.778380')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '40', 'mbps') allow service('amazon-prime'), protocol('https') start timestamp('2019-01-25 04:57:49.778356') end timestamp('2019-01-25 14:31:49.778371')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('tcp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('amazon-prime')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('netflix') start timestamp('2019-01-25 04:56:50.430106') end timestamp('2019-01-25 14:18:50.430111')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:32:50.430076') end timestamp('2019-01-25 14:52:50.430100')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('torrent') start timestamp('2019-01-25 05:20:50.791978') end timestamp('2019-01-25 15:08:50.791983')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('5', 'gb/wk') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 05:43:50.791951') end timestamp('2019-01-25 14:10:50.791972')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('5', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('2', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi') set quota('5', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids') set bandwidth('max', '20', 'mbps') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow protocol('quic'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset quota('2', 'gb/wk') block service('vimeo'), protocol('https') start timestamp('2019-01-25 04:26:52.255937') end timestamp('2019-01-25 13:17:52.255941')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') allow service('stremio'), service('instagram') start timestamp('2019-01-25 04:57:52.255899') end timestamp('2019-01-25 14:30:52.255931')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('min', '10', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('instagram'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('5', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('telnet'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('amazon-prime'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 04:39:52.956766') end timestamp('2019-01-25 15:01:52.956770')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('udp'), service('facebook') start timestamp('2019-01-25 05:33:52.956742') end timestamp('2019-01-25 14:32:52.956760')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi') set bandwidth('max', '30', 'mbps') block protocol('http'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('instagram'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 04:30:54.570075') end timestamp('2019-01-25 15:06:54.570078')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 04:29:54.570054') end timestamp('2019-01-25 13:39:54.570070')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('icmp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('tcp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset bandwidth('min', '90', 'mbps') block protocol('quic'), service('instagram') start timestamp('2019-01-25 05:32:55.479637') end timestamp('2019-01-25 14:08:55.479642')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), protocol('https') start timestamp('2019-01-25 06:06:55.479612') end timestamp('2019-01-25 13:45:55.479631')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block protocol('http'), service('youtube') start timestamp('2019-01-25 08:46:55.479840') end timestamp('2019-01-25 14:08:55.479844')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') allow service('youtube'), service('facebook') start timestamp('2019-01-25 03:25:55.479812') end timestamp('2019-01-25 07:22:55.479819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('4', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') unset quota('5', 'gb/wk') start timestamp('2019-01-25 09:11:55.876906') end timestamp('2019-01-25 13:58:55.876910')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') unset bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 03:32:55.876879') end timestamp('2019-01-25 07:40:55.876899')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block protocol('http'), service('youtube') start timestamp('2019-01-25 05:29:56.169777') end timestamp('2019-01-25 14:26:56.169781')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 05:12:56.169752') end timestamp('2019-01-25 14:00:56.169772')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') unset quota('1', 'gb/wk') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 04:40:56.446609') end timestamp('2019-01-25 13:43:56.446613')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 04:19:56.446581') end timestamp('2019-01-25 13:30:56.446603')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('dpi') set quota('4', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control') allow protocol('snmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('2', 'gb/wk') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('9', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow protocol('smtp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set bandwidth('max', '90', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps') allow protocol('https'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('load-balancer') set quota('2', 'gb/wk') allow service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '10', 'mbps') block service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('streaming'), protocol('ftp') start timestamp('2019-01-25 09:57:57.232523') end timestamp('2019-01-25 14:32:57.232527')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 02:50:57.232498') end timestamp('2019-01-25 08:40:57.232517')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('streaming'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '40', 'mbps') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 04:46:57.550398') end timestamp('2019-01-25 14:48:57.550402')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 05:46:57.550371') end timestamp('2019-01-25 14:14:57.550391')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set quota('5', 'gb/wk') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 09:30:57.746227') end timestamp('2019-01-25 13:47:57.746232')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') block protocol('tcp'), protocol('smtp') start timestamp('2019-01-25 03:43:57.746204') end timestamp('2019-01-25 07:15:57.746221')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 09:23:58.075507') end timestamp('2019-01-25 13:39:58.075511')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('https'), traffic('social-media') start timestamp('2019-01-25 02:46:58.075484') end timestamp('2019-01-25 07:37:58.075501')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block protocol('http'), service('facebook') start timestamp('2019-01-25 09:58:58.141953') end timestamp('2019-01-25 15:06:58.141957')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 02:18:58.141926') end timestamp('2019-01-25 07:18:58.141946')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') set quota('1', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 05:29:58.440665') end timestamp('2019-01-25 13:33:58.440669')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('youtube'), protocol('ftp') start timestamp('2019-01-25 05:07:58.440643') end timestamp('2019-01-25 13:15:58.440660')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') set quota('7', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps') allow protocol('tcp'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('ids') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') allow service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 06:04:59.868262') end timestamp('2019-01-25 15:00:59.868266')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset quota('1', 'gb/wk') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:40:59.868218') end timestamp('2019-01-25 14:06:59.868255')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') block protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow service('youtube'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '70', 'mbps') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:34:00.695034') end timestamp('2019-01-25 14:45:00.695038')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('stremio'), protocol('snmp') start timestamp('2019-01-25 04:54:00.695009') end timestamp('2019-01-25 13:48:00.695028')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow protocol('telnet'), service('netflix') start timestamp('2019-01-25 08:27:01.475622') end timestamp('2019-01-25 14:26:01.475626')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') allow protocol('icmp'), service('popcorn-time') start timestamp('2019-01-25 04:01:01.475586') end timestamp('2019-01-25 07:31:01.475603')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 04:20:01.625128') end timestamp('2019-01-25 14:22:01.625132')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow service('stremio'), service('facebook') start timestamp('2019-01-25 05:06:01.625095') end timestamp('2019-01-25 14:44:01.625123')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') unset quota('1', 'gb/wk') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 06:05:02.192945') end timestamp('2019-01-25 14:51:02.192949')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('2', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:51:02.192921') end timestamp('2019-01-25 13:52:02.192939')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 05:00:03.543040') end timestamp('2019-01-25 15:09:03.543044')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') allow service('youtube'), protocol('ftp') start timestamp('2019-01-25 05:34:03.543016') end timestamp('2019-01-25 13:17:03.543034')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 09:03:05.003902') end timestamp('2019-01-25 15:03:05.003906')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('1', 'gb/wk') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 03:27:05.003864') end timestamp('2019-01-25 07:17:05.003895')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 09:34:05.306718') end timestamp('2019-01-25 15:06:05.306723')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('ids'), middlebox('firewall') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 03:42:05.306683') end timestamp('2019-01-25 08:02:05.306712')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow service('vimeo'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:33:05.653956') end timestamp('2019-01-25 14:15:05.653960')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') unset bandwidth('max', '80', 'mbps') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 05:49:05.653934') end timestamp('2019-01-25 13:22:05.653950')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 04:31:06.132156') end timestamp('2019-01-25 14:42:06.132160')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 05:19:06.132134') end timestamp('2019-01-25 14:32:06.132150')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('streaming'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') allow service('stremio'), protocol('icmp') start timestamp('2019-01-25 09:29:06.239755') end timestamp('2019-01-25 14:49:06.239759')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 02:56:06.239704') end timestamp('2019-01-25 08:50:06.239733')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') block protocol('https'), service('instagram') start timestamp('2019-01-25 09:34:06.400303') end timestamp('2019-01-25 14:32:06.400307')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 02:21:06.400282') end timestamp('2019-01-25 08:40:06.400297')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block protocol('quic'), service('instagram') start timestamp('2019-01-25 05:16:06.687456') end timestamp('2019-01-25 13:37:06.687460')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset quota('5', 'gb/wk') allow protocol('quic'), protocol('smtp') start timestamp('2019-01-25 04:58:06.687437') end timestamp('2019-01-25 15:10:06.687451')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 09:30:06.687552') end timestamp('2019-01-25 13:29:06.687570')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 03:23:06.687541') end timestamp('2019-01-25 08:20:06.687547')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow protocol('icmp'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('vimeo'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block traffic('peer2peer'), protocol('icmp') start timestamp('2019-01-25 08:28:08.311197') end timestamp('2019-01-25 14:23:08.311201')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('parental-control'), middlebox('load-balancer') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 03:17:08.311175') end timestamp('2019-01-25 07:18:08.311191')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 09:45:08.568214') end timestamp('2019-01-25 15:01:08.568218')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi') allow service('bittorrent'), protocol('ftp') start timestamp('2019-01-25 03:16:08.568193') end timestamp('2019-01-25 08:55:08.568208')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('https'), service('popcorn-time') start timestamp('2019-01-25 05:24:08.824215') end timestamp('2019-01-25 13:27:08.824219')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('smtp'), protocol('icmp') start timestamp('2019-01-25 06:09:08.824192') end timestamp('2019-01-25 15:01:08.824209')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('2', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 04:32:09.217475') end timestamp('2019-01-25 14:18:09.217479')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') start timestamp('2019-01-25 04:40:09.217446') end timestamp('2019-01-25 13:35:09.217468')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow protocol('quic'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') block protocol('https'), service('youtube') start timestamp('2019-01-25 09:33:09.942505') end timestamp('2019-01-25 13:42:09.942509')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 03:48:09.942484') end timestamp('2019-01-25 09:03:09.942499')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('https'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') unset bandwidth('max', '70', 'mbps') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('ids'), middlebox('parental-control') allow traffic('peer2peer'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('load-balancer'), middlebox('dpi') unset quota('5', 'gb/wk') start timestamp('2019-01-25 04:19:11.121660') end timestamp('2019-01-25 13:38:11.121664')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset quota('3', 'gb/wk') start timestamp('2019-01-25 05:16:11.121639') end timestamp('2019-01-25 13:23:11.121655')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') unset bandwidth('min', '20', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') block protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 08:53:11.274281') end timestamp('2019-01-25 13:32:11.274285')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('firewall') allow service('popcorn-time') start timestamp('2019-01-25 02:14:11.274256') end timestamp('2019-01-25 08:02:11.274275')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('7', 'gb/wk') block service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('load-balancer') unset quota('7', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('ftp') start timestamp('2019-01-25 09:23:13.045530') end timestamp('2019-01-25 14:15:13.045534')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), protocol('ftp') start timestamp('2019-01-25 02:25:13.045504') end timestamp('2019-01-25 08:30:13.045523')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') set quota('7', 'gb/wk') allow protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '20', 'mbps') block service('stremio'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('vimeo'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block protocol('icmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('5', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow protocol('sftp'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('tcp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('tcp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 04:57:14.059463') end timestamp('2019-01-25 14:14:14.059467')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 05:07:14.059437') end timestamp('2019-01-25 14:27:14.059457')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 08:11:14.073789') end timestamp('2019-01-25 14:56:14.073793')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') unset quota('9', 'gb/wk') allow service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 02:38:14.073766') end timestamp('2019-01-25 07:34:14.073783')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '60', 'mbps') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 09:20:14.146678') end timestamp('2019-01-25 14:18:14.146697')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow protocol('http') start timestamp('2019-01-25 03:42:14.146666') end timestamp('2019-01-25 08:45:14.146672')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('1', 'gb/wk') start timestamp('2019-01-25 04:21:14.284829') end timestamp('2019-01-25 14:16:14.284833')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 04:40:14.284806') end timestamp('2019-01-25 13:12:14.284823')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow protocol('snmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset quota('8', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '90', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('popcorn-time'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 10:00:15.348993') end timestamp('2019-01-25 15:08:15.348998')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 02:48:15.348967') end timestamp('2019-01-25 07:53:15.348986')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi'), middlebox('parental-control') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '40', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 08:48:16.549106') end timestamp('2019-01-25 14:31:16.549110')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 03:13:16.549082') end timestamp('2019-01-25 08:30:16.549100')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('http'), traffic('social-media') start timestamp('2019-01-25 09:35:16.777019') end timestamp('2019-01-25 14:26:16.777023')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('ids'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') allow service('stremio'), service('facebook') start timestamp('2019-01-25 03:44:16.776997') end timestamp('2019-01-25 08:05:16.777013')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') block traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer') allow protocol('http'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') set bandwidth('min', '30', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('2', 'gb/wk') block protocol('http'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 09:25:17.978701') end timestamp('2019-01-25 15:03:17.978705')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') block protocol('quic'), protocol('snmp') start timestamp('2019-01-25 03:31:17.978652') end timestamp('2019-01-25 08:28:17.978681')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') start timestamp('2019-01-25 09:38:18.078872') end timestamp('2019-01-25 13:48:18.078876')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 02:21:18.078850') end timestamp('2019-01-25 09:10:18.078866')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('smtp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('tcp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('smtp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('udp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 09:59:19.344052') end timestamp('2019-01-25 13:59:19.344056')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:45:19.344025') end timestamp('2019-01-25 08:07:19.344045')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set quota('8', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer'), middlebox('dpi') block service('stremio'), service('facebook') start timestamp('2019-01-25 08:43:19.584115') end timestamp('2019-01-25 15:04:19.584119')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('ids') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 02:30:19.584090') end timestamp('2019-01-25 08:10:19.584109')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('firewall') set bandwidth('max', '70', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer') set quota('4', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('icmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow protocol('smtp'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 04:58:20.679217') end timestamp('2019-01-25 13:47:20.679223')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') start timestamp('2019-01-25 04:28:20.679173') end timestamp('2019-01-25 13:18:20.679194')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 08:34:20.679400') end timestamp('2019-01-25 13:35:20.679407')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') start timestamp('2019-01-25 02:56:20.679366') end timestamp('2019-01-25 07:45:20.679377')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('udp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('7', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('tcp'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 09:06:22.152348') end timestamp('2019-01-25 14:14:22.152352')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('ids') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 03:05:22.152326') end timestamp('2019-01-25 07:30:22.152342')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow protocol('https'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') allow service('amazon-prime'), service('youtube') start timestamp('2019-01-25 09:54:22.342600') end timestamp('2019-01-25 14:18:22.342605')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') block protocol('sftp'), service('instagram') start timestamp('2019-01-25 02:49:22.342552') end timestamp('2019-01-25 08:09:22.342593')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('parental-control'), middlebox('load-balancer') allow protocol('quic'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('3', 'gb/wk') allow protocol('smtp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('8', 'gb/wk') block service('stremio'), service('instagram') start timestamp('2019-01-25 05:57:23.691208') end timestamp('2019-01-25 14:30:23.691211')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('dpi') unset bandwidth('min', '80', 'mbps') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 05:14:23.691187') end timestamp('2019-01-25 14:44:23.691202')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 08:34:24.122241') end timestamp('2019-01-25 14:19:24.122246')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:22:24.122205') end timestamp('2019-01-25 07:22:24.122220')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set quota('9', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('load-balancer') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow protocol('snmp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set quota('1', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow protocol('quic'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block protocol('telnet'), service('netflix') start timestamp('2019-01-25 05:39:26.930304') end timestamp('2019-01-25 13:16:26.930308')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') add middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 06:05:26.930282') end timestamp('2019-01-25 13:43:26.930299')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('9', 'gb/wk') start timestamp('2019-01-25 08:47:27.296160') end timestamp('2019-01-25 14:29:27.296164')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') start timestamp('2019-01-25 02:30:27.296152') end timestamp('2019-01-25 07:36:27.296156')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 09:13:27.355303') end timestamp('2019-01-25 13:36:27.355320')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:38:27.355262') end timestamp('2019-01-25 08:46:27.355296')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block traffic('social-media'), service('netflix') start timestamp('2019-01-25 09:38:27.516968') end timestamp('2019-01-25 13:20:27.516972')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('dpi') allow service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 03:30:27.516946') end timestamp('2019-01-25 08:25:27.516962')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset quota('9', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '40', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 04:48:27.968478') end timestamp('2019-01-25 14:58:27.968482')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') unset quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 05:51:27.968453') end timestamp('2019-01-25 15:07:27.968472')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') unset quota('5', 'gb/wk') block protocol('sftp'), protocol('https') start timestamp('2019-01-25 06:03:28.441713') end timestamp('2019-01-25 13:14:28.441720')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 04:58:28.441675') end timestamp('2019-01-25 13:52:28.441704')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('parental-control') allow protocol('tcp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('sftp'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('6', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') allow protocol('icmp'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') unset bandwidth('min', '90', 'mbps') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 09:05:29.357560') end timestamp('2019-01-25 13:18:29.357564')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 03:25:29.357538') end timestamp('2019-01-25 08:12:29.357554')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 08:25:29.857885') end timestamp('2019-01-25 13:20:29.857889')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('firewall') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 03:59:29.857862') end timestamp('2019-01-25 07:41:29.857879')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') unset quota('7', 'gb/wk') start timestamp('2019-01-25 05:34:30.469946') end timestamp('2019-01-25 13:25:30.469950')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') start timestamp('2019-01-25 05:15:30.469919') end timestamp('2019-01-25 13:29:30.469940')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('8', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '50', 'mbps') block protocol('https'), service('youtube') start timestamp('2019-01-25 05:51:30.834889') end timestamp('2019-01-25 14:41:30.834893')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 04:36:30.834867') end timestamp('2019-01-25 13:12:30.834884')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 04:21:31.428396') end timestamp('2019-01-25 13:46:31.428400')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('sftp'), service('instagram') start timestamp('2019-01-25 04:46:31.428375') end timestamp('2019-01-25 14:40:31.428391')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 09:59:31.454976') end timestamp('2019-01-25 14:33:31.454980')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') unset quota('3', 'gb/wk') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 02:29:31.454959') end timestamp('2019-01-25 08:06:31.454970')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('2', 'gb/wk') start timestamp('2019-01-25 05:31:31.900283') end timestamp('2019-01-25 14:57:31.900287')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 06:02:31.900260') end timestamp('2019-01-25 14:48:31.900277')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block service('amazon-prime'), service('stremio') start timestamp('2019-01-25 10:02:32.157698') end timestamp('2019-01-25 13:13:32.157702')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi') allow service('stremio') start timestamp('2019-01-25 03:34:32.157677') end timestamp('2019-01-25 08:06:32.157692')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') block service('vimeo'), service('youtube') start timestamp('2019-01-25 09:44:32.279259') end timestamp('2019-01-25 14:31:32.279263')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow service('stremio'), service('youtube') start timestamp('2019-01-25 03:58:32.279238') end timestamp('2019-01-25 08:05:32.279254')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('telnet'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') start timestamp('2019-01-25 08:57:32.986544') end timestamp('2019-01-25 14:54:32.986547')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 02:41:32.986522') end timestamp('2019-01-25 08:41:32.986525')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow service('stremio'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block protocol('ftp'), traffic('streaming') start timestamp('2019-01-25 08:59:33.234457') end timestamp('2019-01-25 14:13:33.234461')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('dpi'), middlebox('ids') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 02:53:33.234430') end timestamp('2019-01-25 08:52:33.234451')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '60', 'mbps') allow traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 05:11:33.554678') end timestamp('2019-01-25 13:13:33.554682')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 05:02:33.554657') end timestamp('2019-01-25 14:34:33.554673')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 08:30:34.010372') end timestamp('2019-01-25 14:49:34.010375')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 03:05:34.010350') end timestamp('2019-01-25 07:42:34.010366')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('quic'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('quic'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 09:17:35.791122') end timestamp('2019-01-25 14:00:35.791126')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('5', 'gb/wk') allow protocol('telnet'), service('instagram') start timestamp('2019-01-25 03:11:35.791098') end timestamp('2019-01-25 09:02:35.791115')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('sftp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('quic'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '30', 'mbps') block service('stremio'), service('instagram') start timestamp('2019-01-25 09:50:37.296673') end timestamp('2019-01-25 14:12:37.296677')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block service('netflix'), service('popcorn-time') start timestamp('2019-01-25 03:45:37.296650') end timestamp('2019-01-25 09:00:37.296666')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set quota('2', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 06:01:37.485736') end timestamp('2019-01-25 13:30:37.485740')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') unset quota('4', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 05:29:37.485713') end timestamp('2019-01-25 13:15:37.485730')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') start timestamp('2019-01-25 08:46:37.485837') end timestamp('2019-01-25 14:10:37.485840')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 02:16:37.485825') end timestamp('2019-01-25 08:23:37.485831')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow service('youtube'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 05:26:38.017248') end timestamp('2019-01-25 14:45:38.017252')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow service('vimeo'), protocol('smtp') start timestamp('2019-01-25 05:10:38.017224') end timestamp('2019-01-25 14:14:38.017242')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 04:50:38.302569') end timestamp('2019-01-25 14:50:38.302573')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset quota('7', 'gb/wk') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 04:58:38.302547') end timestamp('2019-01-25 14:10:38.302564')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk') block service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('8', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') add middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('facebook'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('6', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('icmp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('ids') set quota('8', 'gb/wk') block protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('sftp'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow protocol('icmp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '90', 'mbps') allow service('facebook') start timestamp('2019-01-25 04:57:39.122726') end timestamp('2019-01-25 14:54:39.122730')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:07:39.122696') end timestamp('2019-01-25 14:56:39.122720')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 05:34:40.200948') end timestamp('2019-01-25 14:48:40.200952')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:26:40.200925') end timestamp('2019-01-25 14:22:40.200942')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('dpi') set quota('4', 'gb/wk') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall') set bandwidth('min', '50', 'mbps') allow service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('dpi') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('bittorrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('snmp'), traffic('social-media') start timestamp('2019-01-25 04:54:41.131072') end timestamp('2019-01-25 13:20:41.131076')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi') set quota('7', 'gb/wk') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 06:03:41.131052') end timestamp('2019-01-25 13:15:41.131067')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 04:22:41.456254') end timestamp('2019-01-25 14:57:41.456258')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:45:41.456233') end timestamp('2019-01-25 14:43:41.456249')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('1', 'gb/wk') block protocol('snmp'), service('instagram') start timestamp('2019-01-25 08:43:41.706226') end timestamp('2019-01-25 14:00:41.706230')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('instagram'), service('netflix') start timestamp('2019-01-25 02:14:41.706205') end timestamp('2019-01-25 08:20:41.706220')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('load-balancer') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 08:59:41.733892') end timestamp('2019-01-25 13:53:41.733896')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 02:57:41.733871') end timestamp('2019-01-25 07:22:41.733886')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') block traffic('social-media'), protocol('udp') start timestamp('2019-01-25 09:14:41.847859') end timestamp('2019-01-25 14:14:41.847882')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 03:58:41.847851') end timestamp('2019-01-25 08:35:41.847855')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 08:43:41.950477') end timestamp('2019-01-25 13:25:41.950481')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 02:31:41.950469') end timestamp('2019-01-25 07:19:41.950473')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 04:17:41.977529') end timestamp('2019-01-25 13:27:41.977533')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 05:41:41.977510') end timestamp('2019-01-25 14:37:41.977523')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') start timestamp('2019-01-25 09:17:41.977636') end timestamp('2019-01-25 14:20:41.977640')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') start timestamp('2019-01-25 02:41:41.977625') end timestamp('2019-01-25 09:04:41.977631')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('stremio'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 09:15:42.169711') end timestamp('2019-01-25 14:23:42.169728')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 03:41:42.169661') end timestamp('2019-01-25 08:29:42.169690')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') unset bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 04:18:42.269839') end timestamp('2019-01-25 14:50:42.269843')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 04:38:42.269816') end timestamp('2019-01-25 15:04:42.269833')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow protocol('quic'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('8', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') add middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('instagram'), service('popcorn-time') start timestamp('2019-01-25 05:33:43.263969') end timestamp('2019-01-25 14:40:43.263973')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('5', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 05:18:43.263948') end timestamp('2019-01-25 14:31:43.263964')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('tcp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('load-balancer'), middlebox('dpi') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') add middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 08:16:43.819759') end timestamp('2019-01-25 13:55:43.819766')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 02:46:43.819700') end timestamp('2019-01-25 07:25:43.819750')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('sftp'), service('facebook') start timestamp('2019-01-25 09:21:43.857534') end timestamp('2019-01-25 14:03:43.857538')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('ftp') start timestamp('2019-01-25 03:26:43.857526') end timestamp('2019-01-25 07:41:43.857530')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('ids') set quota('2', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 04:58:44.908726') end timestamp('2019-01-25 14:39:44.908730')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 05:35:44.908703') end timestamp('2019-01-25 15:09:44.908720')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 09:08:44.977294') end timestamp('2019-01-25 14:06:44.977298')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '10', 'mbps') allow traffic('streaming') start timestamp('2019-01-25 03:50:44.977274') end timestamp('2019-01-25 08:04:44.977289')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block service('stremio'), service('instagram') start timestamp('2019-01-25 09:54:45.734564') end timestamp('2019-01-25 14:02:45.734568')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow protocol('https'), service('instagram') start timestamp('2019-01-25 04:09:45.734542') end timestamp('2019-01-25 08:21:45.734558')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '10', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('https'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 08:39:46.392874') end timestamp('2019-01-25 14:34:46.392879')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), service('facebook') start timestamp('2019-01-25 03:09:46.392824') end timestamp('2019-01-25 07:31:46.392868')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set bandwidth('max', '70', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('tcp'), protocol('udp') start timestamp('2019-01-25 08:50:47.455012') end timestamp('2019-01-25 15:07:47.455016')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 02:27:47.454991') end timestamp('2019-01-25 07:32:47.455006')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 06:04:49.729534') end timestamp('2019-01-25 14:17:49.729538')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 05:53:49.729509') end timestamp('2019-01-25 13:49:49.729528')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('dpi') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') allow protocol('icmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('stremio'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 08:43:50.166961') end timestamp('2019-01-25 13:20:50.166965')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('facebook'), service('youtube') start timestamp('2019-01-25 03:55:50.166937') end timestamp('2019-01-25 07:50:50.166955')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set quota('1', 'gb/wk') allow service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '80', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('udp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('firewall') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 09:00:51.658110') end timestamp('2019-01-25 13:20:51.658115')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') start timestamp('2019-01-25 03:15:51.658082') end timestamp('2019-01-25 07:23:51.658104')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') set quota('2', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block service('stremio'), service('youtube') start timestamp('2019-01-25 08:59:52.389361') end timestamp('2019-01-25 14:56:52.389365')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi') allow service('youtube'), traffic('streaming') start timestamp('2019-01-25 04:02:52.389337') end timestamp('2019-01-25 08:36:52.389355')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:54:53.424591') end timestamp('2019-01-25 13:54:53.424595')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') start timestamp('2019-01-25 05:34:53.424560') end timestamp('2019-01-25 13:12:53.424584')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 09:36:53.499416') end timestamp('2019-01-25 14:15:53.499420')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 02:56:53.499391') end timestamp('2019-01-25 08:51:53.499410')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('vimeo'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow service('netflix'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('max', '80', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') start timestamp('2019-01-25 04:16:55.211342') end timestamp('2019-01-25 13:21:55.211346')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('2', 'gb/wk') start timestamp('2019-01-25 04:37:55.211319') end timestamp('2019-01-25 13:38:55.211335')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('quic'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('parental-control') allow traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block protocol('tcp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '10', 'mbps') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 05:27:55.459784') end timestamp('2019-01-25 14:35:55.459788')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 05:01:55.459760') end timestamp('2019-01-25 13:41:55.459778')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('http'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block service('youtube'), protocol('ftp') start timestamp('2019-01-25 09:45:55.603726') end timestamp('2019-01-25 13:35:55.603730')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow protocol('sftp'), protocol('ftp') start timestamp('2019-01-25 02:56:55.603704') end timestamp('2019-01-25 08:41:55.603720')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('parental-control') allow service('netflix'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 08:35:55.648421') end timestamp('2019-01-25 13:58:55.648440')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 02:59:55.648375') end timestamp('2019-01-25 07:12:55.648397')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('amazon-prime')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('5', 'gb/wk') block service('instagram'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '10', 'mbps') allow protocol('telnet'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow protocol('tcp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 09:46:56.025934') end timestamp('2019-01-25 14:44:56.025938')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('stremio'), service('facebook') start timestamp('2019-01-25 03:16:56.025913') end timestamp('2019-01-25 08:07:56.025928')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('dpi') allow protocol('snmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('https'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block service('instagram'), service('netflix') start timestamp('2019-01-25 09:52:56.143841') end timestamp('2019-01-25 14:16:56.143845')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 03:23:56.143818') end timestamp('2019-01-25 09:03:56.143835')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 04:39:56.192951') end timestamp('2019-01-25 13:38:56.192954')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi') set bandwidth('max', '30', 'mbps') block protocol('sftp'), service('facebook') start timestamp('2019-01-25 05:58:56.192928') end timestamp('2019-01-25 13:18:56.192945')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('amazon-prime'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') unset quota('8', 'gb/wk') allow protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 06:01:56.319147') end timestamp('2019-01-25 14:26:56.319153')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('bittorrent') start timestamp('2019-01-25 05:42:56.319117') end timestamp('2019-01-25 15:07:56.319139')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('telnet'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block protocol('icmp'), service('youtube') start timestamp('2019-01-25 09:02:57.080432') end timestamp('2019-01-25 14:54:57.080436')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow protocol('tcp'), service('facebook') start timestamp('2019-01-25 03:55:57.080411') end timestamp('2019-01-25 08:50:57.080426')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 04:38:57.215979') end timestamp('2019-01-25 13:29:57.215984')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:11:57.215957') end timestamp('2019-01-25 13:58:57.215974')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 09:28:57.216170') end timestamp('2019-01-25 13:23:57.216174')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 03:36:57.216130') end timestamp('2019-01-25 08:04:57.216152')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') unset bandwidth('max', '80', 'mbps') block protocol('smtp'), traffic('social-media') start timestamp('2019-01-25 05:50:57.380065') end timestamp('2019-01-25 14:07:57.380069')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('quic'), service('bittorrent') start timestamp('2019-01-25 04:23:57.380043') end timestamp('2019-01-25 14:58:57.380059')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '60', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('telnet'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('8', 'gb/wk') block service('vimeo'), protocol('sftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer') set quota('6', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block protocol('quic'), protocol('ftp') start timestamp('2019-01-25 08:55:58.011195') end timestamp('2019-01-25 14:58:58.011199')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('ids') allow protocol('quic'), service('netflix') start timestamp('2019-01-25 02:21:58.011173') end timestamp('2019-01-25 07:21:58.011189')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('telnet') start timestamp('2019-01-25 04:12:58.094765') end timestamp('2019-01-25 13:44:58.094769')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 04:15:58.094741') end timestamp('2019-01-25 14:33:58.094759')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('facebook'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer') block service('stremio') start timestamp('2019-01-25 08:26:58.770105') end timestamp('2019-01-25 14:57:58.770109')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('vimeo'), protocol('http') start timestamp('2019-01-25 03:49:58.770084') end timestamp('2019-01-25 07:35:58.770099')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('https'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set quota('2', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('snmp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('http'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') set quota('8', 'gb/wk') allow service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') add middlebox('firewall') set quota('4', 'gb/wk') block protocol('smtp'), service('netflix') start timestamp('2019-01-25 09:31:59.499506') end timestamp('2019-01-25 15:01:59.499510')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 03:39:59.499483') end timestamp('2019-01-25 07:50:59.499500')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 10:08:00.026840') end timestamp('2019-01-25 13:56:00.026844')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('firewall') start timestamp('2019-01-25 03:19:00.026817') end timestamp('2019-01-25 07:29:00.026833')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow protocol('ftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('amazon-prime'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi') set quota('4', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') add middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('7', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('load-balancer'), middlebox('firewall') block protocol('quic'), protocol('icmp') start timestamp('2019-01-25 08:25:00.327603') end timestamp('2019-01-25 14:23:00.327607')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 03:51:00.327576') end timestamp('2019-01-25 08:03:00.327596')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 09:23:00.563851') end timestamp('2019-01-25 14:48:00.563856')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('parental-control') start timestamp('2019-01-25 02:43:00.563809') end timestamp('2019-01-25 08:19:00.563845')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('https'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids') set quota('5', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '50', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 08:59:01.795970') end timestamp('2019-01-25 14:59:01.795974')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') unset quota('1', 'gb/wk') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 02:17:01.795947') end timestamp('2019-01-25 07:37:01.795964')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('http'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 09:28:02.042432') end timestamp('2019-01-25 14:34:02.042436')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 02:46:02.042411') end timestamp('2019-01-25 08:49:02.042426')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('snmp') start timestamp('2019-01-25 05:19:02.305977') end timestamp('2019-01-25 14:39:02.305981')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 05:03:02.305954') end timestamp('2019-01-25 15:04:02.305971')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('telnet'), protocol('http') start timestamp('2019-01-25 04:42:03.057277') end timestamp('2019-01-25 13:32:03.057281')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('facebook'), service('popcorn-time') start timestamp('2019-01-25 04:33:03.057252') end timestamp('2019-01-25 14:15:03.057271')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') add middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 09:22:03.472898') end timestamp('2019-01-25 15:09:03.472902')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), service('youtube') start timestamp('2019-01-25 02:14:03.472876') end timestamp('2019-01-25 08:40:03.472892')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('telnet'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer') set quota('2', 'gb/wk') allow service('popcorn-time'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('firewall') allow service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('parental-control') allow service('vimeo'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') set quota('7', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 10:07:04.113497') end timestamp('2019-01-25 13:37:04.113501')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 03:37:04.113473') end timestamp('2019-01-25 08:07:04.113490')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 09:18:04.113579') end timestamp('2019-01-25 13:55:04.113583')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 04:06:04.113568') end timestamp('2019-01-25 08:31:04.113574')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi') set quota('6', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 09:52:05.302903') end timestamp('2019-01-25 14:53:05.302907')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') allow protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 03:16:05.302880') end timestamp('2019-01-25 08:13:05.302897')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi') set quota('2', 'gb/wk') allow protocol('ftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('parental-control') set quota('2', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('quic'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('load-balancer') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '20', 'mbps') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 05:05:08.222156') end timestamp('2019-01-25 13:55:08.222160')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '10', 'mbps') block protocol('telnet'), traffic('social-media') start timestamp('2019-01-25 05:52:08.222132') end timestamp('2019-01-25 14:36:08.222150')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 05:44:08.248694') end timestamp('2019-01-25 13:39:08.248698')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 04:23:08.248675') end timestamp('2019-01-25 13:52:08.248689')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('tcp'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi') block service('vimeo'), service('instagram') start timestamp('2019-01-25 10:03:10.366524') end timestamp('2019-01-25 14:35:10.366528')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 03:05:10.366501') end timestamp('2019-01-25 08:50:10.366518')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow service('youtube') start timestamp('2019-01-25 04:37:11.395744') end timestamp('2019-01-25 15:11:11.395748')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('smtp'), protocol('snmp') start timestamp('2019-01-25 05:59:11.395719') end timestamp('2019-01-25 14:18:11.395739')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') block traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') unset quota('9', 'gb/wk') allow protocol('quic'), service('stremio') start timestamp('2019-01-25 09:52:11.427770') end timestamp('2019-01-25 14:13:11.427774')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('5', 'gb/wk') allow protocol('tcp'), protocol('udp') start timestamp('2019-01-25 03:17:11.427741') end timestamp('2019-01-25 07:32:11.427763')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('min', '90', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') set bandwidth('min', '10', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '50', 'mbps') allow service('youtube'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('7', 'gb/wk') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 04:57:12.416999') end timestamp('2019-01-25 13:24:12.417003')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 05:17:12.416979') end timestamp('2019-01-25 14:00:12.416994')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids'), middlebox('firewall') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set quota('9', 'gb/wk') allow service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow protocol('smtp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('5', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 09:10:12.594017') end timestamp('2019-01-25 14:29:12.594022')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 03:09:12.593991') end timestamp('2019-01-25 08:09:12.594010')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') start timestamp('2019-01-25 09:21:12.930447') end timestamp('2019-01-25 13:12:12.930451')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') start timestamp('2019-01-25 03:55:12.930426') end timestamp('2019-01-25 07:31:12.930441')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') unset quota('1', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('vimeo'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('http'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 09:47:14.620061') end timestamp('2019-01-25 13:35:14.620065')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 03:14:14.620037') end timestamp('2019-01-25 09:02:14.620055')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('quic'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 08:27:15.854167') end timestamp('2019-01-25 15:04:15.854171')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 02:13:15.854146') end timestamp('2019-01-25 08:01:15.854161')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 09:09:16.506501') end timestamp('2019-01-25 13:40:16.506505')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 03:53:16.506475') end timestamp('2019-01-25 08:56:16.506494')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('https'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block service('vimeo'), protocol('snmp') start timestamp('2019-01-25 09:54:16.760431') end timestamp('2019-01-25 14:15:16.760435')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 02:12:16.760395') end timestamp('2019-01-25 07:57:16.760411')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('amazon-prime'), protocol('tcp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') set quota('1', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 04:16:17.395765') end timestamp('2019-01-25 13:29:17.395769')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 05:43:17.395732') end timestamp('2019-01-25 14:44:17.395758')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block service('instagram'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 09:05:18.787668') end timestamp('2019-01-25 13:45:18.787672')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 03:17:18.787644') end timestamp('2019-01-25 08:56:18.787661')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 05:34:19.045605') end timestamp('2019-01-25 14:51:19.045609')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 04:46:19.045564') end timestamp('2019-01-25 13:45:19.045598')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 09:09:19.081826') end timestamp('2019-01-25 14:23:19.081831')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 03:18:19.081813') end timestamp('2019-01-25 07:37:19.081819')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set quota('2', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') unset quota('1', 'gb/wk') start timestamp('2019-01-25 08:57:19.280691') end timestamp('2019-01-25 14:51:19.280695')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset quota('8', 'gb/wk') start timestamp('2019-01-25 02:14:19.280664') end timestamp('2019-01-25 07:38:19.280684')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('ids') block service('amazon-prime'), protocol('tcp') start timestamp('2019-01-25 09:00:19.617302') end timestamp('2019-01-25 14:23:19.617306')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('parental-control') allow service('instagram'), protocol('icmp') start timestamp('2019-01-25 03:12:19.617295') end timestamp('2019-01-25 08:20:19.617299')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') block traffic('torrent') start timestamp('2019-01-25 08:58:19.617416') end timestamp('2019-01-25 14:11:19.617420')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 03:47:19.617409') end timestamp('2019-01-25 08:53:19.617413')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('http'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block protocol('telnet') start timestamp('2019-01-25 09:22:20.157859') end timestamp('2019-01-25 15:00:20.157864')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 02:44:20.157823') end timestamp('2019-01-25 08:59:20.157853')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('http'), traffic('streaming') start timestamp('2019-01-25 04:34:20.184669') end timestamp('2019-01-25 13:40:20.184673')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 04:41:20.184649') end timestamp('2019-01-25 13:45:20.184664')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block traffic('streaming') start timestamp('2019-01-25 08:47:20.248019') end timestamp('2019-01-25 13:37:20.248023')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi') allow service('vimeo'), protocol('smtp') start timestamp('2019-01-25 03:23:20.247996') end timestamp('2019-01-25 07:40:20.248012')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set quota('6', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), protocol('https') start timestamp('2019-01-25 10:02:20.417976') end timestamp('2019-01-25 14:48:20.417980')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 03:08:20.417956') end timestamp('2019-01-25 08:11:20.417970')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('min', '20', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset quota('9', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi') set quota('2', 'gb/wk') allow protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('parental-control') set quota('4', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set bandwidth('min', '30', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps') allow protocol('http'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block protocol('https'), protocol('smtp') start timestamp('2019-01-25 08:23:20.764464') end timestamp('2019-01-25 14:20:20.764468')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 03:13:20.764443') end timestamp('2019-01-25 07:44:20.764458')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') start timestamp('2019-01-25 08:12:20.847179') end timestamp('2019-01-25 14:48:20.847183')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 02:40:20.847142') end timestamp('2019-01-25 07:14:20.847158')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow protocol('http'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset quota('9', 'gb/wk') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 05:44:21.192819') end timestamp('2019-01-25 14:22:21.192822')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:27:21.192793') end timestamp('2019-01-25 13:48:21.192813')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('bittorrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('4', 'gb/wk') block protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 05:50:21.609270') end timestamp('2019-01-25 14:45:21.609274')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids') unset bandwidth('max', '90', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 05:10:21.609244') end timestamp('2019-01-25 15:01:21.609264')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 09:47:22.166551') end timestamp('2019-01-25 14:35:22.166555')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control') allow protocol('smtp'), service('instagram') start timestamp('2019-01-25 02:42:22.166523') end timestamp('2019-01-25 09:11:22.166545')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 09:18:22.586942') end timestamp('2019-01-25 14:19:22.586959')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 02:36:22.586895') end timestamp('2019-01-25 07:35:22.586919')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 08:22:22.633029') end timestamp('2019-01-25 13:32:22.633033')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') add middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), protocol('snmp') start timestamp('2019-01-25 03:33:22.633021') end timestamp('2019-01-25 07:15:22.633025')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '90', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('dpi') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') set bandwidth('min', '80', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 08:50:23.961789') end timestamp('2019-01-25 14:10:23.961796')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 03:29:23.961751') end timestamp('2019-01-25 07:28:23.961778')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') set quota('5', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 09:22:24.365427') end timestamp('2019-01-25 14:49:24.365431')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 03:04:24.365419') end timestamp('2019-01-25 07:13:24.365423')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('ftp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 04:45:25.055345') end timestamp('2019-01-25 13:49:25.055350')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:33:25.055314') end timestamp('2019-01-25 13:28:25.055339')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 09:17:25.055557') end timestamp('2019-01-25 14:27:25.055574')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow service('instagram'), service('facebook') start timestamp('2019-01-25 03:20:25.055528') end timestamp('2019-01-25 08:03:25.055551')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '10', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('netflix'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') unset quota('3', 'gb/wk') start timestamp('2019-01-25 04:54:25.295566') end timestamp('2019-01-25 13:54:25.295571')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 05:56:25.295536') end timestamp('2019-01-25 14:16:25.295560')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block service('amazon-prime') start timestamp('2019-01-25 09:36:25.676523') end timestamp('2019-01-25 13:42:25.676527')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('3', 'gb/wk') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 02:37:25.676501') end timestamp('2019-01-25 08:51:25.676517')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') unset bandwidth('max', '30', 'mbps') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 05:54:25.706057') end timestamp('2019-01-25 14:48:25.706062')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 05:40:25.706026') end timestamp('2019-01-25 14:29:25.706051')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset quota('3', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('5', 'gb/wk') allow traffic('peer2peer'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 09:33:26.148444') end timestamp('2019-01-25 14:11:26.148463')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block service('vimeo') start timestamp('2019-01-25 03:22:26.148407') end timestamp('2019-01-25 09:00:26.148437')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('firewall') set bandwidth('min', '10', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('https'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 09:33:26.940030') end timestamp('2019-01-25 14:50:26.940034')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') unset quota('5', 'gb/wk') start timestamp('2019-01-25 02:15:26.940007') end timestamp('2019-01-25 08:09:26.940023')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('sftp'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('parental-control') allow service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 08:41:27.937495') end timestamp('2019-01-25 13:37:27.937499')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 03:48:27.937473') end timestamp('2019-01-25 08:03:27.937489')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 09:43:27.966121') end timestamp('2019-01-25 14:23:27.966125')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 03:25:27.966113') end timestamp('2019-01-25 07:16:27.966117')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('quic'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('parental-control') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('firewall') block traffic('torrent'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow protocol('http'), service('youtube') start timestamp('2019-01-25 09:18:28.635079') end timestamp('2019-01-25 14:58:28.635082')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 02:48:28.635072') end timestamp('2019-01-25 08:51:28.635075')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('tcp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids') set bandwidth('min', '40', 'mbps') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('quic'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') unset quota('8', 'gb/wk') start timestamp('2019-01-25 09:45:29.507167') end timestamp('2019-01-25 14:17:29.507171')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') start timestamp('2019-01-25 04:07:29.507144') end timestamp('2019-01-25 09:08:29.507161')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block service('stremio'), protocol('udp') start timestamp('2019-01-25 05:52:29.943701') end timestamp('2019-01-25 15:01:29.943705')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') allow protocol('https'), service('youtube') start timestamp('2019-01-25 05:07:29.943676') end timestamp('2019-01-25 13:42:29.943695')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('2', 'gb/wk') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 09:17:30.091223') end timestamp('2019-01-25 14:04:30.091227')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('parental-control') unset bandwidth('min', '80', 'mbps') allow protocol('https'), service('youtube') start timestamp('2019-01-25 03:16:30.091216') end timestamp('2019-01-25 08:23:30.091220')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set quota('7', 'gb/wk') allow traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set quota('2', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') start timestamp('2019-01-25 05:56:32.154666') end timestamp('2019-01-25 13:30:32.154670')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('1', 'gb/wk') start timestamp('2019-01-25 04:39:32.154639') end timestamp('2019-01-25 13:31:32.154659')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('8', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('6', 'gb/wk') allow service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('smtp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') add middlebox('dpi') set quota('4', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps') block service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('vimeo'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 05:32:34.659852') end timestamp('2019-01-25 13:54:34.659856')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 05:24:34.659830') end timestamp('2019-01-25 13:12:34.659847')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 04:55:34.726064') end timestamp('2019-01-25 14:32:34.726068')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 05:13:34.726038') end timestamp('2019-01-25 15:11:34.726058')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 05:21:34.900825') end timestamp('2019-01-25 14:08:34.900830')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('1', 'gb/wk') start timestamp('2019-01-25 04:40:34.900803') end timestamp('2019-01-25 14:23:34.900820')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('parental-control') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('parental-control') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 04:31:35.601051') end timestamp('2019-01-25 13:49:35.601056')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '30', 'mbps') block protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 05:04:35.601026') end timestamp('2019-01-25 14:49:35.601045')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('8', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') allow service('instagram') start timestamp('2019-01-25 08:40:36.515421') end timestamp('2019-01-25 13:58:36.515425')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 02:57:36.515395') end timestamp('2019-01-25 08:37:36.515414')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('telnet'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('amazon-prime')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset quota('5', 'gb/wk') start timestamp('2019-01-25 04:56:36.777204') end timestamp('2019-01-25 13:34:36.777208')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('1', 'gb/wk') start timestamp('2019-01-25 05:23:36.777174') end timestamp('2019-01-25 14:57:36.777197')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('sftp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('telnet'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('firewall') set quota('8', 'gb/wk') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 05:37:37.139833') end timestamp('2019-01-25 15:04:37.139836')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('dpi') set quota('1', 'gb/wk') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 05:48:37.139813') end timestamp('2019-01-25 15:10:37.139827')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('firewall') set quota('8', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('https'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall') set quota('5', 'gb/wk') allow protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi') set quota('6', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:40:38.194818') end timestamp('2019-01-25 13:30:38.194822')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 04:30:38.194791') end timestamp('2019-01-25 14:47:38.194811')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('3', 'gb/wk') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set quota('2', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('7', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow protocol('smtp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('smtp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('firewall') allow protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 09:22:40.816508') end timestamp('2019-01-25 13:40:40.816512')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 03:18:40.816482') end timestamp('2019-01-25 09:01:40.816501')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('https'), service('instagram') start timestamp('2019-01-25 04:33:40.929133') end timestamp('2019-01-25 15:03:40.929137')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('parental-control') unset bandwidth('min', '40', 'mbps') allow service('amazon-prime') start timestamp('2019-01-25 04:55:40.929103') end timestamp('2019-01-25 14:45:40.929127')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') unset bandwidth('max', '30', 'mbps') block protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 04:47:41.488598') end timestamp('2019-01-25 13:41:41.488602')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('tcp'), service('facebook') start timestamp('2019-01-25 04:32:41.488568') end timestamp('2019-01-25 14:54:41.488592')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block traffic('social-media'), service('facebook') start timestamp('2019-01-25 08:36:41.504866') end timestamp('2019-01-25 13:56:41.504873')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 04:08:41.504830') end timestamp('2019-01-25 08:11:41.504856')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control') set quota('7', 'gb/wk') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 09:53:41.765599') end timestamp('2019-01-25 14:13:41.765604')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 03:41:41.765561') end timestamp('2019-01-25 08:54:41.765579')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 08:13:41.794101') end timestamp('2019-01-25 13:33:41.794118')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block protocol('sftp'), protocol('icmp') start timestamp('2019-01-25 03:43:41.794064') end timestamp('2019-01-25 07:43:41.794095')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('9', 'gb/wk') block service('bittorrent'), protocol('ftp') start timestamp('2019-01-25 04:56:41.823925') end timestamp('2019-01-25 13:59:41.823930')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset quota('4', 'gb/wk') allow protocol('https'), service('bittorrent') start timestamp('2019-01-25 05:35:41.823900') end timestamp('2019-01-25 14:14:41.823919')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 06:05:42.848380') end timestamp('2019-01-25 14:34:42.848383')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') unset quota('5', 'gb/wk') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 04:11:42.848360') end timestamp('2019-01-25 13:39:42.848375')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') set quota('9', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 09:26:43.098040') end timestamp('2019-01-25 13:23:43.098058')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') allow protocol('tcp'), protocol('ftp') start timestamp('2019-01-25 03:53:43.098005') end timestamp('2019-01-25 08:17:43.098033')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('9', 'gb/wk') block service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow service('instagram'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi') unset bandwidth('max', '70', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block service('youtube'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('telnet'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 04:46:44.001274') end timestamp('2019-01-25 14:27:44.001279')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') unset quota('3', 'gb/wk') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 05:02:44.001230') end timestamp('2019-01-25 14:05:44.001267')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi') set quota('2', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset quota('8', 'gb/wk') block protocol('telnet'), protocol('icmp') start timestamp('2019-01-25 05:52:45.137801') end timestamp('2019-01-25 13:41:45.137805')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control') unset bandwidth('min', '50', 'mbps') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 06:07:45.137757') end timestamp('2019-01-25 14:24:45.137794')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 08:54:45.429807') end timestamp('2019-01-25 14:15:45.429810')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 02:23:45.429799') end timestamp('2019-01-25 07:30:45.429803')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') set quota('6', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('6', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 05:22:45.686840') end timestamp('2019-01-25 13:17:45.686844')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('dpi') unset bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:40:45.686814') end timestamp('2019-01-25 14:48:45.686834')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('tcp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 05:07:46.561559') end timestamp('2019-01-25 14:56:46.561564')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:50:46.561531') end timestamp('2019-01-25 14:39:46.561553')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('sftp'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 09:10:46.786641') end timestamp('2019-01-25 14:53:46.786644')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('dpi') allow service('facebook') start timestamp('2019-01-25 02:45:46.786633') end timestamp('2019-01-25 08:14:46.786637')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('min', '30', 'mbps') block service('vimeo')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block service('amazon-prime')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi') set quota('7', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('8', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') add middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('http'), service('facebook') start timestamp('2019-01-25 04:42:48.208663') end timestamp('2019-01-25 14:34:48.208667')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('https'), traffic('torrent') start timestamp('2019-01-25 04:28:48.208642') end timestamp('2019-01-25 14:01:48.208658')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('http'), protocol('ftp') start timestamp('2019-01-25 09:12:48.208798') end timestamp('2019-01-25 14:42:48.208802')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block service('amazon-prime'), protocol('tcp') start timestamp('2019-01-25 03:40:48.208786') end timestamp('2019-01-25 08:51:48.208793')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('parental-control'), middlebox('firewall') block protocol('https'), service('stremio') start timestamp('2019-01-25 09:14:48.514320') end timestamp('2019-01-25 13:49:48.514324')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 03:02:48.514295') end timestamp('2019-01-25 08:21:48.514314')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control') unset quota('5', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') unset quota('8', 'gb/wk') start timestamp('2019-01-25 04:13:48.738216') end timestamp('2019-01-25 14:21:48.738220')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 04:30:48.738191') end timestamp('2019-01-25 13:53:48.738210')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:54:49.461122') end timestamp('2019-01-25 14:15:49.461126')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('dpi') allow traffic('peer2peer') start timestamp('2019-01-25 03:24:49.461114') end timestamp('2019-01-25 08:25:49.461118')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('8', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') set quota('7', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('min', '10', 'mbps') block service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow protocol('https'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('6', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') unset quota('4', 'gb/wk') start timestamp('2019-01-25 04:17:51.489901') end timestamp('2019-01-25 13:42:51.489906')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('6', 'gb/wk') start timestamp('2019-01-25 05:25:51.489875') end timestamp('2019-01-25 13:58:51.489895')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('quic'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('youtube') start timestamp('2019-01-25 04:15:52.302010') end timestamp('2019-01-25 14:39:52.302014')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 04:17:52.301986') end timestamp('2019-01-25 15:10:52.302004')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('7', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('parental-control') set quota('1', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set quota('9', 'gb/wk') block service('instagram'), service('facebook') start timestamp('2019-01-25 05:04:52.926308') end timestamp('2019-01-25 14:51:52.926312')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('parental-control') set quota('7', 'gb/wk') allow service('instagram'), service('netflix') start timestamp('2019-01-25 05:51:52.926282') end timestamp('2019-01-25 13:29:52.926302')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') set quota('4', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 08:35:53.636624') end timestamp('2019-01-25 13:53:53.636628')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('dpi') set quota('1', 'gb/wk') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 03:13:53.636596') end timestamp('2019-01-25 07:54:53.636617')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('vimeo'), protocol('telnet') start timestamp('2019-01-25 10:07:53.668619') end timestamp('2019-01-25 15:01:53.668624')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('quic'), traffic('streaming') start timestamp('2019-01-25 02:51:53.668591') end timestamp('2019-01-25 08:25:53.668613')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 08:41:53.718284') end timestamp('2019-01-25 14:09:53.718291')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('4', 'gb/wk') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 03:38:53.718206') end timestamp('2019-01-25 07:36:53.718274')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 05:13:54.150108') end timestamp('2019-01-25 14:28:54.150112')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') start timestamp('2019-01-25 05:21:54.150082') end timestamp('2019-01-25 14:52:54.150101')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('3', 'gb/wk') block protocol('http'), service('netflix') start timestamp('2019-01-25 04:57:54.410687') end timestamp('2019-01-25 13:14:54.410692')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 05:36:54.410659') end timestamp('2019-01-25 15:01:54.410681')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow protocol('udp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow service('instagram'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block protocol('http'), service('netflix') start timestamp('2019-01-25 08:42:55.744964') end timestamp('2019-01-25 13:47:55.744968')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow service('youtube'), service('netflix') start timestamp('2019-01-25 03:24:55.744942') end timestamp('2019-01-25 07:54:55.744958')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') set quota('1', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('stremio'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 09:18:56.136525') end timestamp('2019-01-25 14:09:56.136529')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('http'), service('youtube') start timestamp('2019-01-25 02:11:56.136503') end timestamp('2019-01-25 07:53:56.136519')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 09:04:56.336584') end timestamp('2019-01-25 13:49:56.336587')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 04:00:56.336562') end timestamp('2019-01-25 07:51:56.336578')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') set quota('9', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('min', '40', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') start timestamp('2019-01-25 08:13:57.404413') end timestamp('2019-01-25 13:38:57.404417')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer') start timestamp('2019-01-25 02:54:57.404385') end timestamp('2019-01-25 07:47:57.404406')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('ftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') set quota('3', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') set quota('6', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('8', 'gb/wk') allow traffic('social-media'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('2', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') start timestamp('2019-01-25 09:31:00.019713') end timestamp('2019-01-25 13:41:00.019716')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 03:14:00.019705') end timestamp('2019-01-25 07:33:00.019709')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('2', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('ids') set bandwidth('max', '90', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('firewall') set quota('7', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('4', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), protocol('sftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') unset bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('facebook') start timestamp('2019-01-25 04:16:00.600338') end timestamp('2019-01-25 13:54:00.600343')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow protocol('sftp'), service('facebook') start timestamp('2019-01-25 04:14:00.600306') end timestamp('2019-01-25 13:55:00.600332')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('http'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') allow protocol('http'), protocol('smtp') start timestamp('2019-01-25 05:09:00.691825') end timestamp('2019-01-25 14:17:00.691829')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block protocol('quic'), protocol('snmp') start timestamp('2019-01-25 04:56:00.691794') end timestamp('2019-01-25 13:47:00.691819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('sftp'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow protocol('https'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('icmp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('5', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') start timestamp('2019-01-25 08:41:03.603191') end timestamp('2019-01-25 14:45:03.603195')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:11:03.603168') end timestamp('2019-01-25 08:37:03.603185')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 09:24:03.616217') end timestamp('2019-01-25 14:25:03.616221')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('ids'), middlebox('load-balancer') unset quota('7', 'gb/wk') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 02:22:03.616201') end timestamp('2019-01-25 07:26:03.616212')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('9', 'gb/wk') block service('popcorn-time'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk') allow protocol('ftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow service('facebook'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('sftp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') set bandwidth('max', '90', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 10:07:04.693630') end timestamp('2019-01-25 15:00:04.693649')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 03:58:04.693607') end timestamp('2019-01-25 08:42:04.693624')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('tcp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') allow service('instagram'), service('facebook') start timestamp('2019-01-25 08:27:04.801552') end timestamp('2019-01-25 14:52:04.801556')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('load-balancer'), middlebox('ids') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 02:35:04.801531') end timestamp('2019-01-25 08:03:04.801546')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') block protocol('https'), service('popcorn-time') start timestamp('2019-01-25 08:37:04.801721') end timestamp('2019-01-25 14:32:04.801724')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow protocol('https'), service('stremio') start timestamp('2019-01-25 03:52:04.801709') end timestamp('2019-01-25 07:22:04.801716')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow protocol('icmp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('telnet'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset quota('1', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 05:11:05.312070') end timestamp('2019-01-25 13:55:05.312074')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') unset quota('7', 'gb/wk') allow protocol('icmp'), service('popcorn-time') start timestamp('2019-01-25 06:03:05.312046') end timestamp('2019-01-25 13:28:05.312064')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') set quota('2', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('5', 'gb/wk') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 05:12:05.816195') end timestamp('2019-01-25 13:57:05.816199')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset quota('6', 'gb/wk') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 04:19:05.816171') end timestamp('2019-01-25 14:05:05.816189')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids') set quota('4', 'gb/wk') block service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('ids') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') set bandwidth('max', '50', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('parental-control') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi') set quota('7', 'gb/wk') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('9', 'gb/wk') block service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 06:02:06.662772') end timestamp('2019-01-25 14:19:06.662776')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), protocol('https') start timestamp('2019-01-25 05:39:06.662751') end timestamp('2019-01-25 13:20:06.662767')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('udp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') block service('instagram'), service('facebook') start timestamp('2019-01-25 09:40:08.558825') end timestamp('2019-01-25 15:05:08.558829')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow protocol('snmp'), service('popcorn-time') start timestamp('2019-01-25 03:31:08.558801') end timestamp('2019-01-25 07:39:08.558819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('min', '30', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '20', 'mbps') block service('vimeo'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '50', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') set bandwidth('max', '80', 'mbps') allow service('vimeo'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block protocol('https'), protocol('http') start timestamp('2019-01-25 10:03:09.252069') end timestamp('2019-01-25 15:11:09.252088')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') allow protocol('sftp'), service('instagram') start timestamp('2019-01-25 04:01:09.252045') end timestamp('2019-01-25 09:05:09.252062')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') set quota('8', 'gb/wk') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('min', '80', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') allow service('amazon-prime'), protocol('snmp') start timestamp('2019-01-25 08:42:11.879217') end timestamp('2019-01-25 14:52:11.879235')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('sftp'), protocol('smtp') start timestamp('2019-01-25 03:10:11.879194') end timestamp('2019-01-25 07:42:11.879213')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 08:16:12.477645') end timestamp('2019-01-25 13:58:12.477649')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('ids') allow service('amazon-prime') start timestamp('2019-01-25 03:35:12.477638') end timestamp('2019-01-25 07:22:12.477641')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('7', 'gb/wk') start timestamp('2019-01-25 06:01:12.758250') end timestamp('2019-01-25 14:37:12.758253')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids') unset quota('7', 'gb/wk') start timestamp('2019-01-25 05:09:12.758205') end timestamp('2019-01-25 14:46:12.758244')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') allow service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') block traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('load-balancer') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('sftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('7', 'gb/wk') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 05:22:12.945419') end timestamp('2019-01-25 14:27:12.945423')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow protocol('quic'), service('facebook') start timestamp('2019-01-25 05:01:12.945390') end timestamp('2019-01-25 13:46:12.945413')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('smtp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('telnet'), traffic('social-media') start timestamp('2019-01-25 09:44:13.639985') end timestamp('2019-01-25 13:32:13.639989')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 02:47:13.639945') end timestamp('2019-01-25 07:57:13.639978')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('sftp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block service('vimeo'), protocol('udp') start timestamp('2019-01-25 10:10:13.704363') end timestamp('2019-01-25 14:44:13.704367')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 04:05:13.704311') end timestamp('2019-01-25 09:01:13.704356')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('udp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('facebook'), service('popcorn-time') start timestamp('2019-01-25 05:31:14.380038') end timestamp('2019-01-25 13:16:14.380042')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') allow protocol('telnet'), service('facebook') start timestamp('2019-01-25 05:01:14.380015') end timestamp('2019-01-25 14:46:14.380032')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('http'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block protocol('tcp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('4', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '30', 'mbps') block protocol('ftp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi'), middlebox('load-balancer') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') unset quota('4', 'gb/wk') block protocol('quic'), service('bittorrent') start timestamp('2019-01-25 04:13:15.522604') end timestamp('2019-01-25 15:07:15.522608')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '10', 'mbps') allow protocol('http'), traffic('streaming') start timestamp('2019-01-25 06:11:15.522580') end timestamp('2019-01-25 14:31:15.522598')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 06:03:16.088018') end timestamp('2019-01-25 14:37:16.088021')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('parental-control') unset bandwidth('max', '80', 'mbps') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 05:08:16.087997') end timestamp('2019-01-25 14:02:16.088013')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('3', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block service('stremio') start timestamp('2019-01-25 09:56:17.118962') end timestamp('2019-01-25 14:35:17.118981')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 03:13:17.118934') end timestamp('2019-01-25 08:38:17.118955')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('1', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block service('youtube'), service('bittorrent') start timestamp('2019-01-25 09:28:17.280478') end timestamp('2019-01-25 14:33:17.280482')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 02:21:17.280451') end timestamp('2019-01-25 08:43:17.280471')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') set quota('1', 'gb/wk') allow protocol('tcp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block protocol('udp'), traffic('streaming') start timestamp('2019-01-25 09:14:17.596919') end timestamp('2019-01-25 13:47:17.596923')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 03:50:17.596899') end timestamp('2019-01-25 08:28:17.596915')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('3', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 06:05:18.471676') end timestamp('2019-01-25 14:37:18.471681')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('https'), service('facebook') start timestamp('2019-01-25 05:34:18.471645') end timestamp('2019-01-25 13:39:18.471670')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('telnet'), service('bittorrent') start timestamp('2019-01-25 05:37:18.614203') end timestamp('2019-01-25 14:38:18.614207')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block protocol('http'), service('instagram') start timestamp('2019-01-25 05:59:18.614182') end timestamp('2019-01-25 13:40:18.614198')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('7', 'gb/wk') allow protocol('telnet'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') block protocol('icmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('load-balancer') unset quota('4', 'gb/wk') block protocol('telnet'), traffic('streaming') start timestamp('2019-01-25 10:08:19.244403') end timestamp('2019-01-25 14:08:19.244407')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('smtp'), traffic('social-media') start timestamp('2019-01-25 03:54:19.244381') end timestamp('2019-01-25 08:21:19.244397')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('3', 'gb/wk') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('https'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('ids'), middlebox('firewall') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set bandwidth('min', '40', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('tcp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset quota('9', 'gb/wk') start timestamp('2019-01-25 05:33:21.047531') end timestamp('2019-01-25 14:45:21.047536')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') start timestamp('2019-01-25 05:37:21.047508') end timestamp('2019-01-25 15:06:21.047525')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 06:01:21.563629') end timestamp('2019-01-25 14:45:21.563633')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall'), middlebox('ids') unset bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 05:57:21.563607') end timestamp('2019-01-25 15:06:21.563623')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') unset bandwidth('min', '80', 'mbps') block service('vimeo'), service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('icmp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 09:47:22.978720') end timestamp('2019-01-25 13:52:22.978724')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 03:37:22.978698') end timestamp('2019-01-25 08:13:22.978714')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 04:25:23.721581') end timestamp('2019-01-25 14:39:23.721585')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow protocol('quic'), service('facebook') start timestamp('2019-01-25 05:23:23.721556') end timestamp('2019-01-25 14:40:23.721576')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 09:27:24.048861') end timestamp('2019-01-25 13:55:24.048865')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 04:05:24.048840') end timestamp('2019-01-25 07:30:24.048855')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('quic'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset bandwidth('min', '30', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('telnet')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('instagram'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('https'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block protocol('telnet'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') allow service('bittorrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set quota('3', 'gb/wk') block service('youtube'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') block protocol('https'), service('facebook') start timestamp('2019-01-25 10:05:24.900855') end timestamp('2019-01-25 14:34:24.900859')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow protocol('sftp'), protocol('https') start timestamp('2019-01-25 03:31:24.900819') end timestamp('2019-01-25 08:42:24.900848')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('dpi') set quota('4', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('stremio'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '30', 'mbps') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 05:51:25.865730') end timestamp('2019-01-25 14:43:25.865734')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset quota('5', 'gb/wk') allow service('youtube') start timestamp('2019-01-25 06:00:25.865706') end timestamp('2019-01-25 13:42:25.865725')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('6', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 04:47:26.170306') end timestamp('2019-01-25 14:11:26.170310')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 05:49:26.170285') end timestamp('2019-01-25 14:51:26.170301')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '80', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 09:01:26.892360') end timestamp('2019-01-25 14:55:26.892364')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('tcp'), protocol('smtp') start timestamp('2019-01-25 03:36:26.892340') end timestamp('2019-01-25 08:01:26.892354')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') unset bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 06:06:26.946487') end timestamp('2019-01-25 13:50:26.946492')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('8', 'gb/wk') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 05:31:26.946464') end timestamp('2019-01-25 13:37:26.946482')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('sftp'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('9', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') block traffic('social-media'), service('facebook') start timestamp('2019-01-25 05:07:27.666411') end timestamp('2019-01-25 13:17:27.666415')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') unset bandwidth('min', '60', 'mbps') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 05:57:27.666385') end timestamp('2019-01-25 13:24:27.666405')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('social-media'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('icmp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow protocol('https'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('5', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow protocol('tcp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block protocol('snmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('dpi') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 09:02:29.668425') end timestamp('2019-01-25 13:28:29.668429')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow service('popcorn-time') start timestamp('2019-01-25 03:00:29.668402') end timestamp('2019-01-25 07:57:29.668419')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('6', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('netflix'), service('bittorrent') start timestamp('2019-01-25 06:04:30.552715') end timestamp('2019-01-25 14:13:30.552719')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 05:20:30.552692') end timestamp('2019-01-25 15:12:30.552710')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('6', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('stremio'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 09:24:30.922589') end timestamp('2019-01-25 13:43:30.922593')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('9', 'gb/wk') start timestamp('2019-01-25 03:16:30.922567') end timestamp('2019-01-25 08:55:30.922583')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 09:53:30.922772') end timestamp('2019-01-25 13:51:30.922776')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 02:50:30.922745') end timestamp('2019-01-25 07:21:30.922767')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:39:30.949774') end timestamp('2019-01-25 14:39:30.949778')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') start timestamp('2019-01-25 06:06:30.949754') end timestamp('2019-01-25 13:44:30.949768')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('streaming'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('firewall') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow protocol('https'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('7', 'gb/wk') start timestamp('2019-01-25 05:51:30.990439') end timestamp('2019-01-25 13:59:30.990443')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 04:55:30.990421') end timestamp('2019-01-25 13:44:30.990434')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('firewall') unset quota('9', 'gb/wk') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 05:18:31.287729') end timestamp('2019-01-25 13:31:31.287732')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('udp'), service('netflix') start timestamp('2019-01-25 04:22:31.287708') end timestamp('2019-01-25 13:52:31.287723')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('min', '10', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('5', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow protocol('telnet'), service('facebook') start timestamp('2019-01-25 08:23:31.905520') end timestamp('2019-01-25 13:26:31.905525')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 03:25:31.905470') end timestamp('2019-01-25 07:17:31.905514')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 09:30:32.538932') end timestamp('2019-01-25 15:06:32.538936')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi') unset quota('4', 'gb/wk') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 03:30:32.538911') end timestamp('2019-01-25 08:09:32.538926')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('8', 'gb/wk') allow protocol('tcp'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '50', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') start timestamp('2019-01-25 09:22:32.669443') end timestamp('2019-01-25 15:01:32.669461')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 03:03:32.669394') end timestamp('2019-01-25 09:10:32.669424')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps') allow protocol('telnet'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 04:40:34.281727') end timestamp('2019-01-25 13:31:34.281731')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') unset bandwidth('min', '20', 'mbps') allow protocol('tcp'), service('youtube') start timestamp('2019-01-25 05:52:34.281703') end timestamp('2019-01-25 13:29:34.281721')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 05:04:34.433074') end timestamp('2019-01-25 14:50:34.433078')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 05:08:34.433051') end timestamp('2019-01-25 14:06:34.433068')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset quota('9', 'gb/wk') start timestamp('2019-01-25 06:01:34.489771') end timestamp('2019-01-25 14:22:34.489774')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 04:31:34.489751') end timestamp('2019-01-25 14:50:34.489766')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set quota('3', 'gb/wk') block protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('telnet'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids') set quota('1', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('http'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('dpi') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 08:24:36.164844') end timestamp('2019-01-25 14:19:36.164863')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('quic'), traffic('torrent') start timestamp('2019-01-25 03:36:36.164808') end timestamp('2019-01-25 07:13:36.164837')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('5', 'gb/wk') allow protocol('tcp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('quic'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 05:35:36.445351') end timestamp('2019-01-25 13:53:36.445355')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 04:40:36.445330') end timestamp('2019-01-25 13:19:36.445345')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('1', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 09:15:37.060398') end timestamp('2019-01-25 14:16:37.060402')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 02:22:37.060377') end timestamp('2019-01-25 07:52:37.060392')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') unset quota('7', 'gb/wk') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 05:45:37.116809') end timestamp('2019-01-25 14:51:37.116813')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') allow service('facebook'), protocol('udp') start timestamp('2019-01-25 04:31:37.116785') end timestamp('2019-01-25 14:12:37.116804')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') block service('stremio'), service('youtube') start timestamp('2019-01-25 08:21:37.117102') end timestamp('2019-01-25 13:19:37.117106')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 02:29:37.117082') end timestamp('2019-01-25 08:21:37.117098')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('1', 'gb/wk') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('ids') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 09:34:38.003107') end timestamp('2019-01-25 14:53:38.003111')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 03:02:38.003081') end timestamp('2019-01-25 08:43:38.003101')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('icmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('https'), protocol('udp') start timestamp('2019-01-25 09:25:38.989728') end timestamp('2019-01-25 14:48:38.989732')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('4', 'gb/wk') allow service('netflix'), protocol('ftp') start timestamp('2019-01-25 03:03:38.989703') end timestamp('2019-01-25 08:44:38.989722')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), protocol('sftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set quota('6', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block protocol('udp'), protocol('ftp') start timestamp('2019-01-25 04:49:39.439663') end timestamp('2019-01-25 13:14:39.439668')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset quota('9', 'gb/wk') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:59:39.439640') end timestamp('2019-01-25 13:50:39.439657')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('streaming'), service('netflix') start timestamp('2019-01-25 05:32:39.547325') end timestamp('2019-01-25 14:24:39.547329')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') unset quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 04:24:39.547279') end timestamp('2019-01-25 15:07:39.547304')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('ids') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') allow service('youtube'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 08:40:39.547698') end timestamp('2019-01-25 14:32:39.547705')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 03:27:39.547670') end timestamp('2019-01-25 08:04:39.547691')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set quota('1', 'gb/wk') start timestamp('2019-01-25 08:50:39.681550') end timestamp('2019-01-25 14:01:39.681554')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') start timestamp('2019-01-25 03:16:39.681521') end timestamp('2019-01-25 07:50:39.681543')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block service('amazon-prime'), service('netflix') start timestamp('2019-01-25 05:20:39.883974') end timestamp('2019-01-25 14:23:39.883978')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 05:15:39.883920') end timestamp('2019-01-25 14:44:39.883968')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('https'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 08:39:41.540774') end timestamp('2019-01-25 14:42:41.540778')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 03:57:41.540751') end timestamp('2019-01-25 07:48:41.540767')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:46:41.967081') end timestamp('2019-01-25 15:01:41.967086')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') unset quota('8', 'gb/wk') start timestamp('2019-01-25 05:55:41.967055') end timestamp('2019-01-25 14:17:41.967075')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('udp'), service('bittorrent') start timestamp('2019-01-25 09:52:42.097349') end timestamp('2019-01-25 15:06:42.097353')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 02:50:42.097325') end timestamp('2019-01-25 07:22:42.097343')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block service('facebook'), service('popcorn-time') start timestamp('2019-01-25 09:55:42.273915') end timestamp('2019-01-25 14:47:42.273919')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control') allow service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 03:52:42.273874') end timestamp('2019-01-25 08:42:42.273908')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('9', 'gb/wk') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 04:54:42.389027') end timestamp('2019-01-25 14:34:42.389033')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('popcorn-time'), service('netflix') start timestamp('2019-01-25 06:07:42.388995') end timestamp('2019-01-25 14:35:42.389021')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '30', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 10:03:42.801328') end timestamp('2019-01-25 15:12:42.801332')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 02:44:42.801300') end timestamp('2019-01-25 07:52:42.801321')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '40', 'mbps') allow protocol('icmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('load-balancer') set quota('4', 'gb/wk') block service('popcorn-time'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('smtp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block service('stremio'), service('netflix') start timestamp('2019-01-25 09:11:44.594136') end timestamp('2019-01-25 14:27:44.594141')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 02:34:44.594112') end timestamp('2019-01-25 08:50:44.594129')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow protocol('quic'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall') set quota('9', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 08:13:45.443651') end timestamp('2019-01-25 13:58:45.443655')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 02:44:45.443629') end timestamp('2019-01-25 07:52:45.443645')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 05:05:45.470792') end timestamp('2019-01-25 14:06:45.470796')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 04:13:45.470769') end timestamp('2019-01-25 14:34:45.470785')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('parental-control') allow protocol('snmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('dpi') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('6', 'gb/wk') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 05:42:45.620692') end timestamp('2019-01-25 14:29:45.620695')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 04:35:45.620668') end timestamp('2019-01-25 13:26:45.620686')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '60', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block service('bittorrent') start timestamp('2019-01-25 09:48:45.909290') end timestamp('2019-01-25 13:36:45.909294')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 02:51:45.909269') end timestamp('2019-01-25 08:15:45.909284')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') block traffic('social-media'), service('facebook') start timestamp('2019-01-25 08:19:46.141492') end timestamp('2019-01-25 14:16:46.141496')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 04:03:46.141471') end timestamp('2019-01-25 07:28:46.141486')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow protocol('quic'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:07:46.638736') end timestamp('2019-01-25 13:14:46.638740')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset quota('3', 'gb/wk') start timestamp('2019-01-25 04:44:46.638712') end timestamp('2019-01-25 14:54:46.638730')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow protocol('sftp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow service('youtube'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('parental-control') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('parental-control') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('min', '60', 'mbps') block traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block service('facebook') start timestamp('2019-01-25 09:00:49.551157') end timestamp('2019-01-25 15:02:49.551161')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block protocol('https'), service('facebook') start timestamp('2019-01-25 02:29:49.551120') end timestamp('2019-01-25 07:37:49.551150')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') set quota('9', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('4', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow protocol('quic'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('5', 'gb/wk') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('instagram'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block service('instagram'), protocol('udp') start timestamp('2019-01-25 09:40:50.927349') end timestamp('2019-01-25 14:47:50.927353')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 03:36:50.927323') end timestamp('2019-01-25 09:04:50.927343')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('dpi'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('dpi') set quota('5', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('quic'), traffic('social-media') start timestamp('2019-01-25 09:12:51.157979') end timestamp('2019-01-25 13:43:51.157983')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 03:40:51.157952') end timestamp('2019-01-25 08:13:51.157973')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set quota('8', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 06:10:51.624304') end timestamp('2019-01-25 13:50:51.624308')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('1', 'gb/wk') start timestamp('2019-01-25 04:55:51.624258') end timestamp('2019-01-25 13:23:51.624284')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('1', 'gb/wk') start timestamp('2019-01-25 05:59:51.840071') end timestamp('2019-01-25 13:34:51.840075')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('firewall'), middlebox('dpi') unset quota('7', 'gb/wk') start timestamp('2019-01-25 04:29:51.840048') end timestamp('2019-01-25 14:59:51.840065')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') unset bandwidth('min', '20', 'mbps') allow protocol('http'), service('facebook') start timestamp('2019-01-25 05:07:52.056789') end timestamp('2019-01-25 14:37:52.056793')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') unset bandwidth('min', '60', 'mbps') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:40:52.056763') end timestamp('2019-01-25 15:06:52.056783')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('4', 'gb/wk') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 05:56:52.158834') end timestamp('2019-01-25 13:41:52.158838')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 06:01:52.158804') end timestamp('2019-01-25 13:28:52.158828')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') allow protocol('sftp'), service('netflix') start timestamp('2019-01-25 09:25:53.135078') end timestamp('2019-01-25 14:13:53.135083')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') block service('stremio'), protocol('http') start timestamp('2019-01-25 04:08:53.135055') end timestamp('2019-01-25 08:02:53.135072')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block protocol('quic'), traffic('social-media') start timestamp('2019-01-25 10:10:53.170420') end timestamp('2019-01-25 13:35:53.170424')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow protocol('https'), traffic('streaming') start timestamp('2019-01-25 03:52:53.170398') end timestamp('2019-01-25 08:31:53.170413')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 04:41:53.877204') end timestamp('2019-01-25 14:02:53.877208')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 05:35:53.877181') end timestamp('2019-01-25 15:08:53.877199')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('quic'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 05:03:54.346136') end timestamp('2019-01-25 14:58:54.346140')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('4', 'gb/wk') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 04:51:54.346111') end timestamp('2019-01-25 14:42:54.346130')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('http'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') set quota('3', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('7', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control') allow service('youtube'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 09:42:56.646579') end timestamp('2019-01-25 14:20:56.646583')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 04:05:56.646557') end timestamp('2019-01-25 08:21:56.646573')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('7', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('firewall') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids') block service('amazon-prime'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('ids'), middlebox('dpi') unset quota('4', 'gb/wk') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:24:57.353782') end timestamp('2019-01-25 14:03:57.353786')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('1', 'gb/wk') allow protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 05:28:57.353760') end timestamp('2019-01-25 13:51:57.353776')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') unset quota('6', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 09:18:57.394437') end timestamp('2019-01-25 13:34:57.394441')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 03:28:57.394429') end timestamp('2019-01-25 07:36:57.394433')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block protocol('icmp'), service('popcorn-time') start timestamp('2019-01-25 04:19:57.465642') end timestamp('2019-01-25 15:12:57.465646')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 05:00:57.465619') end timestamp('2019-01-25 13:43:57.465637')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('dpi') set quota('4', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') unset bandwidth('min', '60', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('4', 'gb/wk') start timestamp('2019-01-25 08:47:59.773609') end timestamp('2019-01-25 14:10:59.773613')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 02:54:59.773588') end timestamp('2019-01-25 07:43:59.773603')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('sftp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('sftp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') set quota('9', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set quota('8', 'gb/wk') allow protocol('http'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 09:58:00.199492') end timestamp('2019-01-25 13:48:00.199495')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') add middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 03:25:00.199465') end timestamp('2019-01-25 07:23:00.199485')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') start timestamp('2019-01-25 08:47:00.381468') end timestamp('2019-01-25 14:44:00.381472')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('parental-control') start timestamp('2019-01-25 02:36:00.381446') end timestamp('2019-01-25 07:40:00.381461')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') set quota('6', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('7', 'gb/wk') allow protocol('tcp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '80', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block protocol('icmp'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') unset bandwidth('min', '30', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('9', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('stremio'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow protocol('quic'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 04:53:00.994520') end timestamp('2019-01-25 14:00:00.994525')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 05:12:00.994466') end timestamp('2019-01-25 13:17:00.994512')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('dpi') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') block service('youtube'), service('netflix') start timestamp('2019-01-25 04:13:01.700626') end timestamp('2019-01-25 15:09:01.700630')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') unset quota('4', 'gb/wk') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 04:37:01.700606') end timestamp('2019-01-25 13:59:01.700620')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('ids') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') block service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 09:03:02.134827') end timestamp('2019-01-25 13:46:02.134832')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 03:36:02.134782') end timestamp('2019-01-25 09:03:02.134805')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') unset quota('5', 'gb/wk') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('quic'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('4', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset quota('9', 'gb/wk') allow protocol('https'), service('popcorn-time') start timestamp('2019-01-25 04:48:03.581661') end timestamp('2019-01-25 13:51:03.581665')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('7', 'gb/wk') block traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 05:26:03.581636') end timestamp('2019-01-25 14:51:03.581655')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('4', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow protocol('quic'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:30:04.317638') end timestamp('2019-01-25 14:49:04.317643')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow protocol('http'), protocol('snmp') start timestamp('2019-01-25 03:32:04.317610') end timestamp('2019-01-25 08:05:04.317632')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 09:15:04.691558') end timestamp('2019-01-25 14:41:04.691561')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('firewall'), middlebox('load-balancer') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 02:37:04.691550') end timestamp('2019-01-25 08:15:04.691554')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('instagram'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('snmp'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('quic'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('9', 'gb/wk') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('2', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 09:26:05.338123') end timestamp('2019-01-25 13:18:05.338127')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 03:01:05.338115') end timestamp('2019-01-25 08:08:05.338119')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 09:26:05.338296') end timestamp('2019-01-25 15:05:05.338300')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('stremio'), service('facebook') start timestamp('2019-01-25 02:24:05.338285') end timestamp('2019-01-25 08:36:05.338291')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set quota('1', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 10:10:05.486265') end timestamp('2019-01-25 13:53:05.486270')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 04:00:05.486243') end timestamp('2019-01-25 07:50:05.486259')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '10', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') set bandwidth('min', '30', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow protocol('tcp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('dpi'), middlebox('ids') allow service('stremio') start timestamp('2019-01-25 09:50:07.320383') end timestamp('2019-01-25 14:52:07.320387')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('firewall') block protocol('smtp'), service('bittorrent') start timestamp('2019-01-25 02:37:07.320376') end timestamp('2019-01-25 08:47:07.320379')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('6', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 05:41:07.499771') end timestamp('2019-01-25 14:45:07.499775')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 04:24:07.499747') end timestamp('2019-01-25 14:10:07.499765')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('sftp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 04:15:08.075533') end timestamp('2019-01-25 13:33:08.075537')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('4', 'gb/wk') block protocol('sftp'), protocol('ftp') start timestamp('2019-01-25 06:10:08.075508') end timestamp('2019-01-25 14:48:08.075527')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '50', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('4', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('stremio'), service('youtube') start timestamp('2019-01-25 09:25:09.262544') end timestamp('2019-01-25 14:52:09.262549')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 02:42:09.262478') end timestamp('2019-01-25 08:08:09.262535')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('9', 'gb/wk') allow protocol('sftp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('icmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 09:02:10.621883') end timestamp('2019-01-25 14:48:10.621887')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('dpi') start timestamp('2019-01-25 03:49:10.621857') end timestamp('2019-01-25 08:44:10.621877')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') set bandwidth('max', '50', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('min', '50', 'mbps') allow protocol('tcp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block service('netflix'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow protocol('udp'), service('netflix')", 
            "type": "negation"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 445, 
                "hierarchical": 406, 
                "negation": 418, 
                "qos": 397, 
                "synonym": 408, 
                "time": 431
            }, 
            "count": 2505
        }, 
        "entailment": {
            "byType": {
                "domain": 358, 
                "hierarchical": 369, 
                "negation": 343, 
                "non_coreferent": 333, 
                "qos": 363, 
                "synonym": 345, 
                "time": 384
            }, 
            "count": 2495
        }
    }
}