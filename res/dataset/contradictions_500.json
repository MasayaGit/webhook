{
    "content": [
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('bittorrent'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 22:34:48.389141') end timestamp('2019-01-26 02:40:48.389146')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 16:35:48.389112') end timestamp('2019-01-25 20:35:48.389133')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '80', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') unset quota('4', 'gb/wk') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 17:56:48.905554') end timestamp('2019-01-26 04:04:48.905559')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset quota('5', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 17:28:48.905525') end timestamp('2019-01-26 03:57:48.905547')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block protocol('tcp'), service('facebook') start timestamp('2019-01-25 22:57:48.957864') end timestamp('2019-01-26 03:40:48.957869')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 15:25:48.957834') end timestamp('2019-01-25 21:06:48.957856')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('icmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 22:55:49.000339') end timestamp('2019-01-26 03:00:49.000354')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 15:44:49.000308') end timestamp('2019-01-25 20:33:49.000331')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 22:57:49.037431') end timestamp('2019-01-26 02:53:49.037436')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 15:33:49.037402') end timestamp('2019-01-25 20:09:49.037424')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('firewall'), middlebox('ids') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('youtube'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') block service('stremio'), protocol('smtp') start timestamp('2019-01-25 21:17:49.160989') end timestamp('2019-01-26 03:34:49.160996')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), service('netflix') start timestamp('2019-01-25 15:10:49.160892') end timestamp('2019-01-25 21:14:49.160975')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 22:19:49.508468') end timestamp('2019-01-26 03:00:49.508473')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 15:24:49.508361') end timestamp('2019-01-25 21:40:49.508456')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('icmp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('9', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('max', '10', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set bandwidth('min', '10', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 21:31:50.623454') end timestamp('2019-01-26 03:20:50.623458')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 16:46:50.623444') end timestamp('2019-01-25 21:25:50.623449')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 22:07:50.658839') end timestamp('2019-01-26 04:07:50.658845')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 16:06:50.658801') end timestamp('2019-01-25 21:48:50.658822')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow traffic('torrent'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi') allow protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('sftp'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '60', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 17:15:52.027831') end timestamp('2019-01-26 02:15:52.027836')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') unset quota('3', 'gb/wk') start timestamp('2019-01-25 18:22:52.027795') end timestamp('2019-01-26 03:35:52.027823')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('https'), service('facebook') start timestamp('2019-01-25 23:02:52.063871') end timestamp('2019-01-26 03:14:52.063876')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') allow traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 15:56:52.063841') end timestamp('2019-01-25 21:19:52.063864')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block protocol('telnet'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '20', 'mbps') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 19:03:52.498833') end timestamp('2019-01-26 02:17:52.498837')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('https') start timestamp('2019-01-25 17:57:52.498806') end timestamp('2019-01-26 02:45:52.498826')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '20', 'mbps') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 18:59:53.782463') end timestamp('2019-01-26 03:25:53.782468')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') allow service('bittorrent'), service('netflix') start timestamp('2019-01-25 17:38:53.782435') end timestamp('2019-01-26 03:26:53.782456')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 18:03:53.881061') end timestamp('2019-01-26 02:46:53.881065')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 19:02:53.881032') end timestamp('2019-01-26 03:35:53.881054')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('3', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('min', '80', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') block protocol('quic'), protocol('ftp') start timestamp('2019-01-25 22:09:54.411020') end timestamp('2019-01-26 03:48:54.411025')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') allow service('netflix'), traffic('streaming') start timestamp('2019-01-25 16:42:54.410992') end timestamp('2019-01-25 21:26:54.411013')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 22:57:54.748640') end timestamp('2019-01-26 03:52:54.748645')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') allow service('stremio'), service('netflix') start timestamp('2019-01-25 16:18:54.748602') end timestamp('2019-01-25 21:04:54.748632')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('3', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control') set quota('7', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') unset bandwidth('max', '30', 'mbps') block protocol('telnet'), traffic('streaming') start timestamp('2019-01-25 18:04:55.028541') end timestamp('2019-01-26 03:15:55.028548')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 18:24:55.028382') end timestamp('2019-01-26 02:17:55.028528')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 17:32:55.752147') end timestamp('2019-01-26 03:40:55.752152')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 17:42:55.752122') end timestamp('2019-01-26 03:26:55.752140')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('netflix'), protocol('ftp') start timestamp('2019-01-25 22:24:55.931288') end timestamp('2019-01-26 04:00:55.931293')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') block protocol('sftp'), service('vimeo') start timestamp('2019-01-25 16:38:55.931247') end timestamp('2019-01-25 21:29:55.931280')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('firewall'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('load-balancer'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('https'), service('youtube') start timestamp('2019-01-25 21:34:55.984106') end timestamp('2019-01-26 03:38:55.984110')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 16:08:55.984078') end timestamp('2019-01-25 20:53:55.984099')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('stremio'), service('instagram') start timestamp('2019-01-25 18:18:56.067280') end timestamp('2019-01-26 04:05:56.067285')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), service('instagram') start timestamp('2019-01-25 17:22:56.067255') end timestamp('2019-01-26 02:09:56.067274')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') block service('instagram'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 22:51:56.501826') end timestamp('2019-01-26 03:47:56.501831')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 16:29:56.501799') end timestamp('2019-01-25 21:22:56.501819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow service('vimeo'), protocol('icmp') start timestamp('2019-01-25 18:57:57.372232') end timestamp('2019-01-26 03:29:57.372236')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 18:40:57.372209') end timestamp('2019-01-26 03:09:57.372226')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('firewall'), middlebox('dpi') unset quota('1', 'gb/wk') allow service('vimeo'), protocol('icmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 22:38:57.866254') end timestamp('2019-01-26 02:23:57.866259')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('ids'), middlebox('load-balancer') allow service('facebook'), service('netflix') start timestamp('2019-01-25 15:15:57.866227') end timestamp('2019-01-25 21:08:57.866247')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('http'), protocol('udp') start timestamp('2019-01-25 22:17:58.149246') end timestamp('2019-01-26 03:13:58.149251')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('http'), traffic('streaming') start timestamp('2019-01-25 15:24:58.149220') end timestamp('2019-01-25 22:05:58.149240')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block service('stremio'), service('instagram') start timestamp('2019-01-25 22:01:58.769720') end timestamp('2019-01-26 02:51:58.769724')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 15:21:58.769711') end timestamp('2019-01-25 21:45:58.769715')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('smtp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('dpi') set quota('1', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '60', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '70', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '20', 'mbps') allow service('bittorrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('facebook'), traffic('social-media') start timestamp('2019-01-25 17:14:59.712852') end timestamp('2019-01-26 03:32:59.712858')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 17:44:59.712819') end timestamp('2019-01-26 03:04:59.712845')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow protocol('quic'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('4', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('5', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 22:52:00.801653') end timestamp('2019-01-26 03:13:00.801658')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 15:57:00.801627') end timestamp('2019-01-25 22:02:00.801646')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('youtube'), protocol('ftp') start timestamp('2019-01-25 22:45:00.973710') end timestamp('2019-01-26 02:53:00.973715')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('social-media') start timestamp('2019-01-25 16:37:00.973683') end timestamp('2019-01-25 21:30:00.973703')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('9', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('9', 'gb/wk') allow service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('5', 'gb/wk') block service('stremio'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 22:33:01.379085') end timestamp('2019-01-26 02:14:01.379090')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow service('stremio'), service('netflix') start timestamp('2019-01-25 15:49:01.379055') end timestamp('2019-01-25 20:33:01.379077')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('ids') set bandwidth('min', '30', 'mbps') allow protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('8', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('dpi'), middlebox('firewall') allow protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 22:12:02.682820') end timestamp('2019-01-26 03:46:02.682824')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 15:28:02.682811') end timestamp('2019-01-25 21:52:02.682815')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('peer2peer') start timestamp('2019-01-25 18:00:02.717163') end timestamp('2019-01-26 03:03:02.717167')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 18:17:02.717128') end timestamp('2019-01-26 02:14:02.717156')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block traffic('streaming') start timestamp('2019-01-25 22:40:02.847609') end timestamp('2019-01-26 03:12:02.847614')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 15:56:02.847600') end timestamp('2019-01-25 21:09:02.847605')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 17:36:03.945619') end timestamp('2019-01-26 02:19:03.945624')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids') set quota('7', 'gb/wk') start timestamp('2019-01-25 17:32:03.945592') end timestamp('2019-01-26 03:37:03.945612')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 18:29:03.980682') end timestamp('2019-01-26 02:21:03.980689')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') start timestamp('2019-01-25 17:18:03.980581') end timestamp('2019-01-26 03:13:03.980671')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('dpi') set quota('3', 'gb/wk') block traffic('social-media'), service('netflix') start timestamp('2019-01-25 22:33:04.086682') end timestamp('2019-01-26 03:30:04.086687')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('stremio'), service('netflix') start timestamp('2019-01-25 15:27:04.086671') end timestamp('2019-01-25 20:16:04.086677')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall') set quota('5', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '40', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow service('netflix'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('tcp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('smtp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('min', '40', 'mbps') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 19:06:07.146354') end timestamp('2019-01-26 02:12:07.146358')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') start timestamp('2019-01-25 17:48:07.146322') end timestamp('2019-01-26 03:55:07.146346')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('8', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 22:22:07.563200') end timestamp('2019-01-26 02:25:07.563205')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 15:21:07.563160') end timestamp('2019-01-25 21:07:07.563192')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 22:32:07.859704') end timestamp('2019-01-26 03:25:07.859709')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control') allow protocol('quic'), service('stremio') start timestamp('2019-01-25 15:58:07.859693') end timestamp('2019-01-25 21:08:07.859699')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('telnet'), service('stremio') start timestamp('2019-01-25 17:56:09.038388') end timestamp('2019-01-26 03:16:09.038393')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 18:51:09.038362') end timestamp('2019-01-26 02:52:09.038382')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 23:00:10.004919') end timestamp('2019-01-26 02:31:10.004924')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 16:52:10.004893') end timestamp('2019-01-25 21:58:10.004912')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 22:35:10.235751') end timestamp('2019-01-26 03:03:10.235756')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi') allow protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 16:37:10.235727') end timestamp('2019-01-25 21:10:10.235744')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block protocol('quic'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall') set quota('2', 'gb/wk') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 21:48:10.714968') end timestamp('2019-01-26 03:15:10.714975')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 16:29:10.714845') end timestamp('2019-01-25 21:05:10.714951')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '70', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('load-balancer') block service('netflix'), service('popcorn-time') start timestamp('2019-01-25 21:52:11.292711') end timestamp('2019-01-26 02:10:11.292715')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow service('instagram') start timestamp('2019-01-25 16:31:11.292702') end timestamp('2019-01-25 21:01:11.292706')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 18:40:11.426151') end timestamp('2019-01-26 02:32:11.426156')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids') unset bandwidth('min', '40', 'mbps') block service('instagram'), service('netflix') start timestamp('2019-01-25 17:37:11.426122') end timestamp('2019-01-26 03:43:11.426145')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('2', 'gb/wk') allow protocol('tcp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('4', 'gb/wk') start timestamp('2019-01-25 18:12:12.366071') end timestamp('2019-01-26 02:34:12.366076')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control') unset quota('2', 'gb/wk') start timestamp('2019-01-25 19:00:12.366042') end timestamp('2019-01-26 02:39:12.366064')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('firewall') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow protocol('smtp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 22:57:13.171195') end timestamp('2019-01-26 03:14:13.171200')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), service('instagram') start timestamp('2019-01-25 16:50:13.171168') end timestamp('2019-01-25 20:24:13.171188')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('icmp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 18:18:14.050519') end timestamp('2019-01-26 03:57:14.050524')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 18:56:14.050492') end timestamp('2019-01-26 02:46:14.050513')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('vimeo'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow traffic('social-media'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('7', 'gb/wk') allow protocol('http'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 21:14:18.074838') end timestamp('2019-01-26 02:31:18.074843')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 15:34:18.074810') end timestamp('2019-01-25 20:56:18.074830')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('firewall') set quota('1', 'gb/wk') allow protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '10', 'mbps') allow protocol('http'), service('bittorrent') start timestamp('2019-01-25 18:31:18.389512') end timestamp('2019-01-26 02:23:18.389517')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer') unset quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 18:25:18.389484') end timestamp('2019-01-26 02:35:18.389505')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow protocol('sftp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') set bandwidth('min', '40', 'mbps') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '80', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') block protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall') set quota('6', 'gb/wk') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('5', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') set bandwidth('min', '40', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 22:46:20.206906') end timestamp('2019-01-26 03:48:20.206911')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') start timestamp('2019-01-25 15:56:20.206871') end timestamp('2019-01-25 21:35:20.206898')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('7', 'gb/wk') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('6', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 17:41:20.342651') end timestamp('2019-01-26 04:02:20.342658')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 18:40:20.342519') end timestamp('2019-01-26 03:08:20.342640')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set bandwidth('min', '70', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 22:12:21.767298') end timestamp('2019-01-26 02:38:21.767303')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 15:45:21.767267') end timestamp('2019-01-25 21:21:21.767291')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids') set quota('1', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 21:56:22.057893') end timestamp('2019-01-26 02:35:22.057898')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow protocol('udp'), service('netflix') start timestamp('2019-01-25 15:34:22.057859') end timestamp('2019-01-25 21:05:22.057881')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('bittorrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('4', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('firewall') set quota('1', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('1', 'gb/wk') block protocol('snmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 17:54:23.563496') end timestamp('2019-01-26 02:37:23.563501')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') unset quota('8', 'gb/wk') allow protocol('sftp'), service('facebook') start timestamp('2019-01-25 17:10:23.563450') end timestamp('2019-01-26 03:28:23.563488')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('3', 'gb/wk') block service('popcorn-time') start timestamp('2019-01-25 17:29:23.597475') end timestamp('2019-01-26 02:31:23.597481')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('snmp'), service('popcorn-time') start timestamp('2019-01-25 17:30:23.597394') end timestamp('2019-01-26 02:37:23.597467')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 17:41:25.624648') end timestamp('2019-01-26 02:57:25.624653')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 17:58:25.624622') end timestamp('2019-01-26 02:54:25.624642')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 22:22:25.659433') end timestamp('2019-01-26 02:28:25.659438')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('http'), service('bittorrent') start timestamp('2019-01-25 15:14:25.659371') end timestamp('2019-01-25 20:58:25.659424')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('smtp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 22:57:27.749811') end timestamp('2019-01-26 03:16:27.749816')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids') allow service('popcorn-time'), service('netflix') start timestamp('2019-01-25 15:12:27.749788') end timestamp('2019-01-25 21:33:27.749805')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow protocol('https'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow protocol('telnet'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow protocol('telnet'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('bittorrent') start timestamp('2019-01-25 18:45:28.470672') end timestamp('2019-01-26 03:35:28.470678')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow service('facebook'), service('youtube') start timestamp('2019-01-25 17:22:28.470559') end timestamp('2019-01-26 03:09:28.470661')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('9', 'gb/wk') allow service('bittorrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 22:41:28.736938') end timestamp('2019-01-26 02:35:28.736943')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 15:58:28.736847') end timestamp('2019-01-25 21:53:28.736926')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') set bandwidth('min', '30', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') set quota('5', 'gb/wk') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('6', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('5', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), protocol('ftp') start timestamp('2019-01-25 22:51:31.733569') end timestamp('2019-01-26 03:37:31.733574')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 16:50:31.733545') end timestamp('2019-01-25 22:07:31.733562')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('firewall') set quota('8', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('min', '40', 'mbps') allow protocol('http'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') set quota('6', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('3', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') set bandwidth('max', '80', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('3', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('telnet'), protocol('icmp') start timestamp('2019-01-25 17:49:36.676972') end timestamp('2019-01-26 03:48:36.676977')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('torrent'), protocol('udp') start timestamp('2019-01-25 18:28:36.676947') end timestamp('2019-01-26 02:22:36.676967')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block protocol('sftp'), protocol('quic') start timestamp('2019-01-25 22:58:37.168810') end timestamp('2019-01-26 03:26:37.168814')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow traffic('social-media'), service('youtube') start timestamp('2019-01-25 17:05:37.168780') end timestamp('2019-01-25 20:23:37.168803')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids') set quota('2', 'gb/wk') allow protocol('http'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('2', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('icmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '70', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('smtp'), traffic('social-media') start timestamp('2019-01-25 18:38:38.671462') end timestamp('2019-01-26 02:41:38.671467')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 17:08:38.671433') end timestamp('2019-01-26 02:56:38.671455')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('5', 'gb/wk') allow service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('quic'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('min', '30', 'mbps') block protocol('snmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '20', 'mbps') allow service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('peer2peer'), protocol('sftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('smtp'), service('bittorrent') start timestamp('2019-01-25 17:38:41.094980') end timestamp('2019-01-26 02:38:41.094985')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer') start timestamp('2019-01-25 18:05:41.094950') end timestamp('2019-01-26 03:45:41.094973')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') unset bandwidth('min', '40', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('vimeo'), service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block protocol('sftp'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 22:22:41.968464') end timestamp('2019-01-26 04:06:41.968469')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 15:59:41.968378') end timestamp('2019-01-25 21:50:41.968452')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 18:34:43.608123') end timestamp('2019-01-26 03:21:43.608128')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 18:06:43.608094') end timestamp('2019-01-26 03:49:43.608117')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('stremio'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('ids') set bandwidth('max', '80', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 18:17:44.460329') end timestamp('2019-01-26 03:42:44.460335')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 17:24:44.460300') end timestamp('2019-01-26 02:26:44.460322')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow protocol('quic'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') set bandwidth('max', '60', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('8', 'gb/wk') start timestamp('2019-01-25 23:06:44.680507') end timestamp('2019-01-26 02:40:44.680511')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') start timestamp('2019-01-25 16:54:44.680498') end timestamp('2019-01-25 20:47:44.680502')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 18:35:45.694606') end timestamp('2019-01-26 02:40:45.694611')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '60', 'mbps') allow service('stremio'), protocol('udp') start timestamp('2019-01-25 17:18:45.694578') end timestamp('2019-01-26 03:29:45.694599')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('1', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow service('facebook'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 22:35:45.839302') end timestamp('2019-01-26 02:47:45.839307')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 17:05:45.839274') end timestamp('2019-01-25 20:38:45.839295')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('smtp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 17:53:45.994797') end timestamp('2019-01-26 03:35:45.994802')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 18:17:45.994762') end timestamp('2019-01-26 02:58:45.994790')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') unset bandwidth('min', '60', 'mbps') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 18:35:46.132608') end timestamp('2019-01-26 02:21:46.132615')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 17:43:46.132578') end timestamp('2019-01-26 03:24:46.132601')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 22:46:47.346674') end timestamp('2019-01-26 02:38:47.346678')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('firewall') start timestamp('2019-01-25 16:14:47.346649') end timestamp('2019-01-25 21:24:47.346666')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') set quota('2', 'gb/wk') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk') allow protocol('telnet'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('dpi') allow protocol('snmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow protocol('quic'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 17:14:48.762248') end timestamp('2019-01-26 02:23:48.762253')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 17:28:48.762222') end timestamp('2019-01-26 02:14:48.762241')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 22:32:49.739767') end timestamp('2019-01-26 02:39:49.739771')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 15:56:49.739742') end timestamp('2019-01-25 21:13:49.739759')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') set quota('1', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('facebook') start timestamp('2019-01-25 17:08:50.289344') end timestamp('2019-01-26 02:50:50.289348')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') unset bandwidth('min', '90', 'mbps') block protocol('ftp'), service('netflix') start timestamp('2019-01-25 18:14:50.289311') end timestamp('2019-01-26 03:09:50.289337')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 21:21:50.565369') end timestamp('2019-01-26 02:25:50.565374')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('firewall') block service('stremio'), protocol('ftp') start timestamp('2019-01-25 17:02:50.565342') end timestamp('2019-01-25 20:54:50.565362')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow protocol('telnet'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') add middlebox('dpi') allow service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids') block protocol('tcp'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') block protocol('ftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('ftp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 22:15:51.166592') end timestamp('2019-01-26 04:08:51.166596')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block protocol('https'), protocol('smtp') start timestamp('2019-01-25 16:59:51.166565') end timestamp('2019-01-25 20:56:51.166585')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '30', 'mbps') block service('youtube'), service('netflix') start timestamp('2019-01-25 18:07:51.853136') end timestamp('2019-01-26 02:33:51.853141')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset quota('1', 'gb/wk') allow protocol('sftp'), protocol('http') start timestamp('2019-01-25 17:41:51.853106') end timestamp('2019-01-26 02:11:51.853129')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 22:02:51.853374') end timestamp('2019-01-26 02:36:51.853378')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 16:00:51.853358') end timestamp('2019-01-25 20:28:51.853367')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('parental-control'), middlebox('dpi') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('netflix'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('tcp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('vimeo'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set quota('3', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('stremio'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('ids') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('load-balancer') block service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set bandwidth('min', '60', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi') set quota('7', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block protocol('tcp'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('parental-control') allow service('vimeo'), protocol('sftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('load-balancer') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') unset quota('5', 'gb/wk') allow protocol('sftp'), service('bittorrent') start timestamp('2019-01-25 17:35:54.838429') end timestamp('2019-01-26 03:22:54.838434')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 18:07:54.838401') end timestamp('2019-01-26 03:43:54.838422')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') block traffic('social-media'), service('netflix') start timestamp('2019-01-25 22:13:54.923510') end timestamp('2019-01-26 03:55:54.923514')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('youtube'), service('netflix') start timestamp('2019-01-25 15:26:54.923481') end timestamp('2019-01-25 20:25:54.923502')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control') block protocol('tcp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('icmp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall') set bandwidth('min', '30', 'mbps') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('streaming') start timestamp('2019-01-25 21:55:55.772877') end timestamp('2019-01-26 02:56:55.772883')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 16:02:55.772795') end timestamp('2019-01-25 21:07:55.772864')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('max', '60', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "domain"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 42, 
                "hierarchical": 51, 
                "negation": 49, 
                "qos": 34, 
                "synonym": 35, 
                "time": 36
            }, 
            "count": 247
        }, 
        "entailment": {
            "byType": {
                "domain": 43, 
                "hierarchical": 38, 
                "negation": 39, 
                "non_coreferent": 28, 
                "qos": 36, 
                "synonym": 35, 
                "time": 34
            }, 
            "count": 253
        }
    }
}