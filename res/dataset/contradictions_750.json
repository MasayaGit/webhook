{
    "content": [
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('9', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('max', '40', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow protocol('telnet'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('quic'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('8', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('7', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer'), middlebox('firewall') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall') allow traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') allow traffic('torrent'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow service('netflix'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('instagram'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') unset quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 19:01:58.599688') end timestamp('2019-01-26 04:01:58.599693')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '90', 'mbps') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 17:39:58.599643') end timestamp('2019-01-26 04:04:58.599680')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('5', 'gb/wk') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 22:38:59.675207') end timestamp('2019-01-26 02:56:59.675212')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('peer2peer') start timestamp('2019-01-25 16:08:59.675181') end timestamp('2019-01-25 21:52:59.675201')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 17:15:59.774520') end timestamp('2019-01-26 03:47:59.774525')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') unset quota('4', 'gb/wk') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 17:22:59.774492') end timestamp('2019-01-26 02:37:59.774514')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') unset quota('6', 'gb/wk') start timestamp('2019-01-25 21:42:00.370908') end timestamp('2019-01-26 03:21:00.370913')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 15:32:00.370899') end timestamp('2019-01-25 20:12:00.370903')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 18:52:00.551311') end timestamp('2019-01-26 03:41:00.551315')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('parental-control') unset quota('4', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 19:02:00.551286') end timestamp('2019-01-26 02:14:00.551305')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('stremio'), protocol('icmp') start timestamp('2019-01-25 23:05:01.687357') end timestamp('2019-01-26 02:52:01.687362')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), protocol('smtp') start timestamp('2019-01-25 15:41:01.687347') end timestamp('2019-01-25 20:32:01.687352')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 22:03:01.876927') end timestamp('2019-01-26 03:41:01.876932')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 15:11:01.876898') end timestamp('2019-01-25 21:18:01.876918')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') set quota('8', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('3', 'gb/wk') allow traffic('torrent'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '60', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('parental-control') set quota('8', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('quic'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('ids') set quota('6', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 17:36:02.817150') end timestamp('2019-01-26 03:32:02.817154')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 18:42:02.817124') end timestamp('2019-01-26 02:55:02.817144')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall') set quota('5', 'gb/wk') block protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('http'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('parental-control') set bandwidth('min', '30', 'mbps') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 17:13:03.130114') end timestamp('2019-01-26 02:52:03.130118')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('ids') unset bandwidth('min', '60', 'mbps') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 19:00:03.130078') end timestamp('2019-01-26 03:31:03.130097')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('https'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set bandwidth('min', '30', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '90', 'mbps') block protocol('smtp'), protocol('udp') start timestamp('2019-01-25 18:23:04.445017') end timestamp('2019-01-26 02:17:04.445022')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 17:32:04.444989') end timestamp('2019-01-26 03:28:04.445011')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('2', 'gb/wk') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 18:18:04.576556') end timestamp('2019-01-26 02:47:04.576560')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') unset quota('5', 'gb/wk') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 19:08:04.576528') end timestamp('2019-01-26 03:27:04.576549')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('4', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '50', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('http'), traffic('streaming') start timestamp('2019-01-25 22:04:05.267882') end timestamp('2019-01-26 02:59:05.267887')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('9', 'gb/wk') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 16:47:05.267853') end timestamp('2019-01-25 20:34:05.267874')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('snmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') block service('vimeo'), service('netflix') start timestamp('2019-01-25 17:47:05.608499') end timestamp('2019-01-26 03:56:05.608504')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') unset bandwidth('min', '40', 'mbps') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 17:14:05.608471') end timestamp('2019-01-26 03:43:05.608493')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 18:09:05.875507') end timestamp('2019-01-26 02:56:05.875512')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 17:40:05.875483') end timestamp('2019-01-26 04:04:05.875501')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('sftp'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer') allow protocol('http'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('sftp'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow protocol('tcp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids') set bandwidth('max', '20', 'mbps') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 22:58:06.543135') end timestamp('2019-01-26 02:58:06.543140')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow protocol('smtp'), service('netflix') start timestamp('2019-01-25 15:54:06.543106') end timestamp('2019-01-25 21:41:06.543127')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow protocol('http'), service('netflix') start timestamp('2019-01-25 21:52:06.694550') end timestamp('2019-01-26 04:05:06.694555')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('dpi'), middlebox('firewall') unset quota('1', 'gb/wk') allow service('instagram'), service('facebook') start timestamp('2019-01-25 16:59:06.694523') end timestamp('2019-01-25 20:17:06.694543')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow service('vimeo'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') unset quota('5', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 17:28:06.848739') end timestamp('2019-01-26 03:07:06.848744')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 18:58:06.848697') end timestamp('2019-01-26 03:45:06.848733')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall') unset quota('3', 'gb/wk') block traffic('peer2peer'), protocol('smtp') start timestamp('2019-01-25 17:23:07.202562') end timestamp('2019-01-26 03:32:07.202567')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') allow protocol('snmp'), service('popcorn-time') start timestamp('2019-01-25 17:40:07.202539') end timestamp('2019-01-26 03:07:07.202556')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('1', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk') allow traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('4', 'gb/wk') block service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '90', 'mbps') block service('stremio'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('ids') set quota('3', 'gb/wk') block protocol('smtp'), service('instagram') start timestamp('2019-01-25 21:38:07.428355') end timestamp('2019-01-26 03:15:07.428359')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 16:22:07.428325') end timestamp('2019-01-25 20:17:07.428348')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 21:57:07.622684') end timestamp('2019-01-26 02:42:07.622690')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi') block service('instagram'), service('youtube') start timestamp('2019-01-25 15:31:07.622657') end timestamp('2019-01-25 20:38:07.622677')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block service('facebook'), service('netflix') start timestamp('2019-01-25 22:21:08.044242') end timestamp('2019-01-26 02:49:08.044247')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow protocol('icmp'), service('netflix') start timestamp('2019-01-25 17:00:08.044216') end timestamp('2019-01-25 20:45:08.044235')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') block protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 22:49:08.062052') end timestamp('2019-01-26 02:10:08.062058')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow protocol('quic'), service('facebook') start timestamp('2019-01-25 15:48:08.061969') end timestamp('2019-01-25 21:04:08.062042')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block protocol('https'), service('facebook') start timestamp('2019-01-25 22:54:08.494165') end timestamp('2019-01-26 03:35:08.494171')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('ids'), middlebox('dpi') unset quota('1', 'gb/wk') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 15:13:08.494063') end timestamp('2019-01-25 22:02:08.494152')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') start timestamp('2019-01-25 21:43:10.679771') end timestamp('2019-01-26 03:10:10.679775')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('2', 'gb/wk') start timestamp('2019-01-25 17:07:10.679744') end timestamp('2019-01-25 20:36:10.679763')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 17:57:11.699309') end timestamp('2019-01-26 03:59:11.699314')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') unset quota('2', 'gb/wk') allow protocol('telnet'), traffic('streaming') start timestamp('2019-01-25 17:13:11.699281') end timestamp('2019-01-26 03:42:11.699302')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 23:04:11.846873') end timestamp('2019-01-26 03:42:11.846877')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 15:59:11.846847') end timestamp('2019-01-25 20:52:11.846866')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk') allow service('bittorrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow service('netflix'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset quota('9', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:56:13.227842') end timestamp('2019-01-26 02:25:13.227846')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control') unset bandwidth('max', '60', 'mbps') allow service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 17:20:13.227813') end timestamp('2019-01-26 02:42:13.227835')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow service('popcorn-time'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('firewall') allow traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow protocol('http'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('snmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('instagram'), service('netflix') start timestamp('2019-01-25 18:34:14.696787') end timestamp('2019-01-26 03:15:14.696792')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') unset bandwidth('max', '40', 'mbps') block protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 18:19:14.696758') end timestamp('2019-01-26 03:26:14.696780')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') unset bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 22:05:16.388170') end timestamp('2019-01-26 02:13:16.388175')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('5', 'gb/wk') block protocol('quic'), service('instagram') start timestamp('2019-01-25 15:28:16.388137') end timestamp('2019-01-25 21:53:16.388163')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 18:47:16.454459') end timestamp('2019-01-26 04:04:16.454463')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('3', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 19:03:16.454431') end timestamp('2019-01-26 02:54:16.454452')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset quota('9', 'gb/wk') start timestamp('2019-01-25 17:45:16.522698') end timestamp('2019-01-26 03:20:16.522702')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') unset quota('2', 'gb/wk') start timestamp('2019-01-25 18:17:16.522668') end timestamp('2019-01-26 03:32:16.522691')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('tcp'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('https'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set quota('6', 'gb/wk') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset quota('1', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset quota('8', 'gb/wk') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 18:07:19.128242') end timestamp('2019-01-26 02:47:19.128247')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 18:09:19.128209') end timestamp('2019-01-26 02:49:19.128236')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('popcorn-time'), service('netflix') start timestamp('2019-01-25 21:55:19.274165') end timestamp('2019-01-26 03:20:19.274169')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 16:24:19.274140') end timestamp('2019-01-25 21:32:19.274158')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') allow protocol('smtp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') block service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 21:33:20.232174') end timestamp('2019-01-26 02:23:20.232181')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 15:29:20.232148') end timestamp('2019-01-25 21:24:20.232166')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids') set quota('5', 'gb/wk') block service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('social-media'), service('youtube') start timestamp('2019-01-25 18:16:20.520008') end timestamp('2019-01-26 03:19:20.520013')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('snmp'), traffic('social-media') start timestamp('2019-01-25 17:19:20.519963') end timestamp('2019-01-26 02:57:20.520000')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 22:18:20.767981') end timestamp('2019-01-26 03:22:20.767985')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 15:25:20.767957') end timestamp('2019-01-25 21:54:20.767974')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('ids') block protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 23:04:21.012139') end timestamp('2019-01-26 02:52:21.012143')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('dpi') allow protocol('quic'), service('bittorrent') start timestamp('2019-01-25 15:14:21.012112') end timestamp('2019-01-25 20:15:21.012132')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') start timestamp('2019-01-25 22:18:21.978893') end timestamp('2019-01-26 02:21:21.978898')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') start timestamp('2019-01-25 16:54:21.978863') end timestamp('2019-01-25 20:16:21.978886')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('max', '70', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 17:24:23.719961') end timestamp('2019-01-26 03:55:23.719965')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('tcp'), protocol('quic') start timestamp('2019-01-25 18:19:23.719935') end timestamp('2019-01-26 04:06:23.719955')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 18:28:23.753320') end timestamp('2019-01-26 03:17:23.753324')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 18:44:23.753284') end timestamp('2019-01-26 02:49:23.753312')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 21:58:24.171846') end timestamp('2019-01-26 02:22:24.171851')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('youtube'), protocol('udp') start timestamp('2019-01-25 16:58:24.171820') end timestamp('2019-01-25 21:20:24.171839')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow protocol('snmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset quota('7', 'gb/wk') block protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 17:24:25.732697') end timestamp('2019-01-26 02:26:25.732701')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 17:19:25.732671') end timestamp('2019-01-26 02:16:25.732690')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set quota('7', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('1', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('ids') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 21:38:27.016717') end timestamp('2019-01-26 04:09:27.016721')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow service('stremio') start timestamp('2019-01-25 16:35:27.016708') end timestamp('2019-01-25 20:35:27.016712')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('sftp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('snmp'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 19:08:28.861103') end timestamp('2019-01-26 04:08:28.861108')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 19:03:28.861076') end timestamp('2019-01-26 04:08:28.861097')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), service('facebook') start timestamp('2019-01-25 22:49:29.740789') end timestamp('2019-01-26 02:27:29.740794')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids') set quota('4', 'gb/wk') allow service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 15:37:29.740763') end timestamp('2019-01-25 20:44:29.740782')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('sftp'), traffic('torrent') start timestamp('2019-01-25 18:09:31.697267') end timestamp('2019-01-26 02:32:31.697272')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 18:25:31.697245') end timestamp('2019-01-26 02:53:31.697262')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('tcp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') unset quota('4', 'gb/wk') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 22:40:32.225242') end timestamp('2019-01-26 02:26:32.225248')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('telnet'), service('netflix') start timestamp('2019-01-25 15:25:32.225170') end timestamp('2019-01-25 21:46:32.225232')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block service('vimeo'), protocol('udp') start timestamp('2019-01-25 22:31:32.697991') end timestamp('2019-01-26 03:09:32.697996')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 15:56:32.697960') end timestamp('2019-01-25 20:27:32.697983')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('sftp'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set quota('7', 'gb/wk') block service('stremio'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('4', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow service('youtube'), service('facebook') start timestamp('2019-01-25 22:50:33.666686') end timestamp('2019-01-26 03:06:33.666690')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 15:36:33.666659') end timestamp('2019-01-25 21:21:33.666679')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('telnet'), traffic('streaming') start timestamp('2019-01-25 18:43:33.770395') end timestamp('2019-01-26 03:34:33.770400')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') unset bandwidth('min', '40', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 18:44:33.770311') end timestamp('2019-01-26 03:43:33.770386')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('https'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi') set quota('1', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 21:54:37.614724') end timestamp('2019-01-26 04:01:37.614729')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('sftp') start timestamp('2019-01-25 16:21:37.614700') end timestamp('2019-01-25 21:19:37.614718')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset quota('2', 'gb/wk') start timestamp('2019-01-25 17:18:37.873357') end timestamp('2019-01-26 03:43:37.873362')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') start timestamp('2019-01-25 17:48:37.873329') end timestamp('2019-01-26 02:12:37.873350')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') unset quota('7', 'gb/wk') block service('vimeo'), service('stremio') start timestamp('2019-01-25 17:38:37.907618') end timestamp('2019-01-26 03:53:37.907623')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') unset quota('1', 'gb/wk') allow service('stremio') start timestamp('2019-01-25 17:30:37.907583') end timestamp('2019-01-26 03:04:37.907611')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') block traffic('social-media') start timestamp('2019-01-25 18:15:37.961365') end timestamp('2019-01-26 02:31:37.961370')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), service('facebook') start timestamp('2019-01-25 18:24:37.961332') end timestamp('2019-01-26 03:15:37.961358')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('sftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('smtp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('7', 'gb/wk') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 17:46:38.264387') end timestamp('2019-01-26 02:31:38.264395')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 18:49:38.264253') end timestamp('2019-01-26 03:54:38.264374')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk') block protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('6', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer') unset quota('4', 'gb/wk') block traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 18:12:38.900323') end timestamp('2019-01-26 02:21:38.900327')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('instagram'), service('facebook') start timestamp('2019-01-25 18:47:38.900296') end timestamp('2019-01-26 03:45:38.900317')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('2', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('facebook'), service('popcorn-time') start timestamp('2019-01-25 22:18:39.144486') end timestamp('2019-01-26 02:54:39.144491')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 15:30:39.144459') end timestamp('2019-01-25 21:51:39.144479')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 19:05:39.179845') end timestamp('2019-01-26 02:50:39.179851')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '60', 'mbps') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 17:13:39.179763') end timestamp('2019-01-26 02:10:39.179836')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block protocol('http'), service('facebook') start timestamp('2019-01-25 22:44:39.180107') end timestamp('2019-01-26 03:14:39.180128')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 15:09:39.180083') end timestamp('2019-01-25 21:27:39.180096')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('load-balancer'), middlebox('dpi') unset quota('1', 'gb/wk') allow service('bittorrent'), service('netflix') start timestamp('2019-01-25 21:47:39.294097') end timestamp('2019-01-26 03:33:39.294102')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('stremio'), service('instagram') start timestamp('2019-01-25 17:02:39.294070') end timestamp('2019-01-25 21:14:39.294091')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '10', 'mbps') block service('stremio'), protocol('udp') start timestamp('2019-01-25 17:42:39.456531') end timestamp('2019-01-26 02:50:39.456536')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 17:09:39.456506') end timestamp('2019-01-26 03:00:39.456525')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') allow traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 22:36:39.456723') end timestamp('2019-01-26 03:05:39.456728')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') allow protocol('http'), traffic('streaming') start timestamp('2019-01-25 15:57:39.456708') end timestamp('2019-01-25 20:21:39.456716')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') allow protocol('telnet'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 18:59:40.041318') end timestamp('2019-01-26 03:21:40.041323')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 18:43:40.041293') end timestamp('2019-01-26 02:39:40.041312')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('6', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk') allow protocol('sftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 17:09:40.385457') end timestamp('2019-01-26 03:12:40.385462')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 17:50:40.385432') end timestamp('2019-01-26 02:27:40.385451')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set quota('9', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '60', 'mbps') block protocol('quic'), service('stremio') start timestamp('2019-01-25 17:23:41.728822') end timestamp('2019-01-26 02:33:41.728827')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 18:31:41.728797') end timestamp('2019-01-26 03:10:41.728816')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set bandwidth('min', '10', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '70', 'mbps') allow service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 21:19:43.724678') end timestamp('2019-01-26 02:56:43.724696')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 16:58:43.724647') end timestamp('2019-01-25 20:49:43.724669')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow protocol('sftp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') unset quota('9', 'gb/wk') block service('vimeo'), protocol('http') start timestamp('2019-01-25 21:37:45.566337') end timestamp('2019-01-26 03:00:45.566342')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 16:12:45.566247') end timestamp('2019-01-25 21:28:45.566324')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('quic'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('bittorrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), protocol('sftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('2', 'gb/wk') block service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 21:57:49.182232') end timestamp('2019-01-26 02:29:49.182237')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 17:04:49.182204') end timestamp('2019-01-25 21:35:49.182225')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('load-balancer') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('2', 'gb/wk') allow service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block service('vimeo'), service('stremio') start timestamp('2019-01-25 17:13:50.696397') end timestamp('2019-01-26 04:06:50.696401')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') unset quota('9', 'gb/wk') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 18:00:50.696337') end timestamp('2019-01-26 03:11:50.696389')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('icmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 21:44:51.108652') end timestamp('2019-01-26 02:14:51.108657')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') start timestamp('2019-01-25 15:25:51.108624') end timestamp('2019-01-25 21:28:51.108644')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') unset bandwidth('max', '60', 'mbps') block service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 21:31:51.341612') end timestamp('2019-01-26 02:27:51.341617')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('8', 'gb/wk') allow protocol('ftp'), service('bittorrent') start timestamp('2019-01-25 15:12:51.341524') end timestamp('2019-01-25 20:20:51.341601')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('firewall') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('snmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') unset bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 17:36:52.081292') end timestamp('2019-01-26 04:00:52.081298')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 17:21:52.081176') end timestamp('2019-01-26 03:17:52.081282')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block service('youtube'), service('bittorrent') start timestamp('2019-01-25 22:43:52.505198') end timestamp('2019-01-26 02:27:52.505203')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 17:03:52.505171') end timestamp('2019-01-25 20:18:52.505191')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') block service('bittorrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow protocol('ftp') start timestamp('2019-01-25 21:49:52.539901') end timestamp('2019-01-26 02:52:52.539907')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 16:22:52.539844') end timestamp('2019-01-25 20:26:52.539892')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set quota('6', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('1', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('tcp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 21:50:52.894289') end timestamp('2019-01-26 03:35:52.894293')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '60', 'mbps') allow protocol('http'), service('bittorrent') start timestamp('2019-01-25 15:58:52.894279') end timestamp('2019-01-25 20:59:52.894284')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('snmp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('5', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 17:59:54.219539') end timestamp('2019-01-26 03:03:54.219544')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') unset quota('8', 'gb/wk') allow service('vimeo'), protocol('smtp') start timestamp('2019-01-25 19:02:54.219465') end timestamp('2019-01-26 03:12:54.219529')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('4', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 22:47:54.984808') end timestamp('2019-01-26 02:52:54.984813')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 15:22:54.984781') end timestamp('2019-01-25 21:37:54.984801')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('torrent'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') block protocol('http'), service('instagram') start timestamp('2019-01-25 21:17:55.989295') end timestamp('2019-01-26 03:01:55.989301')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 16:04:55.989285') end timestamp('2019-01-25 21:07:55.989290')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') block service('vimeo'), protocol('smtp') start timestamp('2019-01-25 21:09:56.253682') end timestamp('2019-01-26 02:35:56.253687')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('parental-control'), middlebox('ids') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 15:42:56.253655') end timestamp('2019-01-25 20:36:56.253675')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 23:05:56.272029') end timestamp('2019-01-26 04:04:56.272035')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('ids') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 15:37:56.272019') end timestamp('2019-01-25 21:57:56.272024')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('sftp'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 21:57:57.126104') end timestamp('2019-01-26 03:29:57.126110')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 15:12:57.126086') end timestamp('2019-01-25 20:13:57.126091')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') start timestamp('2019-01-25 21:54:57.126240') end timestamp('2019-01-26 02:29:57.126245')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 16:20:57.126216') end timestamp('2019-01-25 20:32:57.126234')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('http'), service('bittorrent') start timestamp('2019-01-25 18:30:57.633348') end timestamp('2019-01-26 03:48:57.633353')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 19:02:57.633318') end timestamp('2019-01-26 03:03:57.633341')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('2', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('telnet'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('parental-control'), middlebox('firewall') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow protocol('tcp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('ids'), middlebox('firewall') unset quota('3', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 22:40:57.889916') end timestamp('2019-01-26 03:57:57.889920')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('dpi'), middlebox('load-balancer') allow service('instagram') start timestamp('2019-01-25 15:23:57.889883') end timestamp('2019-01-25 20:16:57.889909')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('https'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set quota('4', 'gb/wk') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 17:31:58.249514') end timestamp('2019-01-26 04:04:58.249519')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '80', 'mbps') allow service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 18:12:58.249489') end timestamp('2019-01-26 03:05:58.249508')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') set quota('2', 'gb/wk') block service('vimeo'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block protocol('icmp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('smtp'), protocol('udp') start timestamp('2019-01-25 21:44:58.705805') end timestamp('2019-01-26 02:24:58.705820')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') allow protocol('udp'), service('youtube') start timestamp('2019-01-25 16:34:58.705760') end timestamp('2019-01-25 20:26:58.705797')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow protocol('ftp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset quota('9', 'gb/wk') allow service('instagram'), traffic('social-media') start timestamp('2019-01-25 21:09:58.843201') end timestamp('2019-01-26 02:15:58.843206')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('2', 'gb/wk') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 15:48:58.843170') end timestamp('2019-01-25 20:16:58.843194')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('ids') set quota('3', 'gb/wk') block service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') start timestamp('2019-01-25 22:25:59.263615') end timestamp('2019-01-26 02:56:59.263627')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 16:50:59.263523') end timestamp('2019-01-25 21:44:59.263593')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('load-balancer') unset quota('2', 'gb/wk') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 18:26:59.655429') end timestamp('2019-01-26 02:30:59.655434')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('ids') unset bandwidth('min', '20', 'mbps') allow protocol('ftp'), traffic('streaming') start timestamp('2019-01-25 17:33:59.655401') end timestamp('2019-01-26 03:21:59.655423')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 17:11:59.690711') end timestamp('2019-01-26 02:37:59.690717')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset quota('9', 'gb/wk') start timestamp('2019-01-25 17:57:59.690615') end timestamp('2019-01-26 03:43:59.690702')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('ftp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('firewall') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 21:47:00.429597') end timestamp('2019-01-26 02:42:00.429602')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('firewall'), middlebox('ids') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 16:03:00.429570') end timestamp('2019-01-25 20:11:00.429590')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 21:42:01.222201') end timestamp('2019-01-26 03:55:01.222206')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('parental-control') allow service('instagram'), service('youtube') start timestamp('2019-01-25 15:56:01.222176') end timestamp('2019-01-25 20:28:01.222194')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('1', 'gb/wk') allow traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 21:48:01.331279') end timestamp('2019-01-26 03:47:01.331285')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 15:14:01.331190') end timestamp('2019-01-25 20:13:01.331266')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') set quota('5', 'gb/wk') block service('youtube'), protocol('ftp') start timestamp('2019-01-25 18:51:01.399390') end timestamp('2019-01-26 03:01:01.399395')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('3', 'gb/wk') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 18:24:01.399360') end timestamp('2019-01-26 02:31:01.399383')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('8', 'gb/wk') block service('instagram'), protocol('udp') start timestamp('2019-01-25 18:22:01.532656') end timestamp('2019-01-26 02:50:01.532660')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset quota('5', 'gb/wk') allow protocol('https'), service('popcorn-time') start timestamp('2019-01-25 17:44:01.532627') end timestamp('2019-01-26 02:26:01.532649')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 21:27:02.465721') end timestamp('2019-01-26 02:42:02.465726')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('5', 'gb/wk') start timestamp('2019-01-25 16:31:02.465693') end timestamp('2019-01-25 20:12:02.465714')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 18:42:02.883021') end timestamp('2019-01-26 02:36:02.883028')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 18:21:02.882911') end timestamp('2019-01-26 03:14:02.883010')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow protocol('quic'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('firewall'), middlebox('load-balancer') unset quota('7', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('parental-control') set quota('4', 'gb/wk') block protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('smtp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') allow traffic('torrent'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids') set quota('7', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') block protocol('icmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('vimeo'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 18:07:04.956295') end timestamp('2019-01-26 03:35:04.956300')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 18:49:04.956270') end timestamp('2019-01-26 03:56:04.956289')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') set bandwidth('min', '70', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('7', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('sftp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') remove middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') start timestamp('2019-01-25 21:49:06.702089') end timestamp('2019-01-26 03:37:06.702095')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('parental-control'), middlebox('load-balancer') unset quota('5', 'gb/wk') start timestamp('2019-01-25 16:33:06.702041') end timestamp('2019-01-25 21:24:06.702082')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi') set quota('4', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('sftp'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') unset quota('5', 'gb/wk') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 19:04:07.492000') end timestamp('2019-01-26 02:54:07.492005')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control') set quota('4', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 19:00:07.491892') end timestamp('2019-01-26 02:28:07.491989')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('ftp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('snmp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow protocol('http'), service('facebook') start timestamp('2019-01-25 17:46:07.830538') end timestamp('2019-01-26 02:57:07.830543')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '50', 'mbps') allow protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 18:02:07.830507') end timestamp('2019-01-26 02:14:07.830531')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('load-balancer') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow service('vimeo'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids') set quota('5', 'gb/wk') allow traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('min', '30', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('amazon-prime')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('stremio'), service('facebook') start timestamp('2019-01-25 22:44:11.087014') end timestamp('2019-01-26 03:36:11.087027')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 16:07:11.086886') end timestamp('2019-01-25 20:27:11.086987')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 22:25:11.780623') end timestamp('2019-01-26 03:37:11.780628')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') start timestamp('2019-01-25 15:26:11.780579') end timestamp('2019-01-25 22:08:11.780614')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('udp'), traffic('social-media') start timestamp('2019-01-25 17:10:12.595826') end timestamp('2019-01-26 03:42:12.595831')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 18:02:12.595798') end timestamp('2019-01-26 02:11:12.595819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('https'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('dpi') set quota('6', 'gb/wk') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk') allow service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('https'), protocol('quic') start timestamp('2019-01-25 18:23:14.402725') end timestamp('2019-01-26 02:24:14.402730')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('quic'), protocol('udp') start timestamp('2019-01-25 17:30:14.402691') end timestamp('2019-01-26 03:41:14.402717')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('ids') set quota('7', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('firewall') set quota('4', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') block protocol('http'), service('netflix') start timestamp('2019-01-25 18:37:15.187688') end timestamp('2019-01-26 03:35:15.187693')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('netflix') start timestamp('2019-01-25 17:26:15.187621') end timestamp('2019-01-26 02:15:15.187681')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow protocol('telnet'), protocol('http') start timestamp('2019-01-25 21:41:16.053921') end timestamp('2019-01-26 04:09:16.053926')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow protocol('icmp'), service('instagram') start timestamp('2019-01-25 15:59:16.053893') end timestamp('2019-01-25 20:23:16.053914')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('amazon-prime')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('facebook'), service('youtube') start timestamp('2019-01-25 18:53:16.622648') end timestamp('2019-01-26 02:31:16.622653')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset quota('2', 'gb/wk') allow traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 18:56:16.622620') end timestamp('2019-01-26 04:07:16.622642')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 18:39:16.830060') end timestamp('2019-01-26 03:19:16.830065')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('parental-control') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 19:02:16.830010') end timestamp('2019-01-26 02:51:16.830053')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('5', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('quic'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow protocol('icmp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('youtube'), service('bittorrent') start timestamp('2019-01-25 22:47:17.118780') end timestamp('2019-01-26 02:37:17.118785')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 15:43:17.118723') end timestamp('2019-01-25 21:48:17.118773')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer') block service('instagram'), protocol('icmp') start timestamp('2019-01-25 21:52:17.465096') end timestamp('2019-01-26 03:15:17.465101')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('firewall') block service('facebook'), protocol('ftp') start timestamp('2019-01-25 16:43:17.465087') end timestamp('2019-01-25 21:34:17.465091')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('max', '40', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps') allow service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 22:55:18.090741') end timestamp('2019-01-26 03:09:18.090745')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 15:49:18.090731') end timestamp('2019-01-25 20:51:18.090736')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 22:41:18.321003') end timestamp('2019-01-26 03:36:18.321008')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 15:45:18.320972') end timestamp('2019-01-25 20:29:18.320994')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 22:40:18.746893') end timestamp('2019-01-26 04:02:18.746898')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 16:54:18.746864') end timestamp('2019-01-25 21:06:18.746885')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('8', 'gb/wk') block service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow service('stremio'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('7', 'gb/wk') block protocol('udp'), protocol('ftp') start timestamp('2019-01-25 22:10:19.084441') end timestamp('2019-01-26 02:54:19.084445')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('5', 'gb/wk') allow protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 17:05:19.084432') end timestamp('2019-01-25 20:28:19.084436')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 21:43:19.233623') end timestamp('2019-01-26 03:16:19.233628')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 15:45:19.233577') end timestamp('2019-01-25 20:57:19.233616')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 22:45:19.233735') end timestamp('2019-01-26 03:14:19.233740')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 17:05:19.233721') end timestamp('2019-01-25 21:15:19.233729')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 22:02:19.549063') end timestamp('2019-01-26 03:07:19.549068')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 16:37:19.549035') end timestamp('2019-01-25 21:14:19.549055')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset bandwidth('min', '50', 'mbps') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 21:15:19.694507') end timestamp('2019-01-26 03:40:19.694512')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 15:26:19.694476') end timestamp('2019-01-25 20:30:19.694499')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 17:56:19.853826') end timestamp('2019-01-26 04:01:19.853831')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 17:52:19.853788') end timestamp('2019-01-26 02:44:19.853819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('instagram'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids') set quota('2', 'gb/wk') block protocol('telnet'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('8', 'gb/wk') allow protocol('http'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer') allow protocol('snmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids') allow service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') unset quota('9', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('dpi') unset bandwidth('min', '20', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('parental-control') set quota('6', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set quota('9', 'gb/wk') allow service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '70', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('dpi'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('7', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 18:58:23.255847') end timestamp('2019-01-26 03:48:23.255858')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') unset quota('6', 'gb/wk') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 17:36:23.255774') end timestamp('2019-01-26 02:57:23.255828')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') block protocol('udp'), service('netflix') start timestamp('2019-01-25 21:25:23.924509') end timestamp('2019-01-26 02:42:23.924515')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('youtube') start timestamp('2019-01-25 15:27:23.924470') end timestamp('2019-01-25 21:05:23.924500')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('ftp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall') set quota('3', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 18:27:26.889632') end timestamp('2019-01-26 03:04:26.889639')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 18:48:26.889588') end timestamp('2019-01-26 02:25:26.889622')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('3', 'gb/wk') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 22:13:26.961001') end timestamp('2019-01-26 04:00:26.961006')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('http'), protocol('icmp') start timestamp('2019-01-25 16:56:26.960971') end timestamp('2019-01-25 21:12:26.960993')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set quota('6', 'gb/wk') block service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 17:29:27.635540') end timestamp('2019-01-26 03:06:27.635545')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 17:51:27.635508') end timestamp('2019-01-26 03:37:27.635533')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('sftp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset quota('2', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('5', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids') set bandwidth('min', '80', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall') set quota('3', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set quota('2', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset quota('4', 'gb/wk') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('load-balancer') unset quota('3', 'gb/wk') block service('stremio'), protocol('icmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 18:52:28.839981') end timestamp('2019-01-26 02:59:28.839986')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow traffic('torrent') start timestamp('2019-01-25 18:10:28.839957') end timestamp('2019-01-26 02:12:28.839975')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('amazon-prime'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 21:58:29.307063') end timestamp('2019-01-26 03:32:29.307068')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 15:44:29.307036') end timestamp('2019-01-25 20:18:29.307056')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 18:01:29.454908') end timestamp('2019-01-26 03:13:29.454913')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '60', 'mbps') block service('vimeo'), protocol('https') start timestamp('2019-01-25 18:08:29.454879') end timestamp('2019-01-26 02:19:29.454901')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 18:08:29.783175') end timestamp('2019-01-26 02:20:29.783180')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') allow service('youtube'), service('netflix') start timestamp('2019-01-25 19:09:29.783144') end timestamp('2019-01-26 03:03:29.783168')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('6', 'gb/wk') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 21:15:31.400442') end timestamp('2019-01-26 03:55:31.400446')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 16:16:31.400432') end timestamp('2019-01-25 20:59:31.400437')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') start timestamp('2019-01-25 17:28:32.430496') end timestamp('2019-01-26 03:46:32.430501')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') start timestamp('2019-01-25 17:57:32.430468') end timestamp('2019-01-26 03:51:32.430489')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids') set quota('9', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow protocol('sftp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('max', '90', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps') allow traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 22:36:33.080265') end timestamp('2019-01-26 03:23:33.080269')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 15:59:33.080256') end timestamp('2019-01-25 21:23:33.080261')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('dpi') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('parental-control') set quota('4', 'gb/wk') allow service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 23:02:33.661148') end timestamp('2019-01-26 02:11:33.661153')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 15:53:33.661119') end timestamp('2019-01-25 20:46:33.661140')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block service('stremio'), service('popcorn-time') start timestamp('2019-01-25 21:11:33.661305') end timestamp('2019-01-26 02:38:33.661311')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 16:24:33.661288') end timestamp('2019-01-25 20:27:33.661298')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall') set bandwidth('min', '20', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 22:40:34.894308') end timestamp('2019-01-26 03:12:34.894313')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 16:41:34.894285') end timestamp('2019-01-25 21:40:34.894302')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '10', 'mbps') block service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block protocol('sftp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set quota('1', 'gb/wk') block protocol('telnet'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') unset bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('load-balancer') unset quota('2', 'gb/wk') allow traffic('streaming'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '30', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('max', '50', 'mbps') allow protocol('telnet'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 17:50:37.523640') end timestamp('2019-01-26 03:42:37.523645')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('facebook'), service('youtube') start timestamp('2019-01-25 18:56:37.523610') end timestamp('2019-01-26 02:26:37.523633')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('sftp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('http'), protocol('snmp') start timestamp('2019-01-25 18:24:38.090843') end timestamp('2019-01-26 02:37:38.090849')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 17:35:38.090805') end timestamp('2019-01-26 03:27:38.090834')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 21:56:38.844665') end timestamp('2019-01-26 04:08:38.844675')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('stremio'), service('netflix') start timestamp('2019-01-25 16:56:38.844608') end timestamp('2019-01-25 21:45:38.844647')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 22:10:39.438069') end timestamp('2019-01-26 04:02:39.438076')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('dpi') start timestamp('2019-01-25 16:49:39.438036') end timestamp('2019-01-25 21:29:39.438061')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 23:08:40.078953') end timestamp('2019-01-26 02:43:40.078959')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 16:56:40.078920') end timestamp('2019-01-25 21:29:40.078944')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('http'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 18:19:41.082980') end timestamp('2019-01-26 03:44:41.082985')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 17:27:41.082951') end timestamp('2019-01-26 03:57:41.082973')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), service('youtube') start timestamp('2019-01-25 22:31:41.502254') end timestamp('2019-01-26 03:41:41.502258')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 16:41:41.502245') end timestamp('2019-01-25 20:21:41.502249')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block protocol('sftp'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('9', 'gb/wk') block protocol('telnet'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 17:48:42.119419') end timestamp('2019-01-26 03:14:42.119426')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 18:47:42.119313') end timestamp('2019-01-26 04:06:42.119408')", 
            "type": "time"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 68, 
                "hierarchical": 65, 
                "negation": 53, 
                "qos": 69, 
                "synonym": 52, 
                "time": 64
            }, 
            "count": 371
        }, 
        "entailment": {
            "byType": {
                "domain": 40, 
                "hierarchical": 51, 
                "negation": 49, 
                "non_coreferent": 59, 
                "qos": 53, 
                "synonym": 79, 
                "time": 48
            }, 
            "count": 379
        }
    }
}