{
    "content": [
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('ids') set quota('5', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('udp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.174') remove middlebox('load-balancer'), middlebox('firewall') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.196') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('https'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.192') remove middlebox('firewall'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') remove middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('instagram'), service('bittorrent') start hour('9:19') end hour('17:48')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow traffic('torrent') start hour('9:5') end hour('17:53')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block service('amazon-prime'), service('netflix') start hour('12:57') end hour('17:48')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow service('amazon-prime'), traffic('streaming') start hour('7:58') end hour('12:53')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set quota('2', 'gb/wk') block service('bittorrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.85') remove middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research labs') add middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') start hour('14:20') end hour('19:16')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') start hour('7:34') end hour('11:39')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('6', 'gb/wk') allow service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.151') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('dpi'), middlebox('parental-control') block service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('ids') unset quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming') start hour('13:49') end hour('17:38')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset quota('7', 'gb/wk') allow service('facebook'), service('bittorrent') start hour('8:12') end hour('12:10')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') block service('instagram'), traffic('streaming') start hour('13:2') end hour('19:31')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.108') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('9', 'gb/wk') allow service('vimeo'), protocol('snmp') start hour('7:9') end hour('12:28')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.120') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') start hour('9:19') end hour('18:2')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.125') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') start hour('10:30') end hour('17:34')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.202') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow protocol('snmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') remove middlebox('ids') set quota('1', 'gb/wk') block service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') allow service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('http'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.73') remove middlebox('firewall') set quota('4', 'gb/wk') block service('vimeo'), protocol('ftp') start hour('10:27') end hour('17:40')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('streaming') start hour('8:47') end hour('17:54')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.129') set bandwidth('min', '70', 'mbps') allow service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.117') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('load-balancer') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.62') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow protocol('tcp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('https'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.196') set quota('3', 'gb/wk') block service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('7', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('sftp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('amazon-prime'), service('youtube') start hour('13:48') end hour('19:5')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('torrent'), service('popcorn-time') start hour('8:21') end hour('12:43')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('smtp'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') start hour('13:8') end hour('19:7')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi') start hour('6:51') end hour('12:54')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.64') set bandwidth('min', '90', 'mbps') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') set bandwidth('max', '30', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') set quota('2', 'gb/wk') block service('amazon-prime'), protocol('telnet') start hour('14:6') end hour('19:0')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block service('vimeo'), protocol('smtp') start hour('6:38') end hour('13:24')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') block service('amazon-prime'), protocol('http') start hour('14:1') end hour('18:0')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') allow protocol('http'), traffic('social-media') start hour('7:20') end hour('11:56')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('udp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') block protocol('smtp'), service('netflix') start hour('12:49') end hour('18:6')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') allow protocol('tcp'), service('popcorn-time') start hour('6:54') end hour('11:34')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block protocol('smtp'), protocol('udp') start hour('13:35') end hour('18:45')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow protocol('quic'), service('stremio') start hour('8:28') end hour('12:14')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research laboratories') set bandwidth('max', '20', 'mbps') block service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('7', 'gb/wk') block service('popcorn-time'), service('bittorrent') start hour('10:5') end hour('19:0')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '20', 'mbps') allow traffic('social-media'), service('bittorrent') start hour('9:40') end hour('18:32')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.123') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('snmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.194') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') add middlebox('load-balancer'), middlebox('parental-control') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') start hour('13:0') end hour('18:48')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start hour('7:7') end hour('12:32')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.174') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow service('instagram'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), protocol('udp') start hour('14:6') end hour('18:47')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow traffic('peer2peer'), service('instagram') start hour('7:55') end hour('12:58')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.146') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.101') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') start hour('8:54') end hour('17:48')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') start hour('8:51') end hour('19:3')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.117') set quota('2', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.122') set quota('9', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start hour('12:49') end hour('18:55')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start hour('7:10') end hour('11:45')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') start hour('13:18') end hour('17:35')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') start hour('7:49') end hour('12:31')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') block service('facebook'), service('netflix') start hour('13:47') end hour('19:31')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') allow service('stremio'), service('netflix') start hour('6:47') end hour('13:14')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') add middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('sftp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.185') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.113') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.115') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.176') remove middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 6, 
                "hierarchical": 6, 
                "negation": 10, 
                "path": 0, 
                "qos": 8, 
                "synonym": 2, 
                "time": 5
            }, 
            "count": 37
        }, 
        "entailment": {
            "byType": {
                "domain": 8, 
                "hierarchical": 13, 
                "negation": 4, 
                "path": 14, 
                "qos": 5, 
                "synonym": 10, 
                "time": 9
            }, 
            "count": 63
        }
    }
}