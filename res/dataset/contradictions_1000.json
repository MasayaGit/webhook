{
    "content": [
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') start hour('22:33') end hour('3:26')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') start hour('16:56') end hour('21:0')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block service('vimeo'), protocol('udp') start hour('22:36') end hour('2:43')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') allow traffic('peer2peer'), service('netflix') start hour('15:48') end hour('21:42')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('min', '70', 'mbps') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('firewall') unset bandwidth('max', '70', 'mbps') block service('instagram'), traffic('streaming') start hour('17:24') end hour('3:50')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('dpi') unset quota('6', 'gb/wk') allow traffic('social-media'), service('bittorrent') start hour('18:0') end hour('2:4')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') block protocol('quic'), service('popcorn-time') start hour('21:33') end hour('4:2')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow traffic('peer2peer'), protocol('icmp') start hour('15:41') end hour('20:21')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('smtp'), service('youtube') start hour('18:4') end hour('3:52')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.106') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('6', 'gb/wk') block service('stremio'), protocol('ftp') start hour('18:39') end hour('2:54')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids') set quota('5', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.181') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), service('instagram') start hour('22:20') end hour('2:11')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('popcorn-time'), service('netflix') start hour('16:19') end hour('20:36')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.99') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.102') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('laboratories') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('snmp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('smtp'), service('netflix') start hour('18:48') end hour('2:41')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('smtp') start hour('18:58') end hour('3:42')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '80', 'mbps') block traffic('peer2peer'), protocol('sftp') start hour('21:51') end hour('2:8')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('udp') start hour('16:29') end hour('20:7')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research laboratories') add middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow protocol('icmp'), service('netflix') start hour('18:39') end hour('3:54')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('sftp') start hour('17:3') end hour('2:47')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('research laboratories') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('amazon-prime'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') start hour('21:21') end hour('2:52')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') start hour('16:32') end hour('20:29')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('2', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.143') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start hour('18:9') end hour('2:59')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.148') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('facebook'), service('netflix') start hour('18:8') end hour('2:20')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow service('amazon-prime'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.108') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('dpi') allow protocol('https'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') start hour('22:54') end hour('2:49')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') start hour('16:11') end hour('20:27')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall') allow service('vimeo'), service('instagram') start hour('21:58') end hour('3:20')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow traffic('peer2peer'), traffic('streaming') start hour('16:42') end hour('20:57')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block protocol('https'), service('youtube') start hour('18:56') end hour('2:57')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.191') add middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), traffic('streaming') start hour('19:2') end hour('3:44')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), protocol('smtp')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '40', 'mbps') block traffic('streaming') start hour('22:56') end hour('3:44')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.121') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('1', 'gb/wk') allow protocol('ftp'), traffic('streaming') start hour('16:33') end hour('20:7')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') unset bandwidth('min', '70', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.151') set quota('8', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') set bandwidth('max', '10', 'mbps') block protocol('https'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.203') remove middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.174') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.145') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow protocol('quic'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('icmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi') set quota('1', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.72') remove middlebox('parental-control'), middlebox('dpi') unset quota('5', 'gb/wk') block service('youtube'), traffic('streaming') start hour('18:33') end hour('3:36')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('bittorrent') start hour('17:15') end hour('2:40')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids') unset bandwidth('min', '10', 'mbps') allow service('vimeo'), protocol('telnet') start hour('17:54') end hour('2:28')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '80', 'mbps') block service('facebook'), service('bittorrent') start hour('18:58') end hour('3:0')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') start hour('21:5') end hour('2:43')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.95') add middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') start hour('16:31') end hour('20:36')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.150') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') allow service('popcorn-time'), traffic('streaming') start hour('17:48') end hour('3:24')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') unset quota('8', 'gb/wk') block protocol('telnet'), service('instagram') start hour('19:0') end hour('3:1')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.157') set quota('1', 'gb/wk') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') set quota('9', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '80', 'mbps') start hour('21:55') end hour('3:45')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') start hour('16:58') end hour('21:24')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('firewall') set quota('7', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('ids') set bandwidth('min', '30', 'mbps') allow protocol('icmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.107') remove middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '40', 'mbps') block traffic('peer2peer'), service('youtube') start hour('22:2') end hour('3:55')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('youtube') start hour('15:15') end hour('20:42')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.99') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.98') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.171') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.175') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('ftp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.122') add middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('quic'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('torrent'), service('bittorrent') start hour('18:16') end hour('2:36')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') unset quota('3', 'gb/wk') allow service('vimeo'), traffic('torrent') start hour('18:21') end hour('2:47')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('snmp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.125') set quota('5', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') set quota('2', 'gb/wk') allow protocol('udp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.199') add middlebox('firewall') set quota('7', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') start hour('21:29') end hour('2:43')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') start hour('15:38') end hour('20:59')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('3', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block protocol('quic'), protocol('https') start hour('21:37') end hour('2:20')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow service('youtube'), traffic('streaming') start hour('15:29') end hour('20:33')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.173') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.168') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('icmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.117') add middlebox('parental-control') allow protocol('telnet'), protocol('http') start hour('21:49') end hour('2:32')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), protocol('udp') start hour('17:2') end hour('20:20')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('6', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('9', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.112') add middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.73') remove middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('torrent'), service('facebook') start hour('21:32') end hour('3:16')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block service('netflix'), traffic('streaming') start hour('16:9') end hour('20:42')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start hour('22:29') end hour('2:15')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer') unset quota('5', 'gb/wk') allow traffic('torrent'), service('facebook') start hour('16:10') end hour('20:59')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.106') remove middlebox('parental-control') unset bandwidth('min', '10', 'mbps') block service('youtube'), protocol('udp') start hour('22:33') end hour('3:13')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('social-media') start hour('16:28') end hour('20:45')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('load-balancer'), middlebox('parental-control') unset quota('3', 'gb/wk') block service('vimeo'), traffic('streaming') start hour('17:51') end hour('2:47')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), traffic('streaming') start hour('18:1') end hour('3:8')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('5', 'gb/wk') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.62') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('sftp'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall') unset quota('9', 'gb/wk') start hour('22:25') end hour('2:34')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') start hour('16:48') end hour('20:7')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('firewall'), middlebox('ids') start hour('21:12') end hour('2:16')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer'), middlebox('dpi') start hour('15:36') end hour('20:53')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), service('netflix')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('telnet'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') start hour('22:27') end hour('3:3')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.160') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') start hour('16:59') end hour('21:50')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') unset quota('3', 'gb/wk') start hour('17:20') end hour('2:16')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') start hour('17:55') end hour('2:26')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('9', 'gb/wk') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.98') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.111') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.123') add middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.118') remove middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block protocol('udp'), service('youtube') start hour('22:35') end hour('3:5')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('load-balancer') allow service('stremio') start hour('16:24') end hour('20:10')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.200') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow service('vimeo'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset quota('9', 'gb/wk') start hour('18:22') end hour('3:9')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('3', 'gb/wk') start hour('17:42') end hour('3:20')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.144') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall') set quota('4', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block protocol('http'), service('popcorn-time') start hour('22:16') end hour('3:36')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer') start hour('16:21') end hour('22:3')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.115') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.113') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') allow protocol('telnet'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') start hour('22:2') end hour('3:39')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') start hour('16:15') end hour('21:58')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('5', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.84') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('6', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('1', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.185') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start hour('21:54') end hour('2:41')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('torrent') start hour('15:14') end hour('21:21')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), traffic('streaming') start hour('18:44') end hour('2:18')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('udp'), traffic('streaming') start hour('18:36') end hour('2:10')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '40', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set quota('1', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.117') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.121') remove middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.52') add middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.167') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.176') add middlebox('parental-control') unset quota('1', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.120') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow service('popcorn-time'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('min', '40', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '20', 'mbps') allow protocol('snmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('telnet'), service('youtube') start hour('18:46') end hour('3:50')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('facebook'), service('bittorrent') start hour('18:9') end hour('3:53')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('ids') set bandwidth('min', '20', 'mbps') block protocol('sftp'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block service('instagram'), traffic('social-media') start hour('21:55') end hour('3:49')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.118') add middlebox('load-balancer') block service('amazon-prime'), protocol('smtp') start hour('16:54') end hour('21:2')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('load-balancer') unset quota('9', 'gb/wk') start hour('21:25') end hour('3:6')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') unset quota('2', 'gb/wk') start hour('16:47') end hour('20:29')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('parental-control') unset bandwidth('min', '80', 'mbps') allow traffic('streaming')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.135') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('smtp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('max', '50', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.196') add middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '70', 'mbps') allow protocol('telnet'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi') set bandwidth('max', '60', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('laboratories') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') block service('vimeo'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '20', 'mbps') allow protocol('https'), service('stremio') start hour('22:7') end hour('2:20')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow protocol('quic'), service('bittorrent') start hour('16:44') end hour('21:31')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') block protocol('https'), protocol('ftp') start hour('21:12') end hour('3:47')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('instagram'), service('popcorn-time') start hour('15:52') end hour('21:11')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.148') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('netflix') start hour('22:45') end hour('3:26')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('amazon-prime'), traffic('torrent') start hour('16:42') end hour('20:11')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('2', 'gb/wk') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') start hour('18:3') end hour('3:20')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') start hour('18:1') end hour('2:10')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.60') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('firewall'), middlebox('dpi') block protocol('telnet'), service('netflix') start hour('22:42') end hour('2:22')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block service('popcorn-time') start hour('16:22') end hour('21:25')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.71') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('tcp') start hour('17:48') end hour('2:9')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow service('facebook'), service('popcorn-time') start hour('18:12') end hour('3:42')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('dpi') set quota('9', 'gb/wk') allow protocol('quic'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.94') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('ids') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('sftp'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.100') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('tcp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.143') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.151') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('dpi') block service('stremio'), traffic('streaming') start hour('21:32') end hour('3:35')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('stremio'), service('instagram') start hour('16:24') end hour('21:22')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '60', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('ids') unset bandwidth('min', '60', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('dpi') set quota('2', 'gb/wk') allow protocol('icmp'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.124') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('youtube') start hour('18:58') end hour('3:49')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block traffic('social-media'), protocol('ftp') start hour('19:2') end hour('2:46')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('telnet') start hour('17:40') end hour('3:47')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('sftp'), protocol('icmp') start hour('18:6') end hour('2:51')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.71') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.178') set quota('2', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') set bandwidth('max', '90', 'mbps') block service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow protocol('quic'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('snmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.162') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.61') set quota('2', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') set quota('6', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') add middlebox('ids') set bandwidth('max', '60', 'mbps') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block traffic('torrent'), service('popcorn-time') start hour('22:48') end hour('3:33')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow service('instagram'), service('popcorn-time') start hour('16:50') end hour('21:11')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.175') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') start hour('18:2') end hour('2:27')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.168') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps') start hour('18:1') end hour('2:33')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('7', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('facebook'), protocol('udp') start hour('17:42') end hour('2:53')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('tcp'), traffic('streaming') start hour('17:20') end hour('2:9')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.158') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') block traffic('social-media'), service('popcorn-time') start hour('22:32') end hour('3:42')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') allow service('instagram'), service('youtube') start hour('16:10') end hour('20:45')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.63') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi') set quota('6', 'gb/wk') allow service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.100') add middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('laboratories') set bandwidth('min', '20', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.106') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('parental-control') set quota('1', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.200') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.189') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.94') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('2', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow service('amazon-prime'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.140') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('tcp'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.168') remove middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') start hour('22:40') end hour('2:40')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') start hour('15:55') end hour('21:24')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow traffic('streaming'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.132') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('netflix') start hour('17:20') end hour('3:55')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset quota('8', 'gb/wk') block service('amazon-prime'), traffic('social-media') start hour('18:25') end hour('3:3')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('2', 'gb/wk') allow service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('https'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids'), middlebox('firewall') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') block service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('telnet'), traffic('social-media') start hour('22:43') end hour('2:45')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('instagram'), service('bittorrent') start hour('16:58') end hour('20:42')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.170') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('dpi') set quota('5', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') block service('bittorrent'), traffic('streaming') start hour('23:1') end hour('3:16')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '60', 'mbps') allow service('facebook'), service('youtube') start hour('16:33') end hour('21:19')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start hour('21:29') end hour('3:39')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start hour('15:35') end hour('21:16')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.107') set bandwidth('min', '40', 'mbps') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') set bandwidth('max', '60', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow service('bittorrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block service('stremio'), protocol('https') start hour('22:44') end hour('3:23')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.73') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent') start hour('16:7') end hour('21:40')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.99') add middlebox('firewall'), middlebox('ids') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer') allow protocol('snmp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') add middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block protocol('quic'), protocol('udp') start hour('21:36') end hour('4:3')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental-control'), middlebox('load-balancer') allow traffic('peer2peer'), service('stremio') start hour('16:25') end hour('21:25')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('7', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.178') remove middlebox('ids'), middlebox('dpi') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.172') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') set quota('3', 'gb/wk') allow service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.52') set bandwidth('max', '90', 'mbps') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('8', 'gb/wk') allow protocol('http'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.63') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow traffic('peer2peer'), service('youtube') start hour('21:36') end hour('3:34')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('instagram'), service('facebook') start hour('15:41') end hour('21:36')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('udp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '30', 'mbps') block service('facebook'), service('bittorrent') start hour('17:32') end hour('3:18')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), protocol('https') start hour('18:58') end hour('3:31')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('research labs') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') start hour('22:39') end hour('2:27')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') start hour('16:2') end hour('22:4')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.96') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('sftp'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.120') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') start hour('18:28') end hour('2:53')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.125') add middlebox('dpi') set bandwidth('min', '30', 'mbps') start hour('18:44') end hour('3:10')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.153') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') start hour('18:51') end hour('2:32')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('6', 'gb/wk') start hour('18:31') end hour('2:43')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') remove middlebox('firewall'), middlebox('load-balancer') start hour('22:19') end hour('2:41')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.193') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') start hour('15:56') end hour('20:56')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.150') remove middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), protocol('udp') start hour('22:58') end hour('3:56')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.141') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow traffic('peer2peer'), traffic('streaming') start hour('16:6') end hour('20:12')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('dpi') block protocol('telnet'), traffic('streaming') start hour('23:0') end hour('2:51')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('firewall') allow traffic('torrent'), service('facebook') start hour('15:40') end hour('21:55')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') unset bandwidth('min', '90', 'mbps') start hour('21:40') end hour('2:27')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') start hour('15:6') end hour('20:15')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.134') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('telnet'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('dpi') set quota('9', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.200') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('instagram') start hour('19:1') end hour('3:20')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.195') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('instagram'), service('youtube') start hour('18:52') end hour('3:39')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.119') remove middlebox('firewall'), middlebox('dpi') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.122') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset bandwidth('max', '40', 'mbps') start hour('22:5') end hour('2:49')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') start hour('16:15') end hour('21:5')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '60', 'mbps') start hour('21:11') end hour('3:28')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') start hour('15:21') end hour('20:31')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('dpi') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('youtube'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.168') add middlebox('firewall'), middlebox('ids') allow traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.183') add middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.176') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.120') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('streaming') start hour('22:19') end hour('3:49')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.111') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('4', 'gb/wk') allow service('vimeo'), traffic('torrent') start hour('15:22') end hour('20:18')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('smtp'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.182') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('load-balancer') set quota('7', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('bittorrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') block protocol('icmp') start hour('22:10') end hour('2:14')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow service('amazon-prime'), service('popcorn-time') start hour('15:36') end hour('20:58')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.194') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block service('vimeo'), traffic('streaming') start hour('18:59') end hour('3:36')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('smtp'), service('facebook') start hour('17:34') end hour('2:10')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.199') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('udp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset quota('4', 'gb/wk') start hour('22:6') end hour('2:20')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '70', 'mbps') start hour('15:46') end hour('20:25')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.61') remove middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start hour('18:42') end hour('2:27')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') add middlebox('dpi'), middlebox('ids') unset quota('8', 'gb/wk') allow protocol('smtp'), traffic('social-media') start hour('18:46') end hour('2:47')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') unset quota('9', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '60', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('sftp'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.161') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('3', 'gb/wk') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') add middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('snmp') start hour('22:59') end hour('2:35')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.137') remove middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '20', 'mbps') allow protocol('sftp'), protocol('quic') start hour('16:54') end hour('20:29')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), service('stremio') start hour('22:58') end hour('3:27')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset quota('8', 'gb/wk') allow service('vimeo'), traffic('streaming') start hour('16:55') end hour('20:7')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('research laboratories') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), service('instagram') start hour('23:0') end hour('3:51')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('facebook'), service('youtube') start hour('16:23') end hour('21:14')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block service('vimeo'), traffic('streaming') start hour('21:31') end hour('4:3')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), traffic('streaming') start hour('15:41') end hour('20:44')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset quota('6', 'gb/wk') start hour('22:56') end hour('2:26')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') start hour('16:45') end hour('21:39')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('4', 'gb/wk') allow protocol('quic'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.151') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.83') remove middlebox('dpi'), middlebox('firewall') block service('stremio'), service('popcorn-time') start hour('22:49') end hour('2:41')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('ids') allow service('amazon-prime'), service('stremio') start hour('15:50') end hour('20:21')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.132') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block service('stremio'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.128') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('load-balancer') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('snmp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.135') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('min', '20', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control') block service('youtube'), service('netflix') start hour('22:46') end hour('4:4')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') allow service('stremio'), service('netflix') start hour('16:9') end hour('21:36')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') start hour('21:47') end hour('3:30')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset quota('7', 'gb/wk') start hour('16:45') end hour('21:21')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.113') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.184') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '70', 'mbps') block protocol('https'), service('youtube') start hour('22:15') end hour('2:40')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.170') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') allow traffic('torrent'), traffic('streaming') start hour('17:0') end hour('21:14')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block service('amazon-prime'), service('vimeo') start hour('21:29') end hour('3:8')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), traffic('torrent') start hour('16:54') end hour('20:41')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('min', '20', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('icmp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.179') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), service('instagram') start hour('21:30') end hour('3:57')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.179') add middlebox('load-balancer'), middlebox('firewall') unset quota('2', 'gb/wk') allow service('amazon-prime'), service('popcorn-time') start hour('15:58') end hour('20:30')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('7', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('3', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '60', 'mbps') block protocol('https'), service('youtube') start hour('22:56') end hour('3:17')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('tcp'), traffic('social-media') start hour('15:8') end hour('21:3')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('2', 'gb/wk') allow traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') start hour('21:38') end hour('2:55')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids') start hour('16:10') end hour('21:21')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.187') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') unset quota('7', 'gb/wk') start hour('18:8') end hour('2:55')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') start hour('17:36') end hour('3:59')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), traffic('social-media') start hour('22:37') end hour('3:44')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), protocol('udp') start hour('16:21') end hour('20:52')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('instagram') start hour('17:46') end hour('2:57')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow protocol('smtp'), service('popcorn-time') start hour('17:47') end hour('2:59')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.168') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.197') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('stremio') start hour('22:27') end hour('4:0')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.194') add middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('stremio') start hour('15:17') end hour('20:30')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block protocol('icmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('dpi') block traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('tcp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('min', '20', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.112') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids') set quota('7', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '50', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('laboratories') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset quota('3', 'gb/wk') block traffic('peer2peer'), service('instagram') start hour('21:54') end hour('3:58')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('stremio'), traffic('social-media') start hour('16:13') end hour('21:30')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), traffic('torrent') start hour('18:7') end hour('2:25')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') unset bandwidth('max', '20', 'mbps') allow service('vimeo'), traffic('torrent') start hour('17:17') end hour('3:56')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.200') set bandwidth('min', '50', 'mbps') block protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') set bandwidth('max', '60', 'mbps') allow service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') start hour('17:54') end hour('2:31')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('2', 'gb/wk') start hour('17:38') end hour('2:46')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start hour('17:44') end hour('3:33')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') allow service('instagram'), traffic('streaming') start hour('18:33') end hour('3:55')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.117') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall') block service('vimeo'), protocol('tcp') start hour('22:7') end hour('2:18')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow protocol('sftp'), service('youtube') start hour('16:47') end hour('21:32')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall') set quota('9', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.201') add middlebox('firewall') block protocol('tcp'), service('netflix') start hour('22:22') end hour('2:30')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.198') remove middlebox('parental-control') allow traffic('torrent'), traffic('social-media') start hour('16:53') end hour('21:55')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('facebook') start hour('22:12') end hour('2:25')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.152') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('tcp'), traffic('social-media') start hour('15:53') end hour('20:33')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('9', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') start hour('21:6') end hour('3:33')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset quota('6', 'gb/wk') start hour('16:55') end hour('20:18')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk') allow protocol('tcp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.115') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') block protocol('icmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('stremio'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('netflix') start hour('17:58') end hour('2:52')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('4', 'gb/wk') allow service('amazon-prime'), traffic('torrent') start hour('17:47') end hour('3:15')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.146') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('ids') set quota('5', 'gb/wk') allow service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.71') remove middlebox('parental-control') set quota('2', 'gb/wk') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '10', 'mbps') allow traffic('torrent'), protocol('snmp') start hour('18:16') end hour('3:4')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.52') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') allow traffic('social-media'), service('youtube') start hour('17:4') end hour('3:30')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block protocol('ftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start hour('22:45') end hour('2:36')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('vimeo'), traffic('peer2peer') start hour('16:52') end hour('21:47')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.74') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block traffic('streaming'), service('bittorrent') start hour('22:11') end hour('2:7')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('vimeo'), traffic('streaming') start hour('16:49') end hour('21:44')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set bandwidth('min', '30', 'mbps') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow protocol('https'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.119') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('research labs') remove middlebox('load-balancer') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') unset quota('3', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '80', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '60', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), service('bittorrent') start hour('22:23') end hour('3:4')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('min', '70', 'mbps') allow protocol('http'), service('instagram') start hour('15:17') end hour('20:56')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.131') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('smtp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('youtube'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('ids'), middlebox('load-balancer') allow protocol('quic'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') set quota('7', 'gb/wk') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') start hour('21:15') end hour('2:11')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') start hour('16:8') end hour('21:12')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set quota('8', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('9', 'gb/wk') allow traffic('social-media'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '80', 'mbps') start hour('22:37') end hour('2:34')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset quota('2', 'gb/wk') start hour('15:31') end hour('21:55')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.130') add middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.72') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('4', 'gb/wk') start hour('19:2') end hour('2:28')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('ids'), middlebox('parental-control') unset quota('3', 'gb/wk') start hour('18:49') end hour('2:43')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') block traffic('torrent'), protocol('udp') start hour('18:33') end hour('3:25')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('youtube') start hour('17:45') end hour('2:6')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') start hour('17:12') end hour('3:56')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') start hour('18:35') end hour('2:44')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('parental-control'), middlebox('firewall') unset quota('9', 'gb/wk') block service('amazon-prime'), traffic('social-media') start hour('18:14') end hour('2:31')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('5', 'gb/wk') allow service('facebook'), service('popcorn-time') start hour('18:22') end hour('2:22')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start hour('22:50') end hour('3:36')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') start hour('15:25') end hour('21:0')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research labs') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('sftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.62') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('torrent'), traffic('social-media') start hour('21:53') end hour('3:36')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.99') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('https'), traffic('torrent') start hour('15:59') end hour('21:52')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.60') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('https'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps') start hour('22:14') end hour('2:55')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') start hour('15:35') end hour('20:38')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.167') add middlebox('firewall') allow traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.175') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('https'), service('popcorn-time') start hour('22:59') end hour('3:28')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.130') add middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('netflix') start hour('15:48') end hour('20:53')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.142') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('vimeo'), protocol('sftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block protocol('sftp'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block traffic('social-media'), protocol('udp') start hour('18:5') end hour('3:10')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.123') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('vimeo'), traffic('streaming') start hour('18:59') end hour('2:19')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps') block service('youtube'), service('bittorrent') start hour('17:44') end hour('4:0')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('youtube') start hour('18:21') end hour('2:44')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block service('instagram'), traffic('social-media') start hour('22:40') end hour('2:47')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), service('facebook') start hour('16:50') end hour('20:33')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('sftp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set bandwidth('max', '30', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.157') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), protocol('sftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.133') remove middlebox('dpi') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('youtube') start hour('18:17') end hour('3:21')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') block protocol('quic'), protocol('http') start hour('18:52') end hour('2:31')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.75') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('firewall') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.174') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block service('youtube'), protocol('udp') start hour('18:34') end hour('2:9')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('9', 'gb/wk') allow service('bittorrent'), traffic('streaming') start hour('18:50') end hour('2:36')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('http'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('http'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.60') remove middlebox('firewall') set quota('2', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('icmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.165') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.153') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.194') add middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids') set quota('3', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '50', 'mbps') allow traffic('streaming'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('udp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.192') add middlebox('firewall') start hour('22:43') end hour('2:44')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start hour('15:54') end hour('21:29')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('3', 'gb/wk') start hour('21:37') end hour('2:46')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') start hour('16:14') end hour('21:32')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('ids') block service('amazon-prime'), service('instagram') start hour('22:54') end hour('3:38')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi') allow service('amazon-prime'), service('facebook') start hour('15:24') end hour('21:0')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block traffic('peer2peer'), service('vimeo') start hour('22:57') end hour('3:28')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') allow protocol('http'), service('popcorn-time') start hour('16:17') end hour('21:53')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk') allow traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') block protocol('tcp'), protocol('ftp') start hour('21:45') end hour('2:22')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent'), service('popcorn-time') start hour('16:46') end hour('21:31')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow protocol('https'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '30', 'mbps') allow protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.198') add middlebox('load-balancer') unset bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), protocol('tcp')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('6', 'gb/wk') block service('facebook'), service('youtube') start hour('18:59') end hour('2:8')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') unset quota('6', 'gb/wk') allow service('youtube'), traffic('streaming') start hour('18:54') end hour('2:31')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids') unset quota('7', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.131') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '60', 'mbps') allow service('stremio'), protocol('udp')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.191') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('http'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.161') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.146') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.152') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.111') set quota('9', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') start hour('18:30') end hour('2:38')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids') set bandwidth('max', '90', 'mbps') start hour('17:11') end hour('3:9')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow protocol('icmp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.114') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('telnet'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.108') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('https'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') start hour('22:44') end hour('2:50')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') start hour('15:6') end hour('21:6')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.203') remove middlebox('dpi'), middlebox('parental-control') block protocol('telnet'), service('bittorrent') start hour('21:22') end hour('3:17')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.191') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') block protocol('icmp'), traffic('streaming') start hour('15:39') end hour('20:47')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.158') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('https'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.96') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.107') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('vimeo'), protocol('https')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.162') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') remove middlebox('parental-control'), middlebox('load-balancer') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.160') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.146') add middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.161') remove middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.136') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start hour('21:56') end hour('3:18')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start hour('16:36') end hour('21:50')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') remove middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('https'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.64') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('firewall') allow service('vimeo'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') block protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall') set quota('3', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('firewall'), middlebox('parental-control') unset quota('8', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('ids') unset quota('9', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('telnet'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '50', 'mbps') block service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('vimeo'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block traffic('peer2peer'), service('netflix') start hour('21:32') end hour('3:20')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('stremio'), service('netflix') start hour('15:11') end hour('21:22')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.75') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') start hour('18:21') end hour('2:11')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') start hour('18:35') end hour('3:0')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set quota('6', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('9', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('dpi') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') block service('stremio'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall') block protocol('https'), service('bittorrent') start hour('21:14') end hour('2:28')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow service('youtube'), service('netflix') start hour('16:48') end hour('20:6')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') block service('stremio'), service('instagram') start hour('22:14') end hour('2:15')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('amazon-prime'), protocol('telnet') start hour('15:40') end hour('21:12')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '60', 'mbps') block protocol('snmp'), service('facebook') start hour('22:40') end hour('2:55')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('ids') set quota('3', 'gb/wk') allow service('stremio'), protocol('snmp') start hour('15:25') end hour('20:59')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') block protocol('sftp'), service('netflix') start hour('22:4') end hour('3:49')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow service('instagram'), service('bittorrent') start hour('16:20') end hour('21:3')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('firewall') set quota('8', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.197') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.190') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '10', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('firewall') unset bandwidth('min', '80', 'mbps') start hour('21:6') end hour('2:35')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') start hour('15:32') end hour('20:35')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') unset bandwidth('min', '90', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('3', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('4', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.183') add middlebox('ids') allow traffic('torrent'), protocol('icmp') start hour('21:59') end hour('3:56')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.178') remove middlebox('firewall'), middlebox('parental-control') allow traffic('peer2peer'), service('vimeo') start hour('16:42') end hour('20:16')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') unset quota('7', 'gb/wk') block service('stremio'), service('netflix') start hour('22:12') end hour('2:6')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('netflix'), traffic('streaming') start hour('15:8') end hour('21:16')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset quota('6', 'gb/wk') start hour('21:53') end hour('3:6')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '50', 'mbps') start hour('16:18') end hour('21:53')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.147') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') unset quota('7', 'gb/wk') block protocol('tcp'), traffic('torrent') start hour('21:18') end hour('3:50')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset quota('5', 'gb/wk') allow service('amazon-prime'), traffic('streaming') start hour('16:0') end hour('20:54')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('udp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block protocol('quic'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi') allow traffic('peer2peer'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi') allow service('vimeo'), traffic('social-media') start hour('22:16') end hour('2:12')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block service('stremio'), traffic('streaming') start hour('15:19') end hour('21:44')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') block protocol('sftp'), protocol('https') start hour('21:6') end hour('2:33')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), service('netflix') start hour('15:19') end hour('20:57')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.97') add middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('telnet'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.122') remove middlebox('dpi'), middlebox('firewall') block service('instagram'), service('facebook') start hour('22:50') end hour('3:9')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.123') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow service('instagram') start hour('15:6') end hour('21:28')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('firewall'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.113') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') start hour('21:37') end hour('3:39')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') start hour('16:14') end hour('21:10')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('4', 'gb/wk') block protocol('tcp'), service('youtube') start hour('21:17') end hour('4:4')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), protocol('tcp') start hour('16:16') end hour('20:42')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.157') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block service('amazon-prime'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.134') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') start hour('21:32') end hour('3:19')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') start hour('16:22') end hour('20:41')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), service('instagram') start hour('18:53') end hour('2:14')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall') set bandwidth('max', '30', 'mbps') allow protocol('quic'), protocol('smtp') start hour('17:51') end hour('3:35')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '70', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '90', 'mbps') allow protocol('snmp'), service('instagram')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') block protocol('smtp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.119') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('1', 'gb/wk') block traffic('torrent'), protocol('http') start hour('18:13') end hour('3:18')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') remove middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), service('popcorn-time') start hour('17:18') end hour('3:38')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('firewall') set quota('3', 'gb/wk') block traffic('torrent') start hour('22:12') end hour('3:36')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('stremio'), service('popcorn-time') start hour('15:32') end hour('20:26')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('ids') unset bandwidth('min', '20', 'mbps') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('dpi') block protocol('sftp'), protocol('tcp') start hour('22:57') end hour('2:21')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block traffic('torrent') start hour('17:2') end hour('20:32')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') unset quota('7', 'gb/wk') block traffic('torrent'), service('netflix') start hour('18:37') end hour('2:40')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('bittorrent'), traffic('streaming') start hour('17:49') end hour('3:53')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('laboratories') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '30', 'mbps') start hour('21:21') end hour('4:2')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') start hour('15:25') end hour('21:9')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall') unset bandwidth('max', '80', 'mbps') block protocol('tcp'), service('bittorrent') start hour('18:28') end hour('4:5')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('firewall'), middlebox('dpi') unset quota('5', 'gb/wk') allow traffic('torrent'), traffic('social-media') start hour('18:45') end hour('2:32')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('dpi'), middlebox('load-balancer') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.94') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') start hour('21:37') end hour('3:50')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.97') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') start hour('16:47') end hour('20:34')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.202') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.165') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('quic'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') block traffic('torrent'), service('netflix') start hour('21:36') end hour('2:26')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi') allow service('amazon-prime'), traffic('torrent') start hour('16:24') end hour('21:30')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('8', 'gb/wk') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.122') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') start hour('21:57') end hour('2:51')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') start hour('15:47') end hour('21:28')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('research laboratories') set quota('5', 'gb/wk') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('9', 'gb/wk') allow service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research laboratories') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.175') add middlebox('firewall') allow protocol('sftp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start hour('22:13') end hour('3:3')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') start hour('15:17') end hour('21:26')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids') start hour('21:41') end hour('2:21')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') start hour('16:36') end hour('21:4')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('parental-control') set quota('9', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.137') add middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block protocol('smtp'), traffic('social-media') start hour('18:13') end hour('3:55')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('stremio'), protocol('smtp') start hour('18:56') end hour('3:45')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') set quota('2', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set bandwidth('min', '80', 'mbps') block protocol('udp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('dpi') set quota('5', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.160') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.61') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.121') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('tcp'), traffic('streaming') start hour('22:2') end hour('3:41')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.120') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('youtube') start hour('15:38') end hour('20:25')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi') set quota('3', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.121') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set quota('2', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('tcp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('firewall'), middlebox('ids') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('torrent'), traffic('streaming') start hour('22:27') end hour('3:59')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('youtube') start hour('15:28') end hour('21:43')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') start hour('21:7') end hour('3:48')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') start hour('16:29') end hour('20:9')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') block traffic('social-media'), service('popcorn-time') start hour('23:0') end hour('3:1')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('parental-control') unset bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('facebook') start hour('16:41') end hour('20:30')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('http'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.201') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.201') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.102') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.101') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('parental-control'), middlebox('firewall') start hour('22:1') end hour('2:27')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') start hour('15:22') end hour('21:20')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.167') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start hour('21:59') end hour('2:49')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('sftp'), service('stremio') start hour('16:32') end hour('21:50')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('snmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') start hour('21:35') end hour('3:49')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') start hour('16:44') end hour('21:25')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('https'), service('netflix') start hour('18:21') end hour('3:46')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), service('popcorn-time') start hour('18:26') end hour('2:27')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') unset quota('6', 'gb/wk')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('labs') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow traffic('social-media'), traffic('streaming') start hour('21:56') end hour('3:35')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('youtube'), service('bittorrent') start hour('16:10') end hour('20:39')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '80', 'mbps') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow protocol('snmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '30', 'mbps') block service('vimeo'), service('stremio') start hour('22:23') end hour('3:2')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow service('vimeo'), traffic('social-media') start hour('16:55') end hour('20:18')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '20', 'mbps') block traffic('social-media'), protocol('udp') start hour('17:8') end hour('2:28')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('torrent'), service('youtube') start hour('17:29') end hour('2:42')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.85') remove middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('ftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.192') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.188') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent') start hour('22:32') end hour('4:1')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') unset quota('7', 'gb/wk') allow service('amazon-prime'), protocol('snmp') start hour('15:35') end hour('22:1')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('vimeo'), service('youtube') start hour('22:27') end hour('4:3')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') allow service('vimeo'), service('instagram') start hour('15:41') end hour('21:51')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '90', 'mbps') allow protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('7', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') start hour('18:7') end hour('2:55')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset quota('2', 'gb/wk') start hour('18:17') end hour('2:18')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') allow service('instagram'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow protocol('https'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set bandwidth('min', '30', 'mbps') allow service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') start hour('21:6') end hour('3:44')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') start hour('15:45') end hour('20:23')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('snmp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') start hour('21:36') end hour('2:39')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('ids') start hour('16:12') end hour('20:36')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.131') set quota('1', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set quota('2', 'gb/wk') allow traffic('social-media'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('parental-control'), middlebox('firewall') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.158') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('stremio'), traffic('torrent') start hour('18:57') end hour('2:43')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('torrent') start hour('17:19') end hour('2:28')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') start hour('22:18') end hour('3:7')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps') start hour('16:25') end hour('20:15')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') start hour('17:30') end hour('3:2')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') start hour('17:25') end hour('3:44')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') start hour('21:20') end hour('3:11')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') start hour('16:24') end hour('20:30')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.146') add middlebox('ids') set bandwidth('min', '40', 'mbps') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.185') set quota('1', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') set quota('6', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), protocol('tcp') start hour('18:6') end hour('3:42')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), traffic('streaming') start hour('17:11') end hour('3:37')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start hour('18:20') end hour('3:31')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('ids') unset quota('6', 'gb/wk') allow traffic('streaming'), service('popcorn-time') start hour('17:34') end hour('2:19')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset quota('7', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start hour('22:34') end hour('4:0')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.117') add middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('vimeo'), service('popcorn-time') start hour('16:21') end hour('21:31')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.182') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.180') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow protocol('udp'), service('bittorrent')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.62') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.176') add middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('youtube'), service('popcorn-time') start hour('18:44') end hour('2:29')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), service('instagram') start hour('18:23') end hour('2:57')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.93') add middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '30', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall') set quota('6', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset quota('5', 'gb/wk') start hour('18:28') end hour('3:35')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer'), middlebox('dpi') unset quota('9', 'gb/wk') start hour('17:24') end hour('3:12')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.128') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control') unset quota('7', 'gb/wk') block traffic('torrent'), service('instagram') start hour('22:48') end hour('3:3')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') unset quota('6', 'gb/wk') allow service('stremio'), service('facebook') start hour('15:56') end hour('21:25')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') unset quota('3', 'gb/wk') block service('facebook'), traffic('streaming') start hour('18:6') end hour('2:21')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('3', 'gb/wk') allow traffic('streaming'), protocol('ftp') start hour('17:31') end hour('2:12')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.183') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') start hour('22:58') end hour('3:54')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.185') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') start hour('16:0') end hour('20:19')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') start hour('22:9') end hour('3:25')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') start hour('16:47') end hour('20:39')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('1', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('https'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') block traffic('peer2peer'), protocol('quic') start hour('19:3') end hour('3:10')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset quota('4', 'gb/wk') allow traffic('torrent'), service('bittorrent') start hour('18:22') end hour('2:34')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.71') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.71') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset quota('8', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.202') add middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.199') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('2', 'gb/wk') start hour('21:38') end hour('3:20')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids') set quota('5', 'gb/wk') start hour('16:57') end hour('20:12')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') unset quota('6', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.73') add middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), traffic('torrent') start hour('18:12') end hour('3:7')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming') start hour('19:1') end hour('2:19')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('amazon-prime') start hour('21:49') end hour('2:32')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('torrent') start hour('16:17') end hour('20:28')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research labs') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') start hour('22:35') end hour('2:55')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') start hour('15:16') end hour('20:6')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('social-media'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('load-balancer') set quota('3', 'gb/wk') block service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.161') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('vimeo'), service('popcorn-time') start hour('21:11') end hour('3:43')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('amazon-prime'), service('popcorn-time') start hour('16:30') end hour('21:8')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('3', 'gb/wk') allow protocol('sftp'), service('facebook') start hour('23:2') end hour('3:53')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.72') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('tcp'), traffic('torrent') start hour('16:57') end hour('21:1')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') start hour('23:0') end hour('3:10')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') start hour('16:29') end hour('20:39')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.110') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow protocol('https'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.170') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), protocol('https') start hour('18:45') end hour('2:26')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set quota('8', 'gb/wk') allow protocol('tcp'), service('youtube') start hour('17:48') end hour('2:50')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block protocol('ftp'), service('netflix') start hour('21:48') end hour('3:27')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), service('netflix') start hour('16:46') end hour('20:8')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('laboratories') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('labs') set quota('4', 'gb/wk') allow traffic('torrent'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.184') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') remove middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), traffic('social-media') start hour('21:38') end hour('2:22')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow protocol('smtp'), service('bittorrent') start hour('15:39') end hour('20:6')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.84') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') start hour('21:56') end hour('4:4')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') start hour('16:39') end hour('21:2')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.63') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.126') remove middlebox('firewall') set bandwidth('min', '10', 'mbps') start hour('22:27') end hour('2:37')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '70', 'mbps') start hour('15:58') end hour('21:30')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') block service('facebook'), traffic('streaming') start hour('21:59') end hour('3:28')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), service('popcorn-time') start hour('16:39') end hour('21:17')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dmz') add middlebox('ids') set bandwidth('max', '50', 'mbps') allow protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.60') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block protocol('https'), traffic('social-media') start hour('22:50') end hour('2:56')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow service('instagram'), service('netflix') start hour('15:18') end hour('21:1')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('vimeo'), protocol('udp') start hour('21:58') end hour('3:25')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow traffic('social-media'), traffic('streaming') start hour('16:34') end hour('20:26')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') start hour('22:40') end hour('3:11')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') start hour('15:19') end hour('20:37')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block traffic('social-media'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('3', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') start hour('17:18') end hour('3:26')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') start hour('18:20') end hour('2:9')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') unset quota('8', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids') set bandwidth('min', '70', 'mbps') allow protocol('telnet'), service('stremio')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('facebook') start hour('22:3') end hour('3:11')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), service('bittorrent') start hour('16:7') end hour('21:41')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.139') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.115') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('stremio'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block traffic('social-media'), protocol('ftp') start hour('22:1') end hour('2:44')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), service('instagram') start hour('16:10') end hour('20:58')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids') set quota('4', 'gb/wk') block protocol('snmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '50', 'mbps') block service('vimeo'), service('popcorn-time') start hour('17:11') end hour('2:48')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '10', 'mbps') allow service('facebook'), service('popcorn-time') start hour('17:34') end hour('2:23')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.101') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('quic'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.176') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('torrent'), traffic('streaming') start hour('22:4') end hour('3:48')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.159') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '90', 'mbps') allow service('youtube'), service('netflix') start hour('15:37') end hour('21:15')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start hour('22:45') end hour('3:0')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') start hour('15:34') end hour('20:52')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') start hour('21:48') end hour('3:51')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') start hour('16:45') end hour('21:14')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('https'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.131') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('1', 'gb/wk') start hour('18:43') end hour('3:48')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') start hour('17:19') end hour('2:16')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') start hour('21:12') end hour('3:9')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') start hour('15:10') end hour('21:2')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('research labs') remove middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') block service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('vimeo'), traffic('torrent') start hour('22:26') end hour('3:3')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), protocol('icmp') start hour('16:40') end hour('21:37')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.152') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('quic'), service('stremio') start hour('22:56') end hour('3:11')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.52') add middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('vimeo'), protocol('sftp') start hour('15:39') end hour('21:14')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('youtube'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids') unset quota('3', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') start hour('21:17') end hour('3:13')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set quota('5', 'gb/wk') start hour('16:46') end hour('21:14')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.83') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('vimeo'), service('instagram') start hour('22:14') end hour('3:15')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.84') add middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), traffic('torrent') start hour('16:26') end hour('20:12')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('torrent') start hour('17:23') end hour('3:43')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('snmp') start hour('19:4') end hour('3:55')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control') start hour('21:10') end hour('3:43')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') start hour('15:38') end hour('20:34')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.122') set quota('9', 'gb/wk') block protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') set quota('2', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '60', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '40', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '20', 'mbps') start hour('17:52') end hour('3:57')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '40', 'mbps') start hour('18:48') end hour('4:4')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('social-media'), service('facebook') start hour('22:26') end hour('3:24')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow protocol('udp'), service('bittorrent') start hour('15:16') end hour('21:48')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), traffic('torrent') start hour('17:12') end hour('3:6')", 
            "sentence": "define intent stnIntent: for group('labs') remove middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('smtp') start hour('17:58') end hour('3:11')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.139') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set quota('7', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('9', 'gb/wk') start hour('22:56') end hour('3:31')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') start hour('16:9') end hour('21:0')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.136') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.72') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.153') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('smtp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '90', 'mbps') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), service('youtube') start hour('21:48') end hour('2:33')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow service('youtube'), protocol('udp') start hour('16:16') end hour('20:24')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') unset bandwidth('max', '60', 'mbps') block traffic('peer2peer'), traffic('streaming') start hour('22:12') end hour('3:49')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('youtube') start hour('16:48') end hour('20:23')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('youtube'), service('netflix') start hour('22:49') end hour('3:44')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block protocol('smtp'), traffic('social-media') start hour('16:46') end hour('20:50')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block service('popcorn-time'), service('netflix') start hour('19:3') end hour('2:13')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('stremio') start hour('17:41') end hour('2:13')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') start hour('22:43') end hour('3:6')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') start hour('15:38') end hour('20:16')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall') set quota('2', 'gb/wk') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.121') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('vimeo'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '20', 'mbps') block protocol('tcp'), traffic('torrent') start hour('22:1') end hour('2:15')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow protocol('tcp'), service('facebook') start hour('15:23') end hour('21:0')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('http'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.75') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.111') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('instagram'), service('facebook')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.156') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') start hour('22:33') end hour('4:0')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.162') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') start hour('15:13') end hour('20:57')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') start hour('22:43') end hour('2:40')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') start hour('15:22') end hour('21:37')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('4', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.151') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') set quota('7', 'gb/wk') block protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.113') set quota('2', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.108') remove middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('icmp'), traffic('social-media') start hour('17:44') end hour('3:15')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.113') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('instagram'), traffic('social-media') start hour('18:44') end hour('2:36')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') block service('instagram'), service('popcorn-time') start hour('21:54') end hour('3:39')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow traffic('social-media') start hour('15:15') end hour('20:9')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block traffic('streaming'), service('bittorrent') start hour('22:22') end hour('3:52')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow service('amazon-prime'), service('stremio') start hour('16:13') end hour('20:11')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start hour('22:48') end hour('2:44')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi') start hour('15:41') end hour('21:0')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') start hour('21:49') end hour('3:38')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') start hour('16:21') end hour('21:49')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') start hour('21:11') end hour('3:5')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') start hour('15:34') end hour('20:10')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') start hour('18:3') end hour('3:41')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') start hour('17:10') end hour('2:37')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('sftp'), service('bittorrent') start hour('17:8') end hour('3:9')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall') unset quota('7', 'gb/wk') block traffic('peer2peer'), protocol('https') start hour('18:20') end hour('2:51')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') start hour('22:48') end hour('2:51')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') start hour('16:43') end hour('22:6')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '30', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dmz') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') start hour('21:23') end hour('3:46')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps') start hour('16:5') end hour('21:6')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.181') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('streaming') start hour('21:49') end hour('3:17')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.180') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('vimeo') start hour('15:24') end hour('20:33')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('streaming') start hour('21:53') end hour('3:59')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '70', 'mbps') allow traffic('social-media'), service('netflix') start hour('16:10') end hour('21:7')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.178') remove middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.186') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.164') remove middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.155') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') block traffic('peer2peer'), service('netflix') start hour('21:48') end hour('3:15')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow service('youtube'), service('bittorrent') start hour('16:31') end hour('21:14')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow service('youtube'), protocol('ftp')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('dpi') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "path"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.108') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.114') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.106') remove middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('firewall') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.175') add middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.166') remove middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('facebook'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.52') add middlebox('ids'), middlebox('parental-control') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.123') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow protocol('http'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') start hour('22:10') end hour('2:21')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') start hour('16:10') end hour('21:28')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block service('facebook'), service('popcorn-time') start hour('21:47') end hour('2:48')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('vimeo'), service('popcorn-time') start hour('15:6') end hour('20:55')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('snmp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.187') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('sftp'), traffic('social-media') start hour('22:22') end hour('2:53')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.177') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('smtp'), traffic('social-media') start hour('15:25') end hour('20:8')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.145') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('vimeo'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('load-balancer') unset quota('7', 'gb/wk') block service('amazon-prime'), protocol('https') start hour('17:28') end hour('2:33')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset quota('8', 'gb/wk') allow service('facebook'), service('popcorn-time') start hour('17:46') end hour('3:24')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') block service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('telnet'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') allow protocol('snmp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('labs') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('7', 'gb/wk') start hour('22:49') end hour('3:51')", 
            "sentence": "define intent stnIntent: for group('labs') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') start hour('15:23') end hour('21:54')", 
            "type": "path"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 59, 
                "hierarchical": 77, 
                "negation": 69, 
                "path": 0, 
                "qos": 62, 
                "synonym": 70, 
                "time": 75
            }, 
            "count": 412
        }, 
        "entailment": {
            "byType": {
                "domain": 78, 
                "hierarchical": 76, 
                "negation": 60, 
                "path": 170, 
                "qos": 64, 
                "synonym": 56, 
                "time": 84
            }, 
            "count": 588
        }
    }
}