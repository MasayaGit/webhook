{
    "content": [
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') allow protocol('tcp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('vimeo'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('stremio'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow protocol('udp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 21:58:45.533878') end timestamp('2019-01-26 03:44:45.533898')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 16:05:45.533828') end timestamp('2019-01-25 20:54:45.533862')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 18:22:46.821592') end timestamp('2019-01-26 04:08:46.821597')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 17:53:46.821550') end timestamp('2019-01-26 03:30:46.821583')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('snmp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '50', 'mbps') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 21:27:47.231249') end timestamp('2019-01-26 03:48:47.231263')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block protocol('quic'), protocol('telnet') start timestamp('2019-01-25 15:37:47.231146') end timestamp('2019-01-25 20:59:47.231229')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi') set bandwidth('max', '70', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids') set quota('7', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 17:44:49.015333') end timestamp('2019-01-26 03:28:49.015339')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 18:50:49.015291') end timestamp('2019-01-26 03:19:49.015325')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('4', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('6', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow traffic('torrent'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '10', 'mbps') block service('youtube'), service('netflix') start timestamp('2019-01-25 18:53:49.393199') end timestamp('2019-01-26 03:06:49.393205')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), service('youtube') start timestamp('2019-01-25 18:37:49.393166') end timestamp('2019-01-26 03:01:49.393192')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '40', 'mbps') block traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 22:47:49.442799') end timestamp('2019-01-26 03:39:49.442805')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 15:51:49.442772') end timestamp('2019-01-25 21:00:49.442791')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 17:58:49.607914') end timestamp('2019-01-26 03:19:49.607919')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('instagram') start timestamp('2019-01-25 17:46:49.607884') end timestamp('2019-01-26 02:54:49.607907')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('9', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 17:46:50.148789') end timestamp('2019-01-26 03:02:50.148794')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('facebook'), service('youtube') start timestamp('2019-01-25 18:27:50.148756') end timestamp('2019-01-26 02:57:50.148782')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 18:34:50.215680') end timestamp('2019-01-26 02:59:50.215686')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset quota('5', 'gb/wk') start timestamp('2019-01-25 17:33:50.215643') end timestamp('2019-01-26 02:29:50.215672')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 18:07:50.313765') end timestamp('2019-01-26 02:30:50.313769')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 18:04:50.313732') end timestamp('2019-01-26 03:55:50.313757')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set bandwidth('min', '50', 'mbps') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 22:16:51.503212') end timestamp('2019-01-26 02:28:51.503251')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('netflix') start timestamp('2019-01-25 16:52:51.503082') end timestamp('2019-01-25 20:31:51.503172')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') unset bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('netflix') start timestamp('2019-01-25 17:37:51.548078') end timestamp('2019-01-26 02:15:51.548085')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 18:53:51.548036') end timestamp('2019-01-26 03:24:51.548070')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('9', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('4', 'gb/wk') block protocol('tcp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 19:00:52.242053') end timestamp('2019-01-26 03:42:52.242085')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') allow service('amazon-prime'), protocol('telnet') start timestamp('2019-01-25 18:50:52.241804') end timestamp('2019-01-26 02:27:52.242004')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('load-balancer') allow protocol('quic'), traffic('torrent') start timestamp('2019-01-25 21:50:52.727210') end timestamp('2019-01-26 03:48:52.727217')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 16:04:52.727086') end timestamp('2019-01-25 20:32:52.727193')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('max', '50', 'mbps') block service('stremio'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('5', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow service('facebook'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') unset bandwidth('min', '70', 'mbps') block service('vimeo'), service('netflix') start timestamp('2019-01-25 17:16:54.990632') end timestamp('2019-01-26 03:00:54.990638')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('1', 'gb/wk') allow traffic('torrent') start timestamp('2019-01-25 19:00:54.990596') end timestamp('2019-01-26 02:20:54.990625')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('4', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 21:49:55.375739') end timestamp('2019-01-26 02:33:55.375744')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('ids'), middlebox('dpi') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 15:37:55.375711') end timestamp('2019-01-25 20:19:55.375732')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block service('vimeo'), protocol('http') start timestamp('2019-01-25 21:15:55.561728') end timestamp('2019-01-26 02:15:55.561734')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 15:50:55.561686') end timestamp('2019-01-25 20:49:55.561718')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 22:36:55.561853') end timestamp('2019-01-26 04:02:55.561858')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 17:04:55.561837') end timestamp('2019-01-25 20:20:55.561847')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('ids') set quota('6', 'gb/wk') allow protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('facebook'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('bittorrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 18:42:58.040905') end timestamp('2019-01-26 03:52:58.040910')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('2', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 18:57:58.040880') end timestamp('2019-01-26 03:06:58.040899')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block protocol('udp'), traffic('social-media') start timestamp('2019-01-25 18:13:58.564086') end timestamp('2019-01-26 03:02:58.564091')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') unset quota('5', 'gb/wk') allow protocol('snmp'), traffic('social-media') start timestamp('2019-01-25 17:11:58.564057') end timestamp('2019-01-26 02:14:58.564079')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('smtp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('telnet'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('quic'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('tcp'), protocol('https') start timestamp('2019-01-25 21:33:00.407837') end timestamp('2019-01-26 03:36:00.407843')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow protocol('sftp'), protocol('udp') start timestamp('2019-01-25 15:41:00.407798') end timestamp('2019-01-25 20:39:00.407829')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('youtube'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), service('netflix') start timestamp('2019-01-25 21:56:00.995563') end timestamp('2019-01-26 03:42:00.995568')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('icmp'), protocol('ftp') start timestamp('2019-01-25 17:03:00.995539') end timestamp('2019-01-25 21:24:00.995556')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block protocol('quic'), service('bittorrent') start timestamp('2019-01-25 21:58:01.060877') end timestamp('2019-01-26 02:29:01.060882')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 15:56:01.060847') end timestamp('2019-01-25 20:27:01.060860')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('load-balancer'), middlebox('parental-control') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi') block service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('dpi') allow service('amazon-prime')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 18:31:01.175199') end timestamp('2019-01-26 03:16:01.175204')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 18:59:01.175177') end timestamp('2019-01-26 03:05:01.175193')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('smtp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('load-balancer') set quota('2', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') block service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') block service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 22:47:03.632756') end timestamp('2019-01-26 02:58:03.632761')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 16:09:03.632729') end timestamp('2019-01-25 20:54:03.632749')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('sftp'), service('youtube') start timestamp('2019-01-25 17:56:03.665369') end timestamp('2019-01-26 03:21:03.665374')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 17:56:03.665345') end timestamp('2019-01-26 02:43:03.665362')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow protocol('tcp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow protocol('smtp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 22:19:04.321577') end timestamp('2019-01-26 02:52:04.321582')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 16:09:04.321552') end timestamp('2019-01-25 21:55:04.321570')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('load-balancer'), middlebox('firewall') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall') set quota('7', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') start timestamp('2019-01-25 17:53:04.704534') end timestamp('2019-01-26 02:44:04.704539')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 17:48:04.704508') end timestamp('2019-01-26 02:13:04.704527')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 18:09:05.025589') end timestamp('2019-01-26 04:06:05.025594')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 17:48:05.025564') end timestamp('2019-01-26 03:36:05.025582')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 22:00:05.471793') end timestamp('2019-01-26 03:08:05.471798')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') start timestamp('2019-01-25 16:33:05.471767') end timestamp('2019-01-25 21:25:05.471786')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('tcp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('facebook'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('1', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') set bandwidth('max', '30', 'mbps') allow protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('1', 'gb/wk') allow protocol('tcp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block service('stremio'), service('facebook') start timestamp('2019-01-25 22:31:06.943470') end timestamp('2019-01-26 03:36:06.943475')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 16:33:06.943443') end timestamp('2019-01-25 21:55:06.943462')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') set quota('2', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('6', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') allow service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') block protocol('udp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('3', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '40', 'mbps') block traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 22:54:08.291173') end timestamp('2019-01-26 04:03:08.291179')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('dpi') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 16:54:08.291145') end timestamp('2019-01-25 21:33:08.291165')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set quota('8', 'gb/wk') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 21:23:08.608737') end timestamp('2019-01-26 03:24:08.608741')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('firewall') unset bandwidth('max', '40', 'mbps') allow traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 17:00:08.608728') end timestamp('2019-01-25 21:11:08.608732')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block service('netflix'), service('bittorrent') start timestamp('2019-01-25 22:12:08.608923') end timestamp('2019-01-26 02:56:08.608928')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') allow protocol('ftp'), service('bittorrent') start timestamp('2019-01-25 15:53:08.608900') end timestamp('2019-01-25 21:57:08.608917')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('http'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('quic'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps') allow protocol('http'), protocol('smtp') start timestamp('2019-01-25 17:33:09.073302') end timestamp('2019-01-26 02:25:09.073308')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 17:51:09.073251') end timestamp('2019-01-26 02:39:09.073291')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 22:57:09.206693') end timestamp('2019-01-26 03:26:09.206700')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 16:22:09.206651') end timestamp('2019-01-25 20:52:09.206681')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('stremio'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block protocol('https'), protocol('quic') start timestamp('2019-01-25 22:52:10.884535') end timestamp('2019-01-26 02:46:10.884541')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 16:46:10.884504') end timestamp('2019-01-25 21:20:10.884527')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set quota('9', 'gb/wk') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '40', 'mbps') allow protocol('quic'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow protocol('snmp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') set bandwidth('min', '40', 'mbps') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 22:03:12.506031') end timestamp('2019-01-26 02:31:12.506040')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 15:57:12.505989') end timestamp('2019-01-25 20:32:12.506019')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('https'), protocol('http') start timestamp('2019-01-25 22:00:12.937000') end timestamp('2019-01-26 03:23:12.937006')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 17:03:12.936959') end timestamp('2019-01-25 21:23:12.936988')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow traffic('social-media'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('firewall') set quota('7', 'gb/wk') block service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('instagram'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block protocol('sftp'), service('stremio') start timestamp('2019-01-25 22:27:13.534239') end timestamp('2019-01-26 03:48:13.534244')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 15:12:13.534212') end timestamp('2019-01-25 22:11:13.534232')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block protocol('telnet'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow protocol('sftp'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') allow service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 23:06:14.340986') end timestamp('2019-01-26 03:43:14.340992')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 15:34:14.340958') end timestamp('2019-01-25 20:30:14.340978')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset quota('1', 'gb/wk') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 22:52:14.374146') end timestamp('2019-01-26 02:26:14.374151')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('4', 'gb/wk') allow protocol('https'), traffic('streaming') start timestamp('2019-01-25 15:23:14.374123') end timestamp('2019-01-25 21:00:14.374139')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') block protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 21:41:14.469797') end timestamp('2019-01-26 03:31:14.469802')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') allow protocol('http'), service('popcorn-time') start timestamp('2019-01-25 15:44:14.469774') end timestamp('2019-01-25 20:53:14.469789')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') set quota('5', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') set quota('2', 'gb/wk') allow protocol('https'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('smtp'), service('instagram') start timestamp('2019-01-25 17:31:15.109684') end timestamp('2019-01-26 02:17:15.109688')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 18:45:15.109656') end timestamp('2019-01-26 03:38:15.109677')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('tcp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '90', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps') allow protocol('sftp'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('tcp'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') set quota('9', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 21:17:16.391874') end timestamp('2019-01-26 02:45:16.391878')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 16:08:16.391846') end timestamp('2019-01-25 21:17:16.391866')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('load-balancer'), middlebox('firewall') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') allow service('netflix'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('facebook'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 22:19:17.364910') end timestamp('2019-01-26 03:52:17.364916')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 16:05:17.364878') end timestamp('2019-01-25 21:19:17.364902')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block service('stremio'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '90', 'mbps') block protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps') allow protocol('https'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('load-balancer') set quota('8', 'gb/wk') allow service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('1', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '10', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('udp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset quota('1', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset quota('7', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '60', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 21:22:22.451638') end timestamp('2019-01-26 03:54:22.451644')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') allow service('vimeo'), protocol('quic') start timestamp('2019-01-25 16:46:22.451599') end timestamp('2019-01-25 20:49:22.451621')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '60', 'mbps') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk') block service('bittorrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 18:22:23.523832') end timestamp('2019-01-26 03:11:23.523837')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 18:03:23.523802') end timestamp('2019-01-26 03:06:23.523824')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi') set quota('4', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 22:33:24.107016') end timestamp('2019-01-26 02:36:24.107022')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 16:52:24.106984') end timestamp('2019-01-25 22:09:24.107008')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block service('facebook'), traffic('social-media') start timestamp('2019-01-25 22:21:24.107208') end timestamp('2019-01-26 02:24:24.107214')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') block protocol('quic'), service('netflix') start timestamp('2019-01-25 17:10:24.107190') end timestamp('2019-01-25 21:09:24.107201')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') set quota('3', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('min', '10', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') start timestamp('2019-01-25 21:45:24.251276') end timestamp('2019-01-26 02:57:24.251281')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 16:04:24.251264') end timestamp('2019-01-25 20:46:24.251270')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 18:41:24.519043') end timestamp('2019-01-26 04:06:24.519048')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 17:37:24.519010') end timestamp('2019-01-26 02:41:24.519035')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('5', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 18:18:24.722102') end timestamp('2019-01-26 02:15:24.722107')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') unset bandwidth('min', '60', 'mbps') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 17:14:24.722074') end timestamp('2019-01-26 03:28:24.722095')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 22:55:25.093492') end timestamp('2019-01-26 03:25:25.093497')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 16:42:25.093461') end timestamp('2019-01-25 20:40:25.093484')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall') set quota('6', 'gb/wk') block service('amazon-prime'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow traffic('social-media'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('snmp'), protocol('icmp') start timestamp('2019-01-25 21:28:27.055316') end timestamp('2019-01-26 03:48:27.055327')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set quota('8', 'gb/wk') allow service('vimeo') start timestamp('2019-01-25 16:28:27.055153') end timestamp('2019-01-25 20:38:27.055268')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 18:23:27.175981') end timestamp('2019-01-26 02:12:27.175987')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') unset quota('2', 'gb/wk') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 17:48:27.175941') end timestamp('2019-01-26 03:14:27.175973')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '30', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('amazon-prime')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block protocol('sftp'), service('youtube') start timestamp('2019-01-25 21:38:27.605158') end timestamp('2019-01-26 03:37:27.605164')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('parental-control') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 15:29:27.605123') end timestamp('2019-01-25 21:22:27.605149')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('firewall') block protocol('telnet'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids'), middlebox('dpi') block protocol('udp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') unset quota('5', 'gb/wk') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 18:16:28.991814') end timestamp('2019-01-26 02:28:28.991820')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 18:04:28.991782') end timestamp('2019-01-26 02:24:28.991807')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('torrent'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 21:54:31.738616') end timestamp('2019-01-26 02:17:31.738621')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('ids'), middlebox('firewall') allow protocol('sftp'), traffic('peer2peer') start timestamp('2019-01-25 16:16:31.738585') end timestamp('2019-01-25 20:44:31.738608')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 18:39:31.949393') end timestamp('2019-01-26 02:42:31.949399')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 17:58:31.949350') end timestamp('2019-01-26 02:33:31.949384')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 22:14:31.949653') end timestamp('2019-01-26 03:51:31.949658')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 17:07:31.949632') end timestamp('2019-01-25 20:59:31.949645')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') allow service('amazon-prime'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') block service('amazon-prime'), service('stremio') start timestamp('2019-01-25 22:47:31.969977') end timestamp('2019-01-26 02:43:31.969998')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block protocol('quic'), protocol('ftp') start timestamp('2019-01-25 16:41:31.969777') end timestamp('2019-01-25 22:03:31.969935')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('5', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('ids') set quota('1', 'gb/wk') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 19:08:32.672501') end timestamp('2019-01-26 04:05:32.672507')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 18:21:32.672461') end timestamp('2019-01-26 03:01:32.672492')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 21:53:32.672739') end timestamp('2019-01-26 04:04:32.672744')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 16:22:32.672728') end timestamp('2019-01-25 21:01:32.672734')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('udp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '70', 'mbps') allow protocol('smtp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow protocol('udp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') allow service('popcorn-time'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') allow service('bittorrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('ids') allow traffic('social-media'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '20', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') add middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 22:16:35.102742') end timestamp('2019-01-26 02:41:35.102752')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 15:42:35.102689') end timestamp('2019-01-25 20:33:35.102728')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') allow protocol('http'), traffic('social-media') start timestamp('2019-01-25 21:24:35.252573') end timestamp('2019-01-26 03:24:35.252579')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control') allow traffic('peer2peer') start timestamp('2019-01-25 15:54:35.252531') end timestamp('2019-01-25 20:24:35.252562')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('tcp'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 22:49:36.968158') end timestamp('2019-01-26 02:43:36.968163')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('dpi') allow protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 16:07:36.968121') end timestamp('2019-01-25 21:01:36.968150')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('bittorrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('8', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 21:21:37.210664') end timestamp('2019-01-26 03:58:37.210669')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 16:09:37.210635') end timestamp('2019-01-25 20:53:37.210656')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') block protocol('https'), service('instagram') start timestamp('2019-01-25 21:56:37.447687') end timestamp('2019-01-26 04:02:37.447692')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 16:49:37.447660') end timestamp('2019-01-25 21:46:37.447679')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('parental-control'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), service('facebook') start timestamp('2019-01-25 17:21:38.235138') end timestamp('2019-01-26 03:58:38.235143')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), protocol('tcp') start timestamp('2019-01-25 19:07:38.235095') end timestamp('2019-01-26 03:58:38.235130')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('8', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('1', 'gb/wk') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('http'), service('bittorrent') start timestamp('2019-01-25 19:10:39.305366') end timestamp('2019-01-26 03:50:39.305371')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 18:25:39.305334') end timestamp('2019-01-26 02:37:39.305359')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block protocol('tcp'), protocol('udp') start timestamp('2019-01-25 23:02:39.782122') end timestamp('2019-01-26 02:29:39.782126')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 17:08:39.782112') end timestamp('2019-01-25 21:31:39.782117')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow protocol('ftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('popcorn-time') start timestamp('2019-01-25 18:41:39.922867') end timestamp('2019-01-26 03:35:39.922872')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:58:39.922842') end timestamp('2019-01-26 03:44:39.922860')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('parental-control') set quota('7', 'gb/wk') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block protocol('http'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '30', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '10', 'mbps') allow protocol('quic'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('8', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('dpi') block service('facebook'), service('netflix') start timestamp('2019-01-25 22:50:42.440003') end timestamp('2019-01-26 03:38:42.440009')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow service('facebook'), service('netflix') start timestamp('2019-01-25 15:30:42.439976') end timestamp('2019-01-25 20:52:42.439995')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') remove middlebox('firewall') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids') set bandwidth('min', '90', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') set quota('7', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids') block service('amazon-prime'), protocol('tcp') start timestamp('2019-01-25 22:20:45.891935') end timestamp('2019-01-26 03:47:45.891940')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow service('instagram'), service('netflix') start timestamp('2019-01-25 16:43:45.891907') end timestamp('2019-01-25 20:18:45.891928')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block protocol('https'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('stremio'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') block protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 22:21:46.961241') end timestamp('2019-01-26 03:28:46.961247')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 16:42:46.961209') end timestamp('2019-01-25 21:29:46.961231')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('sftp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('snmp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow traffic('social-media'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 22:28:47.596754') end timestamp('2019-01-26 02:22:47.596760')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids') allow service('facebook'), service('bittorrent') start timestamp('2019-01-25 16:23:47.596722') end timestamp('2019-01-25 21:27:47.596745')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('stremio'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('stremio'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('social-media'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('snmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') start timestamp('2019-01-25 22:56:49.387451') end timestamp('2019-01-26 02:35:49.387456')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('firewall') start timestamp('2019-01-25 16:38:49.387421') end timestamp('2019-01-25 21:48:49.387443')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset quota('2', 'gb/wk') block protocol('snmp'), service('youtube') start timestamp('2019-01-25 22:15:49.752358') end timestamp('2019-01-26 03:45:49.752363')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 16:19:49.752328') end timestamp('2019-01-25 21:19:49.752350')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block protocol('sftp'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('snmp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') block service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('parental-control'), middlebox('load-balancer') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('dpi') block protocol('icmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block protocol('http'), service('facebook') start timestamp('2019-01-25 22:12:52.039058') end timestamp('2019-01-26 02:54:52.039062')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 16:27:52.039048') end timestamp('2019-01-25 20:38:52.039053')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('telnet') start timestamp('2019-01-25 18:30:52.103565') end timestamp('2019-01-26 02:43:52.103570')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 18:40:52.103542') end timestamp('2019-01-26 02:40:52.103558')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('firewall') set quota('8', 'gb/wk') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 23:10:53.108559') end timestamp('2019-01-26 02:25:53.108564')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 16:56:53.108533') end timestamp('2019-01-25 20:21:53.108551')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('dpi') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') start timestamp('2019-01-25 21:32:53.972702') end timestamp('2019-01-26 03:29:53.972708')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') start timestamp('2019-01-25 15:31:53.972676') end timestamp('2019-01-25 21:04:53.972695')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi') set quota('2', 'gb/wk') block protocol('icmp'), protocol('ftp') start timestamp('2019-01-25 17:43:54.182281') end timestamp('2019-01-26 02:14:54.182286')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('icmp'), service('netflix') start timestamp('2019-01-25 17:47:54.182259') end timestamp('2019-01-26 03:39:54.182275')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids') unset bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 17:39:54.882108') end timestamp('2019-01-26 02:43:54.882113')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 19:09:54.882081') end timestamp('2019-01-26 03:02:54.882101')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 18:54:55.014923') end timestamp('2019-01-26 04:05:55.014928')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 19:08:55.014898') end timestamp('2019-01-26 03:24:55.014915')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('ids') allow service('facebook'), service('youtube') start timestamp('2019-01-25 22:42:55.082552') end timestamp('2019-01-26 02:40:55.082557')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('ids'), middlebox('parental-control') allow service('vimeo') start timestamp('2019-01-25 16:18:55.082531') end timestamp('2019-01-25 21:34:55.082545')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow protocol('tcp'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi') set quota('6', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 18:47:56.417693') end timestamp('2019-01-26 03:39:56.417698')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 18:12:56.417663') end timestamp('2019-01-26 03:48:56.417686')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 22:37:56.660181') end timestamp('2019-01-26 03:01:56.660186')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('instagram'), service('facebook') start timestamp('2019-01-25 16:48:56.660170') end timestamp('2019-01-25 21:31:56.660176')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 18:13:56.694070') end timestamp('2019-01-26 03:17:56.694075')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 18:00:56.694043') end timestamp('2019-01-26 02:32:56.694063')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('1', 'gb/wk') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('7', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('7', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block protocol('udp'), traffic('streaming') start timestamp('2019-01-25 22:55:58.242552') end timestamp('2019-01-26 02:44:58.242557')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('load-balancer') allow service('facebook') start timestamp('2019-01-25 16:38:58.242523') end timestamp('2019-01-25 21:32:58.242544')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('parental-control'), middlebox('dpi') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('sftp'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow traffic('peer2peer'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('sftp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') set bandwidth('min', '50', 'mbps') allow traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('2', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('https'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') unset quota('9', 'gb/wk') block protocol('smtp'), service('instagram') start timestamp('2019-01-25 18:03:59.937760') end timestamp('2019-01-26 04:08:59.937765')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 17:20:59.937727') end timestamp('2019-01-26 03:51:59.937753')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('smtp'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('tcp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') unset quota('4', 'gb/wk') block traffic('social-media'), service('youtube') start timestamp('2019-01-25 18:17:00.248546') end timestamp('2019-01-26 02:39:00.248552')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 19:07:00.248516') end timestamp('2019-01-26 02:55:00.248539')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow service('vimeo'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('https'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') set quota('6', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '30', 'mbps') allow service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow protocol('sftp'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow protocol('tcp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 22:29:01.366780') end timestamp('2019-01-26 03:18:01.366786')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 16:56:01.366734') end timestamp('2019-01-25 20:51:01.366771')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block protocol('http'), service('bittorrent') start timestamp('2019-01-25 23:04:01.526909') end timestamp('2019-01-26 02:30:01.526915')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('dpi') allow protocol('udp'), service('bittorrent') start timestamp('2019-01-25 16:50:01.526880') end timestamp('2019-01-25 22:12:01.526902')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') unset bandwidth('min', '60', 'mbps') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 18:31:01.679524') end timestamp('2019-01-26 03:51:01.679531')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('icmp') start timestamp('2019-01-25 18:59:01.679486') end timestamp('2019-01-26 03:48:01.679516')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('9', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('8', 'gb/wk') allow traffic('torrent'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block traffic('torrent') start timestamp('2019-01-25 23:02:02.640347') end timestamp('2019-01-26 03:15:02.640352')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('ids'), middlebox('parental-control') allow service('instagram'), service('facebook') start timestamp('2019-01-25 16:48:02.640318') end timestamp('2019-01-25 21:45:02.640340')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('dpi') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 21:51:04.189449') end timestamp('2019-01-26 03:24:04.189454')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 16:07:04.189415') end timestamp('2019-01-25 20:22:04.189441')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall') set quota('8', 'gb/wk') allow protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('icmp'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 23:11:04.939198') end timestamp('2019-01-26 02:27:04.939211')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset quota('3', 'gb/wk') allow protocol('sftp'), service('facebook') start timestamp('2019-01-25 16:02:04.939102') end timestamp('2019-01-25 21:21:04.939141')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('dpi') set quota('3', 'gb/wk') allow protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('parental-control') set quota('6', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids') set bandwidth('min', '90', 'mbps') block service('facebook'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 17:54:06.716913') end timestamp('2019-01-26 03:19:06.716917')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 18:46:06.716883') end timestamp('2019-01-26 02:30:06.716906')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall') set quota('1', 'gb/wk') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 22:46:07.342965') end timestamp('2019-01-26 04:01:07.342970')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('sftp'), service('vimeo') start timestamp('2019-01-25 15:55:07.342956') end timestamp('2019-01-25 20:14:07.342961')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('https'), service('netflix') start timestamp('2019-01-25 18:16:07.456945') end timestamp('2019-01-26 03:08:07.456950')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') unset bandwidth('max', '90', 'mbps') allow service('instagram'), traffic('social-media') start timestamp('2019-01-25 17:32:07.456918') end timestamp('2019-01-26 02:21:07.456938')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('firewall') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('facebook'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('http'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('parental-control'), middlebox('ids') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 22:02:08.835441') end timestamp('2019-01-26 02:22:08.835446')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 16:03:08.835405') end timestamp('2019-01-25 20:19:08.835433')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 22:39:09.528263') end timestamp('2019-01-26 02:37:09.528268')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('ids') allow protocol('icmp'), service('instagram') start timestamp('2019-01-25 16:20:09.528230') end timestamp('2019-01-25 20:18:09.528255')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 21:41:09.528454') end timestamp('2019-01-26 02:13:09.528460')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') block traffic('social-media'), service('facebook') start timestamp('2019-01-25 17:04:09.528435') end timestamp('2019-01-25 20:26:09.528448')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set quota('1', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('6', 'gb/wk') allow protocol('quic'), protocol('tcp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set quota('8', 'gb/wk') allow service('vimeo'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk') block protocol('http'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('5', 'gb/wk') allow protocol('http'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') block protocol('snmp'), service('netflix') start timestamp('2019-01-25 23:04:11.300618') end timestamp('2019-01-26 03:21:11.300623')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('load-balancer'), middlebox('ids') block service('stremio'), protocol('smtp') start timestamp('2019-01-25 16:32:11.300584') end timestamp('2019-01-25 20:21:11.300611')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer') block service('instagram') start timestamp('2019-01-25 22:21:11.447531') end timestamp('2019-01-26 02:36:11.447537')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 16:56:11.447497') end timestamp('2019-01-25 21:09:11.447515')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset quota('1', 'gb/wk') start timestamp('2019-01-25 22:50:11.740176') end timestamp('2019-01-26 02:26:11.740181')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 16:45:11.740166') end timestamp('2019-01-25 20:37:11.740171')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 17:30:12.054671') end timestamp('2019-01-26 03:56:12.054676')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 18:18:12.054640') end timestamp('2019-01-26 03:25:12.054664')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('5', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') set quota('2', 'gb/wk') allow protocol('tcp'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') allow protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 18:40:12.406603') end timestamp('2019-01-26 02:58:12.406608')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset bandwidth('min', '70', 'mbps') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 19:00:12.406571') end timestamp('2019-01-26 03:05:12.406596')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block protocol('udp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('ids') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('7', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('dpi') set quota('4', 'gb/wk') allow protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('http'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') unset bandwidth('min', '90', 'mbps') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 17:38:13.951211') end timestamp('2019-01-26 02:36:13.951216')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') allow service('facebook'), traffic('social-media') start timestamp('2019-01-25 18:23:13.951181') end timestamp('2019-01-26 03:22:13.951204')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('3', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 22:32:14.272256') end timestamp('2019-01-26 02:36:14.272262')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 15:35:14.272229') end timestamp('2019-01-25 20:20:14.272249')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('icmp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 18:35:17.126481') end timestamp('2019-01-26 03:58:17.126488')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 17:56:17.126383') end timestamp('2019-01-26 03:29:17.126472')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('stremio'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') block service('vimeo'), protocol('http') start timestamp('2019-01-25 21:58:17.602057') end timestamp('2019-01-26 02:27:17.602062')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') allow service('vimeo'), protocol('ftp') start timestamp('2019-01-25 15:23:17.602029') end timestamp('2019-01-25 21:34:17.602050')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block protocol('https'), service('facebook') start timestamp('2019-01-25 22:12:17.602168') end timestamp('2019-01-26 02:30:17.602173')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 16:38:17.602154') end timestamp('2019-01-25 21:33:17.602163')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow protocol('snmp'), protocol('ftp') start timestamp('2019-01-25 22:03:17.602489') end timestamp('2019-01-26 04:02:17.602493')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') allow traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 15:46:17.602479') end timestamp('2019-01-25 21:16:17.602484')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 22:35:17.733459') end timestamp('2019-01-26 03:17:17.733465')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall') allow protocol('tcp'), service('facebook') start timestamp('2019-01-25 16:15:17.733387') end timestamp('2019-01-25 22:09:17.733446')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set bandwidth('max', '50', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '10', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), service('stremio') start timestamp('2019-01-25 22:54:17.953280') end timestamp('2019-01-26 04:02:17.953285')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') unset bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 15:33:17.953250') end timestamp('2019-01-25 20:15:17.953272')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('max', '50', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('5', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), service('vimeo')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block protocol('tcp'), service('stremio') start timestamp('2019-01-25 21:36:18.571799') end timestamp('2019-01-26 03:33:18.571803')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 15:47:18.571790') end timestamp('2019-01-25 21:02:18.571794')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow protocol('udp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 22:42:19.741916') end timestamp('2019-01-26 03:21:19.741920')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 16:11:19.741888') end timestamp('2019-01-25 21:42:19.741908')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('quic'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('quic'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') set bandwidth('min', '40', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '80', 'mbps') allow protocol('http'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset quota('3', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow protocol('sftp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 17:49:21.253019') end timestamp('2019-01-26 02:48:21.253024')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '80', 'mbps') allow protocol('quic'), traffic('social-media') start timestamp('2019-01-25 18:15:21.252992') end timestamp('2019-01-26 03:25:21.253012')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('icmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow protocol('icmp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('3', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids') allow service('youtube'), service('facebook') start timestamp('2019-01-25 21:53:22.115755') end timestamp('2019-01-26 02:50:22.115760')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 16:39:22.115729') end timestamp('2019-01-25 20:56:22.115748')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 21:59:22.183365') end timestamp('2019-01-26 03:22:22.183379')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 15:47:22.183329') end timestamp('2019-01-25 20:51:22.183357')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('sftp'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 19:10:23.196296') end timestamp('2019-01-26 03:11:23.196301')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') start timestamp('2019-01-25 17:49:23.196270') end timestamp('2019-01-26 03:33:23.196290')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset quota('6', 'gb/wk') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 17:53:23.293090') end timestamp('2019-01-26 02:15:23.293094')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('1', 'gb/wk') allow traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 18:26:23.293069') end timestamp('2019-01-26 03:46:23.293084')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('ids') set bandwidth('max', '70', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('7', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('4', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set quota('6', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '60', 'mbps') allow protocol('ftp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('5', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 18:36:25.619928') end timestamp('2019-01-26 03:21:25.619933')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 18:39:25.619900') end timestamp('2019-01-26 03:10:25.619922')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('ids') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow traffic('streaming'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('ids') set quota('1', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('torrent'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('8', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow protocol('http'), service('popcorn-time') start timestamp('2019-01-25 22:37:26.455746') end timestamp('2019-01-26 03:55:26.455751')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block service('stremio'), service('youtube') start timestamp('2019-01-25 15:26:26.455719') end timestamp('2019-01-25 21:26:26.455739')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 22:13:27.240677') end timestamp('2019-01-26 03:03:27.240682')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 15:42:27.240650') end timestamp('2019-01-25 21:12:27.240670')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('3', 'gb/wk') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('https'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block service('facebook'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('parental-control') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') unset quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 22:14:29.086788') end timestamp('2019-01-26 03:13:29.086793')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('stremio'), service('instagram') start timestamp('2019-01-25 16:03:29.086760') end timestamp('2019-01-25 22:07:29.086780')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow protocol('smtp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('4', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block protocol('ftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') remove middlebox('dpi') block traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 21:44:29.900549') end timestamp('2019-01-26 02:47:29.900554')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow traffic('torrent'), protocol('smtp') start timestamp('2019-01-25 16:46:29.900523') end timestamp('2019-01-25 21:00:29.900542')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow service('stremio'), service('facebook') start timestamp('2019-01-25 21:48:31.456160') end timestamp('2019-01-26 04:08:31.456165')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 15:54:31.456134') end timestamp('2019-01-25 21:08:31.456153')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 22:09:31.551963') end timestamp('2019-01-26 03:29:31.551967')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 16:20:31.551943') end timestamp('2019-01-25 20:28:31.551956')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block service('instagram'), protocol('udp') start timestamp('2019-01-25 18:06:33.165982') end timestamp('2019-01-26 02:58:33.165987')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 19:09:33.165955') end timestamp('2019-01-26 03:05:33.165976')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('dpi') unset quota('1', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer') set quota('5', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('https'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 23:06:34.358832') end timestamp('2019-01-26 02:26:34.358837')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 16:19:34.358805') end timestamp('2019-01-25 20:24:34.358824')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('3', 'gb/wk') block protocol('https'), protocol('smtp') start timestamp('2019-01-25 17:56:34.491344') end timestamp('2019-01-26 02:57:34.491349')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set quota('1', 'gb/wk') allow protocol('https'), service('netflix') start timestamp('2019-01-25 17:12:34.491321') end timestamp('2019-01-26 03:53:34.491337')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 18:15:34.555892') end timestamp('2019-01-26 03:45:34.555897')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') start timestamp('2019-01-25 17:44:34.555870') end timestamp('2019-01-26 02:28:34.555885')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 23:10:36.082385') end timestamp('2019-01-26 04:09:36.082400')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow protocol('smtp'), traffic('social-media') start timestamp('2019-01-25 15:51:36.082347') end timestamp('2019-01-25 21:34:36.082378')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('2', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('sftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('stremio'), service('netflix') start timestamp('2019-01-25 22:33:36.683688') end timestamp('2019-01-26 04:12:36.683692')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 16:15:36.683678') end timestamp('2019-01-25 20:30:36.683683')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('https'), service('popcorn-time') start timestamp('2019-01-25 19:06:37.098412') end timestamp('2019-01-26 03:35:37.098416')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 17:55:37.098390') end timestamp('2019-01-26 03:26:37.098406')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 22:36:37.816192') end timestamp('2019-01-26 03:17:37.816196')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 15:52:37.816167') end timestamp('2019-01-25 22:02:37.816185')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 22:58:38.318239') end timestamp('2019-01-26 03:51:38.318244')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('facebook'), service('youtube') start timestamp('2019-01-25 17:03:38.318213') end timestamp('2019-01-25 20:42:38.318232')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('7', 'gb/wk') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 21:41:39.783842') end timestamp('2019-01-26 03:35:39.783847')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 16:53:39.783818') end timestamp('2019-01-25 21:22:39.783835')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('http') start timestamp('2019-01-25 17:36:40.572876') end timestamp('2019-01-26 02:57:40.572882')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('4', 'gb/wk') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 17:57:40.572847') end timestamp('2019-01-26 03:13:40.572869')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') start timestamp('2019-01-25 21:57:41.843224') end timestamp('2019-01-26 02:41:41.843229')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') start timestamp('2019-01-25 16:05:41.843198') end timestamp('2019-01-25 20:57:41.843216')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow protocol('quic'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') unset bandwidth('min', '40', 'mbps') block service('youtube'), traffic('streaming') start timestamp('2019-01-25 22:19:42.284605') end timestamp('2019-01-26 02:20:42.284610')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall') unset bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 15:19:42.284596') end timestamp('2019-01-25 20:58:42.284601')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow protocol('icmp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 22:41:43.441538') end timestamp('2019-01-26 04:00:43.441544')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('load-balancer') set quota('6', 'gb/wk') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 16:33:43.441512') end timestamp('2019-01-25 21:07:43.441531')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set quota('1', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 18:26:44.638030') end timestamp('2019-01-26 03:54:44.638034')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 17:27:44.638000') end timestamp('2019-01-26 03:42:44.638022')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') start timestamp('2019-01-25 23:05:44.670145') end timestamp('2019-01-26 03:49:44.670149')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 15:23:44.670136') end timestamp('2019-01-25 20:35:44.670140')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 17:36:44.734315') end timestamp('2019-01-26 03:50:44.734329')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '30', 'mbps') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 18:52:44.734293') end timestamp('2019-01-26 03:08:44.734308')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 22:56:45.054289') end timestamp('2019-01-26 03:26:45.054294')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('dpi') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 16:03:45.054267') end timestamp('2019-01-25 21:23:45.054282')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set quota('2', 'gb/wk') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('dpi') unset quota('3', 'gb/wk') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 22:51:45.461208') end timestamp('2019-01-26 03:03:45.461213')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') add middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 15:18:45.461183') end timestamp('2019-01-25 21:30:45.461201')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset quota('9', 'gb/wk') start timestamp('2019-01-25 22:10:46.651737') end timestamp('2019-01-26 04:07:46.651742')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') unset quota('5', 'gb/wk') start timestamp('2019-01-25 16:51:46.651709') end timestamp('2019-01-25 21:06:46.651729')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control') set quota('8', 'gb/wk') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') set bandwidth('max', '10', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 21:12:46.813738') end timestamp('2019-01-26 03:23:46.813743')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 16:00:46.813729') end timestamp('2019-01-25 20:48:46.813734')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') start timestamp('2019-01-25 22:14:48.138888') end timestamp('2019-01-26 03:44:48.138894')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 15:25:48.138849') end timestamp('2019-01-25 21:21:48.138879')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 18:56:48.171490') end timestamp('2019-01-26 03:58:48.171495')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:22:48.171466') end timestamp('2019-01-26 02:15:48.171482')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') allow protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('telnet'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '20', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('ftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set quota('4', 'gb/wk') block protocol('https'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block protocol('quic'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall') set quota('1', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('sftp') start timestamp('2019-01-25 18:46:49.705612') end timestamp('2019-01-26 03:15:49.705616')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('amazon-prime') start timestamp('2019-01-25 18:18:49.705585') end timestamp('2019-01-26 03:38:49.705605')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('tcp'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids') set quota('5', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow protocol('telnet'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 21:54:51.846169') end timestamp('2019-01-26 03:27:51.846174')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset quota('5', 'gb/wk') start timestamp('2019-01-25 15:50:51.846142') end timestamp('2019-01-25 20:45:51.846162')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('peer2peer'), protocol('sftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block protocol('smtp'), protocol('http') start timestamp('2019-01-25 22:09:52.935648') end timestamp('2019-01-26 03:53:52.935666')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 16:11:52.935599') end timestamp('2019-01-25 20:45:52.935634')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '70', 'mbps') block service('stremio'), service('facebook') start timestamp('2019-01-25 19:05:52.999703') end timestamp('2019-01-26 02:58:52.999708')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 17:26:52.999681') end timestamp('2019-01-26 03:41:52.999697')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids') unset quota('4', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set quota('8', 'gb/wk') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('telnet'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 21:59:54.014622') end timestamp('2019-01-26 03:43:54.014627')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow protocol('http'), service('popcorn-time') start timestamp('2019-01-25 15:54:54.014593') end timestamp('2019-01-25 21:09:54.014614')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') unset quota('2', 'gb/wk') block protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 18:08:54.478845') end timestamp('2019-01-26 03:03:54.478850')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:09:54.478817') end timestamp('2019-01-26 03:13:54.478838')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 22:21:54.610557') end timestamp('2019-01-26 03:53:54.610562')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 16:23:54.610535') end timestamp('2019-01-25 20:43:54.610550')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:13:54.699764') end timestamp('2019-01-26 02:41:54.699769')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 17:14:54.699741') end timestamp('2019-01-26 03:46:54.699758')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('snmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow service('bittorrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 21:24:56.177446') end timestamp('2019-01-26 02:21:56.177451')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 15:20:56.177420') end timestamp('2019-01-25 21:20:56.177439')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow protocol('http'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 17:44:56.238108') end timestamp('2019-01-26 02:56:56.238114')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 18:31:56.238079') end timestamp('2019-01-26 02:27:56.238102')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('9', 'gb/wk') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 22:08:58.010440') end timestamp('2019-01-26 04:06:58.010448')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow service('amazon-prime'), service('instagram') start timestamp('2019-01-25 15:23:58.010385') end timestamp('2019-01-25 20:27:58.010419')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 21:58:58.010602') end timestamp('2019-01-26 02:23:58.010607')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') allow protocol('smtp'), service('netflix') start timestamp('2019-01-25 15:26:58.010578') end timestamp('2019-01-25 21:47:58.010592')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('http'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') block protocol('udp'), service('bittorrent') start timestamp('2019-01-25 22:21:58.061374') end timestamp('2019-01-26 03:53:58.061379')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 16:35:58.061353') end timestamp('2019-01-25 21:18:58.061367')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 22:16:58.157607') end timestamp('2019-01-26 04:01:58.157612')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block traffic('torrent'), protocol('udp') start timestamp('2019-01-25 16:55:58.157584') end timestamp('2019-01-25 21:36:58.157600')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('amazon-prime'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block protocol('telnet'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('https'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 22:36:00.197989') end timestamp('2019-01-26 03:16:00.197995')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('bittorrent'), service('netflix') start timestamp('2019-01-25 17:06:00.197962') end timestamp('2019-01-25 22:08:00.197982')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 17:19:00.525443') end timestamp('2019-01-26 03:26:00.525448')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 19:02:00.525418') end timestamp('2019-01-26 02:16:00.525436')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 17:22:00.766738') end timestamp('2019-01-26 03:32:00.766743')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') unset quota('1', 'gb/wk') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 18:23:00.766715') end timestamp('2019-01-26 02:48:00.766731')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('https'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') start timestamp('2019-01-25 18:50:01.541818') end timestamp('2019-01-26 02:43:01.541823')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') start timestamp('2019-01-25 18:42:01.541793') end timestamp('2019-01-26 02:58:01.541812')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 21:34:01.591971') end timestamp('2019-01-26 03:50:01.591975')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 16:49:01.591961') end timestamp('2019-01-25 21:02:01.591966')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 21:34:01.608949') end timestamp('2019-01-26 03:38:01.608954')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('social-media'), service('netflix') start timestamp('2019-01-25 15:34:01.608929') end timestamp('2019-01-25 20:58:01.608943')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow protocol('quic'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 21:40:02.311035') end timestamp('2019-01-26 03:49:02.311053')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 16:48:02.310996') end timestamp('2019-01-25 20:19:02.311022')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow service('youtube'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('http'), traffic('social-media') start timestamp('2019-01-25 18:23:02.704078') end timestamp('2019-01-26 03:43:02.704083')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset quota('6', 'gb/wk') allow protocol('tcp'), protocol('https') start timestamp('2019-01-25 18:52:02.704056') end timestamp('2019-01-26 02:21:02.704072')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 18:19:02.790586') end timestamp('2019-01-26 04:03:02.790591')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') unset quota('5', 'gb/wk') block protocol('telnet'), protocol('smtp') start timestamp('2019-01-25 17:51:02.790560') end timestamp('2019-01-26 02:17:02.790579')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('https'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 21:55:03.083976') end timestamp('2019-01-26 02:58:03.083981')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 15:42:03.083952') end timestamp('2019-01-25 20:28:03.083969')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') add middlebox('ids'), middlebox('dpi') block traffic('social-media') start timestamp('2019-01-25 21:56:03.455110') end timestamp('2019-01-26 02:29:03.455116')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer') allow service('instagram'), service('youtube') start timestamp('2019-01-25 16:37:03.455082') end timestamp('2019-01-25 20:45:03.455102')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 22:33:03.585634') end timestamp('2019-01-26 03:06:03.585648')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('instagram'), service('netflix') start timestamp('2019-01-25 16:07:03.585600') end timestamp('2019-01-25 21:20:03.585626')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block protocol('telnet'), protocol('http') start timestamp('2019-01-25 21:56:03.602171') end timestamp('2019-01-26 02:46:03.602176')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') allow protocol('tcp'), protocol('http') start timestamp('2019-01-25 15:29:03.602142') end timestamp('2019-01-25 20:44:03.602155')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('popcorn-time'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') set quota('4', 'gb/wk') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('3', 'gb/wk') allow service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi') set quota('7', 'gb/wk') allow service('amazon-prime')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('3', 'gb/wk') allow protocol('snmp'), service('youtube') start timestamp('2019-01-25 21:49:04.594587') end timestamp('2019-01-26 02:25:04.594592')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 16:54:04.594561') end timestamp('2019-01-25 21:18:04.594579')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '50', 'mbps') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 22:08:05.336437') end timestamp('2019-01-26 03:30:05.336442')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 16:18:05.336400') end timestamp('2019-01-25 20:17:05.336429')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '50', 'mbps') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 22:14:05.469641') end timestamp('2019-01-26 02:56:05.469646')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('parental-control') unset quota('7', 'gb/wk') block traffic('social-media') start timestamp('2019-01-25 16:13:05.469618') end timestamp('2019-01-25 20:14:05.469633')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('parental-control') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 22:51:05.552339') end timestamp('2019-01-26 03:21:05.552344')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('ids'), middlebox('load-balancer') allow protocol('telnet'), protocol('http') start timestamp('2019-01-25 15:42:05.552314') end timestamp('2019-01-25 20:32:05.552332')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') unset quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 19:07:05.618968') end timestamp('2019-01-26 04:01:05.618973')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow protocol('tcp'), service('facebook') start timestamp('2019-01-25 17:58:05.618936') end timestamp('2019-01-26 03:03:05.618960')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('stremio'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '90', 'mbps') allow protocol('snmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps') block protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 18:47:06.411124') end timestamp('2019-01-26 04:11:06.411128')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('ids') unset bandwidth('max', '30', 'mbps') allow protocol('http'), service('youtube') start timestamp('2019-01-25 17:50:06.411092') end timestamp('2019-01-26 03:59:06.411117')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set quota('5', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('tcp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '30', 'mbps') block protocol('https'), service('instagram') start timestamp('2019-01-25 18:53:07.467351') end timestamp('2019-01-26 02:55:07.467356')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 17:14:07.467327') end timestamp('2019-01-26 03:14:07.467345')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 22:37:08.031309') end timestamp('2019-01-26 04:08:08.031314')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control') start timestamp('2019-01-25 15:54:08.031283') end timestamp('2019-01-25 22:04:08.031301')", 
            "type": "time"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 87, 
                "hierarchical": 73, 
                "negation": 81, 
                "qos": 105, 
                "synonym": 87, 
                "time": 68
            }, 
            "count": 501
        }, 
        "entailment": {
            "byType": {
                "domain": 67, 
                "hierarchical": 76, 
                "negation": 79, 
                "non_coreferent": 58, 
                "qos": 62, 
                "synonym": 72, 
                "time": 85
            }, 
            "count": 499
        }
    }
}