{
    "content": [
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') block service('vimeo')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('4', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 21:43:10.977867') end timestamp('2019-01-26 02:17:10.977872')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') allow service('stremio') start timestamp('2019-01-25 15:57:10.977829') end timestamp('2019-01-25 21:06:10.977859')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('8', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('facebook'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 23:02:11.825222') end timestamp('2019-01-26 02:39:11.825227')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 15:17:11.825198') end timestamp('2019-01-25 20:22:11.825215')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('youtube'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') start timestamp('2019-01-25 21:10:12.196797') end timestamp('2019-01-26 03:43:12.196802')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') start timestamp('2019-01-25 16:35:12.196788') end timestamp('2019-01-25 20:16:12.196793')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 18:10:12.314067') end timestamp('2019-01-26 03:11:12.314074')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') allow service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 18:47:12.313929') end timestamp('2019-01-26 03:57:12.314055')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('telnet'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') unset bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 17:43:12.622186') end timestamp('2019-01-26 03:41:12.622191')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') unset quota('2', 'gb/wk') start timestamp('2019-01-25 17:28:12.622155') end timestamp('2019-01-26 02:24:12.622178')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('8', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '10', 'mbps') block protocol('sftp'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block protocol('quic'), service('netflix') start timestamp('2019-01-25 22:42:13.828526') end timestamp('2019-01-26 03:37:13.828531')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('load-balancer') allow service('stremio'), service('youtube') start timestamp('2019-01-25 15:32:13.828497') end timestamp('2019-01-25 21:30:13.828520')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('ftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 18:52:14.070125') end timestamp('2019-01-26 02:15:14.070129')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 17:44:14.070093') end timestamp('2019-01-26 03:51:14.070118')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block service('vimeo'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('4', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '50', 'mbps') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '50', 'mbps') allow protocol('http'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 18:53:14.970023') end timestamp('2019-01-26 03:00:14.970028')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 19:05:14.969973') end timestamp('2019-01-26 02:32:14.970015')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 21:35:15.183486') end timestamp('2019-01-26 03:49:15.183491')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 16:57:15.183457') end timestamp('2019-01-25 20:38:15.183479')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '30', 'mbps') block traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 17:47:15.287007') end timestamp('2019-01-26 03:22:15.287011')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 17:24:15.286979') end timestamp('2019-01-26 03:18:15.287000')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 22:22:15.287281') end timestamp('2019-01-26 03:23:15.287286')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') allow service('stremio'), service('youtube') start timestamp('2019-01-25 16:15:15.287266') end timestamp('2019-01-25 21:11:15.287275')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow protocol('telnet'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('ids') set quota('3', 'gb/wk') allow service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('ids') set quota('2', 'gb/wk') block protocol('quic'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('3', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('social-media'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block protocol('sftp'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('sftp'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('telnet'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 22:59:18.605341') end timestamp('2019-01-26 03:00:18.605346')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 16:50:18.605315') end timestamp('2019-01-25 21:24:18.605335')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi') set quota('6', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('tcp'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow protocol('http'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('ids') set quota('2', 'gb/wk') block protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 18:55:20.570658') end timestamp('2019-01-26 03:46:20.570662')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('firewall'), middlebox('dpi') unset bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 17:57:20.570628') end timestamp('2019-01-26 03:30:20.570650')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk') block service('popcorn-time'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk') allow protocol('ftp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('quic'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') block protocol('udp') start timestamp('2019-01-25 22:51:20.882320') end timestamp('2019-01-26 02:57:20.882326')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 15:20:20.882308') end timestamp('2019-01-25 21:53:20.882314')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') block service('stremio'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('1', 'gb/wk') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 22:04:20.918056') end timestamp('2019-01-26 02:28:20.918061')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset quota('2', 'gb/wk') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 15:28:20.918029') end timestamp('2019-01-25 21:53:20.918049')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '90', 'mbps') block service('netflix'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 18:47:21.403258') end timestamp('2019-01-26 03:51:21.403262')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') start timestamp('2019-01-25 17:55:21.403235') end timestamp('2019-01-26 02:41:21.403252')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall') allow service('vimeo'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('quic'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('1', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids') set quota('8', 'gb/wk') start timestamp('2019-01-25 18:13:23.117762') end timestamp('2019-01-26 02:34:23.117767')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') start timestamp('2019-01-25 18:44:23.117737') end timestamp('2019-01-26 03:53:23.117756')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('vimeo'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('4', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 21:40:24.577922') end timestamp('2019-01-26 03:36:24.577927')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('telnet'), service('youtube') start timestamp('2019-01-25 16:54:24.577896') end timestamp('2019-01-25 20:08:24.577914')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block protocol('https'), protocol('ftp') start timestamp('2019-01-25 17:10:25.390615') end timestamp('2019-01-26 02:17:25.390619')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('2', 'gb/wk') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 18:23:25.390589') end timestamp('2019-01-26 04:05:25.390609')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('vimeo'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') unset bandwidth('max', '50', 'mbps') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 18:44:26.552013') end timestamp('2019-01-26 02:34:26.552018')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids') unset bandwidth('min', '70', 'mbps') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 18:35:26.551979') end timestamp('2019-01-26 03:24:26.552006')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') set bandwidth('min', '90', 'mbps') block protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow protocol('quic'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') set quota('5', 'gb/wk') allow service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('quic'), service('netflix') start timestamp('2019-01-25 17:58:27.619942') end timestamp('2019-01-26 02:29:27.619947')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') unset quota('9', 'gb/wk') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 18:13:27.619909') end timestamp('2019-01-26 02:39:27.619935')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset quota('4', 'gb/wk') block protocol('snmp'), service('netflix') start timestamp('2019-01-25 18:51:27.672651') end timestamp('2019-01-26 03:53:27.672656')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') allow service('stremio'), service('facebook') start timestamp('2019-01-25 17:10:27.672617') end timestamp('2019-01-26 03:12:27.672644')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 22:27:27.672794') end timestamp('2019-01-26 02:43:27.672799')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') start timestamp('2019-01-25 16:53:27.672780') end timestamp('2019-01-25 21:26:27.672788')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set quota('1', 'gb/wk') allow service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block protocol('quic'), service('netflix') start timestamp('2019-01-25 18:13:28.626948') end timestamp('2019-01-26 03:50:28.626953')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '80', 'mbps') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 17:46:28.626923') end timestamp('2019-01-26 03:44:28.626942')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 17:12:28.924385') end timestamp('2019-01-26 03:03:28.924390')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 17:54:28.924355') end timestamp('2019-01-26 02:18:28.924379')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow protocol('tcp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('ids') set bandwidth('max', '90', 'mbps') block service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall') set quota('1', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') start timestamp('2019-01-25 22:09:29.125745') end timestamp('2019-01-26 02:25:29.125750')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 16:47:29.125702') end timestamp('2019-01-25 21:01:29.125738')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block protocol('smtp'), service('netflix') start timestamp('2019-01-25 22:00:29.224285') end timestamp('2019-01-26 02:35:29.224290')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('https'), service('popcorn-time') start timestamp('2019-01-25 16:44:29.224260') end timestamp('2019-01-25 21:34:29.224277')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('facebook'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('5', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('min', '60', 'mbps') allow protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 22:10:30.142436') end timestamp('2019-01-26 03:08:30.142440')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 15:38:30.142427') end timestamp('2019-01-25 20:39:30.142431')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 19:06:30.255727') end timestamp('2019-01-26 03:52:30.255732')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('4', 'gb/wk') block service('youtube') start timestamp('2019-01-25 17:07:30.255671') end timestamp('2019-01-26 03:38:30.255720')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('ids') set quota('9', 'gb/wk') allow protocol('smtp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('8', 'gb/wk') start timestamp('2019-01-25 18:21:30.972808') end timestamp('2019-01-26 02:49:30.972813')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 17:16:30.972763') end timestamp('2019-01-26 02:55:30.972801')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block service('youtube'), service('netflix') start timestamp('2019-01-25 22:38:31.006520') end timestamp('2019-01-26 04:03:31.006525')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 16:43:31.006487') end timestamp('2019-01-25 21:11:31.006512')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') start timestamp('2019-01-25 23:06:31.195855') end timestamp('2019-01-26 03:14:31.195862')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 15:08:31.195790') end timestamp('2019-01-25 20:28:31.195846')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') allow protocol('tcp'), protocol('snmp') start timestamp('2019-01-25 22:50:31.520530') end timestamp('2019-01-26 03:39:31.520535')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('firewall') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 16:55:31.520504') end timestamp('2019-01-25 20:33:31.520523')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('min', '10', 'mbps') allow traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') start timestamp('2019-01-25 22:08:34.036281') end timestamp('2019-01-26 02:29:34.036286')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 15:21:34.036253') end timestamp('2019-01-25 21:53:34.036274')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 18:03:34.620712') end timestamp('2019-01-26 03:48:34.620717')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('stremio'), service('facebook') start timestamp('2019-01-25 18:33:34.620680') end timestamp('2019-01-26 03:07:34.620705')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('vimeo'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('9', 'gb/wk') start timestamp('2019-01-25 22:15:35.316345') end timestamp('2019-01-26 04:03:35.316350')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') start timestamp('2019-01-25 16:23:35.316317') end timestamp('2019-01-25 22:03:35.316338')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset quota('6', 'gb/wk') block service('instagram'), service('youtube') start timestamp('2019-01-25 18:29:35.351571') end timestamp('2019-01-26 02:48:35.351577')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') unset bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:18:35.351465') end timestamp('2019-01-26 02:18:35.351563')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 21:53:36.096235') end timestamp('2019-01-26 02:44:36.096239')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 17:01:36.096225') end timestamp('2019-01-25 20:11:36.096230')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block service('instagram'), service('youtube') start timestamp('2019-01-25 21:52:36.853273') end timestamp('2019-01-26 03:12:36.853278')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') add middlebox('firewall') allow service('youtube'), service('netflix') start timestamp('2019-01-25 15:45:36.853264') end timestamp('2019-01-25 20:33:36.853269')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('7', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('5', 'gb/wk') block service('stremio'), protocol('snmp') start timestamp('2019-01-25 22:03:37.512551') end timestamp('2019-01-26 03:08:37.512556')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 15:07:37.512523') end timestamp('2019-01-25 20:53:37.512544')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('3', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi'), middlebox('ids') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control') allow protocol('http'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('telnet'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('1', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 17:48:38.893656') end timestamp('2019-01-26 02:32:38.893661')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 18:19:38.893627') end timestamp('2019-01-26 03:18:38.893650')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') set bandwidth('max', '90', 'mbps') allow protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('8', 'gb/wk') block service('stremio'), service('youtube') start timestamp('2019-01-25 19:03:40.245965') end timestamp('2019-01-26 03:27:40.245970')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('instagram'), service('youtube') start timestamp('2019-01-25 18:58:40.245940') end timestamp('2019-01-26 04:01:40.245959')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') set quota('7', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') set quota('2', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('min', '20', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') allow service('facebook'), service('youtube') start timestamp('2019-01-25 21:50:42.240476') end timestamp('2019-01-26 02:43:42.240481')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('firewall') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 15:18:42.240452') end timestamp('2019-01-25 20:34:42.240470')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 21:16:43.107277') end timestamp('2019-01-26 03:02:43.107282')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control') start timestamp('2019-01-25 16:33:43.107248') end timestamp('2019-01-25 20:13:43.107270')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi') unset quota('6', 'gb/wk') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 17:47:43.399264') end timestamp('2019-01-26 03:05:43.399269')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 18:56:43.399238') end timestamp('2019-01-26 02:39:43.399258')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), service('instagram') start timestamp('2019-01-25 23:01:44.145594') end timestamp('2019-01-26 03:46:44.145599')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('instagram'), service('netflix') start timestamp('2019-01-25 16:24:44.145566') end timestamp('2019-01-25 21:10:44.145587')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow protocol('tcp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('3', 'gb/wk') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') allow service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow protocol('http'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('ids') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('dpi') allow service('amazon-prime'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '20', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') set bandwidth('max', '40', 'mbps') allow protocol('sftp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('parental-control') set quota('3', 'gb/wk') block protocol('sftp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block protocol('smtp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 18, 
                "hierarchical": 19, 
                "negation": 21, 
                "qos": 18, 
                "synonym": 16, 
                "time": 21
            }, 
            "count": 113
        }, 
        "entailment": {
            "byType": {
                "domain": 21, 
                "hierarchical": 15, 
                "negation": 19, 
                "non_coreferent": 17, 
                "qos": 24, 
                "synonym": 25, 
                "time": 16
            }, 
            "count": 137
        }
    }
}