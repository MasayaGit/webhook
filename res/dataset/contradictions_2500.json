{
    "content": [
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:31:24.760005') end timestamp('2019-01-25 13:19:24.760010')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 04:00:24.759959') end timestamp('2019-01-25 14:07:24.759998')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('parental-control') allow traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') start timestamp('2019-01-25 09:46:26.935113') end timestamp('2019-01-25 14:12:26.935117')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall') set quota('3', 'gb/wk') start timestamp('2019-01-25 03:57:26.935084') end timestamp('2019-01-25 07:49:26.935106')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 04:10:27.068823') end timestamp('2019-01-25 14:07:27.068827')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 05:07:27.068766') end timestamp('2019-01-25 13:14:27.068803')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset quota('2', 'gb/wk') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 05:36:27.098445') end timestamp('2019-01-25 13:51:27.098450')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('instagram'), service('netflix') start timestamp('2019-01-25 04:19:27.098400') end timestamp('2019-01-25 14:52:27.098439')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 09:53:27.669049') end timestamp('2019-01-25 13:03:27.669055')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') start timestamp('2019-01-25 03:27:27.669010') end timestamp('2019-01-25 07:31:27.669041')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '60', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('telnet'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block service('stremio'), protocol('quic') start timestamp('2019-01-25 04:05:29.249983') end timestamp('2019-01-25 14:18:29.249987')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('2', 'gb/wk') allow protocol('https'), service('youtube') start timestamp('2019-01-25 05:46:29.249961') end timestamp('2019-01-25 14:22:29.249978')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('1', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('sftp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('4', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('7', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids') set bandwidth('min', '50', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') start timestamp('2019-01-25 09:54:30.003076') end timestamp('2019-01-25 14:05:30.003080')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('firewall') start timestamp('2019-01-25 03:21:30.003054') end timestamp('2019-01-25 08:17:30.003070')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids') unset quota('7', 'gb/wk') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 04:22:30.370314') end timestamp('2019-01-25 14:30:30.370331')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset quota('9', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:59:30.370267') end timestamp('2019-01-25 13:43:30.370307')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('2', 'gb/wk') block protocol('snmp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk') allow protocol('telnet'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('8', 'gb/wk') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 05:25:30.613317') end timestamp('2019-01-25 13:43:30.613321')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 04:17:30.613273') end timestamp('2019-01-25 14:05:30.613311')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('netflix'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') unset bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:38:32.422665') end timestamp('2019-01-25 13:11:32.422669')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 03:09:32.422623') end timestamp('2019-01-25 07:33:32.422643')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('load-balancer') set quota('4', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 07:58:32.567282') end timestamp('2019-01-25 13:12:32.567285')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 02:11:32.567274') end timestamp('2019-01-25 07:49:32.567278')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 08:48:34.574436') end timestamp('2019-01-25 13:02:34.574440')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') start timestamp('2019-01-25 01:58:34.574412') end timestamp('2019-01-25 08:44:34.574429')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids') block protocol('quic'), service('bittorrent') start timestamp('2019-01-25 09:21:34.760485') end timestamp('2019-01-25 13:32:34.760501')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi') allow service('bittorrent') start timestamp('2019-01-25 03:41:34.760462') end timestamp('2019-01-25 07:59:34.760478')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 04:34:34.923424') end timestamp('2019-01-25 14:52:34.923428')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('sftp'), protocol('https') start timestamp('2019-01-25 05:08:34.923400') end timestamp('2019-01-25 13:57:34.923418')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 08:28:35.407781') end timestamp('2019-01-25 13:10:35.407786')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('parental-control') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 03:14:35.407756') end timestamp('2019-01-25 07:12:35.407775')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('quic'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') set quota('5', 'gb/wk') allow protocol('tcp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set quota('7', 'gb/wk') block service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 04:27:36.550133') end timestamp('2019-01-25 13:49:36.550137')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 05:15:36.550107') end timestamp('2019-01-25 13:31:36.550127')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 05:54:36.744836') end timestamp('2019-01-25 13:18:36.744840')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset quota('1', 'gb/wk') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 05:42:36.744812') end timestamp('2019-01-25 14:37:36.744830')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('5', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set quota('5', 'gb/wk') block protocol('tcp'), protocol('http') start timestamp('2019-01-25 09:21:36.784627') end timestamp('2019-01-25 13:21:36.784631')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') unset bandwidth('min', '20', 'mbps') allow protocol('udp'), traffic('social-media') start timestamp('2019-01-25 03:56:36.784608') end timestamp('2019-01-25 08:49:36.784621')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('parental-control') block service('vimeo'), protocol('udp') start timestamp('2019-01-25 09:39:37.753629') end timestamp('2019-01-25 14:41:37.753633')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 02:47:37.753594') end timestamp('2019-01-25 08:00:37.753623')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 04:21:38.205259') end timestamp('2019-01-25 14:00:38.205263')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('firewall') set quota('3', 'gb/wk') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 04:19:38.205238') end timestamp('2019-01-25 13:58:38.205254')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') set bandwidth('min', '30', 'mbps') block protocol('telnet'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk') block service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('3', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('sftp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('icmp'), protocol('udp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') set bandwidth('min', '50', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('min', '60', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') allow protocol('sftp'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 08:56:38.975764') end timestamp('2019-01-25 14:18:38.975768')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('parental-control'), middlebox('ids') block service('amazon-prime'), protocol('tcp') start timestamp('2019-01-25 03:50:38.975740') end timestamp('2019-01-25 07:09:38.975758')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '30', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') start timestamp('2019-01-25 08:55:39.253357') end timestamp('2019-01-25 13:51:39.253362')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 02:23:39.253335') end timestamp('2019-01-25 07:04:39.253351')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('3', 'gb/wk') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('2', 'gb/wk') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk') allow protocol('sftp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') remove middlebox('ids') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi') allow protocol('tcp'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') unset quota('4', 'gb/wk') start timestamp('2019-01-25 04:07:40.573431') end timestamp('2019-01-25 14:25:40.573435')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:52:40.573404') end timestamp('2019-01-25 13:27:40.573424')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 08:37:40.600378') end timestamp('2019-01-25 14:42:40.600382')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('youtube'), service('popcorn-time') start timestamp('2019-01-25 01:58:40.600355') end timestamp('2019-01-25 07:50:40.600372')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('quic'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('firewall') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') block service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset quota('2', 'gb/wk') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 08:09:42.512816') end timestamp('2019-01-25 14:16:42.512820')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') unset bandwidth('max', '80', 'mbps') allow service('instagram'), service('facebook') start timestamp('2019-01-25 03:17:42.512789') end timestamp('2019-01-25 07:06:42.512810')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('sftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set quota('6', 'gb/wk') block protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk') allow protocol('tcp'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('vimeo'), protocol('icmp') start timestamp('2019-01-25 08:50:44.002917') end timestamp('2019-01-25 13:57:44.002921')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids') unset bandwidth('max', '90', 'mbps') block protocol('https'), service('facebook') start timestamp('2019-01-25 02:52:44.002892') end timestamp('2019-01-25 07:25:44.002910')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '90', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') set bandwidth('max', '50', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('parental-control') block protocol('smtp'), service('youtube') start timestamp('2019-01-25 09:18:45.738329') end timestamp('2019-01-25 13:03:45.738333')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('youtube'), service('netflix') start timestamp('2019-01-25 03:06:45.738309') end timestamp('2019-01-25 07:04:45.738323')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow protocol('snmp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') unset bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 09:10:46.220995') end timestamp('2019-01-25 14:35:46.220999')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('firewall') unset quota('6', 'gb/wk') start timestamp('2019-01-25 03:53:46.220972') end timestamp('2019-01-25 07:10:46.220989')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block service('facebook'), service('netflix') start timestamp('2019-01-25 08:00:46.248355') end timestamp('2019-01-25 14:58:46.248359')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 03:08:46.248316') end timestamp('2019-01-25 07:33:46.248348')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 08:36:47.804148') end timestamp('2019-01-25 14:47:47.804151')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 02:04:47.804140') end timestamp('2019-01-25 08:31:47.804144')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 05:34:49.375593') end timestamp('2019-01-25 14:40:49.375597')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 04:25:49.375569') end timestamp('2019-01-25 14:04:49.375587')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') allow protocol('quic'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('min', '90', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('5', 'gb/wk') block protocol('https'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('https'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') start timestamp('2019-01-25 09:07:50.158523') end timestamp('2019-01-25 13:49:50.158527')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 03:50:50.158502') end timestamp('2019-01-25 07:15:50.158517')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('8', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block protocol('snmp'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 08:44:51.077694') end timestamp('2019-01-25 13:56:51.077715')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 03:51:51.077652') end timestamp('2019-01-25 07:44:51.077684')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 09:00:51.266130') end timestamp('2019-01-25 13:49:51.266134')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') add middlebox('parental-control'), middlebox('dpi') allow service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 02:44:51.266108') end timestamp('2019-01-25 06:59:51.266123')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow protocol('tcp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 08:14:51.518725') end timestamp('2019-01-25 13:23:51.518729')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 03:30:51.518691') end timestamp('2019-01-25 07:13:51.518719')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('min', '50', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall') unset quota('5', 'gb/wk') block protocol('tcp'), protocol('udp') start timestamp('2019-01-25 09:24:51.568781') end timestamp('2019-01-25 13:44:51.568785')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('load-balancer') unset quota('5', 'gb/wk') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 02:13:51.568761') end timestamp('2019-01-25 08:53:51.568775')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('parental-control') set quota('1', 'gb/wk') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow traffic('torrent'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 05:21:52.160531') end timestamp('2019-01-25 14:27:52.160535')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('https'), traffic('social-media') start timestamp('2019-01-25 05:19:52.160507') end timestamp('2019-01-25 13:43:52.160526')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 08:43:52.285745') end timestamp('2019-01-25 13:10:52.285749')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 02:40:52.285724') end timestamp('2019-01-25 07:48:52.285739')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block protocol('ftp'), traffic('streaming') start timestamp('2019-01-25 08:38:52.434424') end timestamp('2019-01-25 14:51:52.434428')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow service('youtube'), traffic('streaming') start timestamp('2019-01-25 03:43:52.434403') end timestamp('2019-01-25 07:48:52.434419')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('udp'), service('netflix') start timestamp('2019-01-25 08:45:52.714694') end timestamp('2019-01-25 14:58:52.714698')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('firewall'), middlebox('dpi') unset quota('4', 'gb/wk') allow traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 03:35:52.714673') end timestamp('2019-01-25 08:20:52.714688')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('instagram'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') set quota('9', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 05:02:53.635540') end timestamp('2019-01-25 13:47:53.635544')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 04:19:53.635515') end timestamp('2019-01-25 13:36:53.635535')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '90', 'mbps') block service('stremio'), service('instagram') start timestamp('2019-01-25 09:39:54.439119') end timestamp('2019-01-25 13:55:54.439123')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('ids') unset quota('4', 'gb/wk') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 03:47:54.439093') end timestamp('2019-01-25 08:12:54.439113')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('sftp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') set quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 05:23:54.933388') end timestamp('2019-01-25 14:32:54.933392')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids') set quota('8', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 04:59:54.933365') end timestamp('2019-01-25 14:44:54.933382')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') block protocol('https'), service('netflix') start timestamp('2019-01-25 09:45:55.001657') end timestamp('2019-01-25 13:34:55.001661')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow protocol('telnet'), service('instagram') start timestamp('2019-01-25 03:27:55.001635') end timestamp('2019-01-25 08:27:55.001651')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('1', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset quota('2', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block protocol('https'), service('popcorn-time') start timestamp('2019-01-25 03:59:55.784718') end timestamp('2019-01-25 14:24:55.784722')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 05:27:55.784696') end timestamp('2019-01-25 14:27:55.784712')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('amazon-prime')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') set bandwidth('min', '70', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('min', '10', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block protocol('tcp'), protocol('https') start timestamp('2019-01-25 09:01:56.015948') end timestamp('2019-01-25 14:18:56.015952')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '70', 'mbps') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 02:23:56.015922') end timestamp('2019-01-25 07:30:56.015942')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block protocol('telnet'), traffic('torrent') start timestamp('2019-01-25 08:39:56.045522') end timestamp('2019-01-25 14:56:56.045526')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 02:57:56.045498') end timestamp('2019-01-25 08:10:56.045516')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 05:21:56.102394') end timestamp('2019-01-25 14:54:56.102398')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') unset quota('8', 'gb/wk') start timestamp('2019-01-25 05:29:56.102367') end timestamp('2019-01-25 14:43:56.102387')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('firewall'), middlebox('dpi')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 08:14:56.578037') end timestamp('2019-01-25 13:13:56.578044')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow protocol('http'), service('facebook') start timestamp('2019-01-25 03:50:56.577985') end timestamp('2019-01-25 07:55:56.578016')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('https'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow protocol('smtp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('dpi') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer') allow protocol('telnet'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('http'), service('youtube') start timestamp('2019-01-25 05:05:57.740665') end timestamp('2019-01-25 14:29:57.740669')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), service('instagram') start timestamp('2019-01-25 04:13:57.740608') end timestamp('2019-01-25 14:19:57.740659')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 04:36:58.621628') end timestamp('2019-01-25 14:22:58.621632')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 04:47:58.621602') end timestamp('2019-01-25 13:41:58.621621')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '50', 'mbps') block service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:44:58.649660') end timestamp('2019-01-25 13:18:58.649664')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') unset bandwidth('max', '30', 'mbps') allow service('youtube'), protocol('udp') start timestamp('2019-01-25 04:01:58.649608') end timestamp('2019-01-25 14:34:58.649640')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('max', '70', 'mbps') allow traffic('streaming'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 08:25:58.956500') end timestamp('2019-01-25 14:17:58.956504')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 03:47:58.956472') end timestamp('2019-01-25 08:18:58.956493')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block protocol('telnet'), traffic('social-media') start timestamp('2019-01-25 09:43:59.437195') end timestamp('2019-01-25 13:57:59.437199')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow protocol('http'), service('instagram') start timestamp('2019-01-25 02:33:59.437172') end timestamp('2019-01-25 07:47:59.437189')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block protocol('http'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') allow protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 09:19:59.842599') end timestamp('2019-01-25 13:13:59.842603')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') start timestamp('2019-01-25 02:05:59.842577') end timestamp('2019-01-25 07:11:59.842593')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps') block protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 08:23:00.117756') end timestamp('2019-01-25 14:02:00.117761')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') start timestamp('2019-01-25 03:42:00.117733') end timestamp('2019-01-25 07:37:00.117750')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') start timestamp('2019-01-25 09:28:00.452984') end timestamp('2019-01-25 14:00:00.452988')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') unset quota('3', 'gb/wk') start timestamp('2019-01-25 03:44:00.452959') end timestamp('2019-01-25 08:42:00.452977')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 08:27:01.021727') end timestamp('2019-01-25 14:53:01.021731')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 03:23:01.021703') end timestamp('2019-01-25 07:46:01.021721')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('dpi'), middlebox('parental-control') block protocol('quic'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 05:51:01.175415') end timestamp('2019-01-25 14:13:01.175419')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset bandwidth('max', '50', 'mbps') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 05:13:01.175393') end timestamp('2019-01-25 14:07:01.175409')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('quic'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') block protocol('smtp'), service('bittorrent') start timestamp('2019-01-25 08:39:01.263475') end timestamp('2019-01-25 14:17:01.263479')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 03:18:01.263454') end timestamp('2019-01-25 07:11:01.263469')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('ids'), middlebox('firewall') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('3', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') set quota('4', 'gb/wk') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('2', 'gb/wk') allow protocol('tcp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids') set quota('8', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('dpi'), middlebox('ids') unset quota('7', 'gb/wk') block traffic('social-media'), service('youtube') start timestamp('2019-01-25 08:46:01.686912') end timestamp('2019-01-25 14:58:01.686916')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 03:20:01.686904') end timestamp('2019-01-25 07:07:01.686908')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('vimeo'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set quota('1', 'gb/wk') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('sftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('dpi') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:34:01.967367') end timestamp('2019-01-25 13:03:01.967371')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 03:31:01.967344') end timestamp('2019-01-25 07:47:01.967361')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('8', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set bandwidth('max', '70', 'mbps') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '80', 'mbps') allow service('stremio'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 08:05:02.449198') end timestamp('2019-01-25 14:16:02.449202')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') add middlebox('ids') start timestamp('2019-01-25 03:11:02.449176') end timestamp('2019-01-25 07:00:02.449192')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('https'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('3', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set quota('2', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') allow service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') unset quota('3', 'gb/wk') block traffic('peer2peer'), protocol('smtp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 05:41:02.770932') end timestamp('2019-01-25 13:33:02.770936')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:02:02.770885') end timestamp('2019-01-25 13:02:02.770925')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control') set quota('1', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block service('vimeo'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('load-balancer'), middlebox('firewall') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall') block protocol('udp'), service('facebook') start timestamp('2019-01-25 09:10:04.261040') end timestamp('2019-01-25 14:28:04.261044')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow protocol('smtp'), service('youtube') start timestamp('2019-01-25 02:57:04.261018') end timestamp('2019-01-25 08:11:04.261034')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('quic'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '80', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('firewall') set quota('7', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('torrent'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall') set quota('7', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('min', '60', 'mbps') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset quota('8', 'gb/wk') block protocol('http'), service('instagram') start timestamp('2019-01-25 09:25:05.060562') end timestamp('2019-01-25 13:51:05.060566')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') allow protocol('http'), service('bittorrent') start timestamp('2019-01-25 02:32:05.060540') end timestamp('2019-01-25 08:36:05.060556')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') allow traffic('peer2peer'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block protocol('tcp'), service('stremio') start timestamp('2019-01-25 08:48:05.327913') end timestamp('2019-01-25 14:38:05.327917')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('dpi') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 03:38:05.327892') end timestamp('2019-01-25 07:45:05.327907')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('bittorrent'), service('netflix') start timestamp('2019-01-25 09:00:06.785138') end timestamp('2019-01-25 14:45:06.785142')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow protocol('snmp'), service('popcorn-time') start timestamp('2019-01-25 02:47:06.785112') end timestamp('2019-01-25 07:17:06.785131')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('quic'), service('stremio') start timestamp('2019-01-25 04:30:07.132302') end timestamp('2019-01-25 13:24:07.132306')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') allow service('bittorrent') start timestamp('2019-01-25 04:31:07.132278') end timestamp('2019-01-25 13:47:07.132296')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 09:17:07.293932') end timestamp('2019-01-25 14:31:07.293937')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('parental-control') start timestamp('2019-01-25 03:10:07.293911') end timestamp('2019-01-25 07:59:07.293927')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset quota('1', 'gb/wk') block traffic('torrent') start timestamp('2019-01-25 04:33:08.334054') end timestamp('2019-01-25 13:34:08.334059')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 04:30:08.334032') end timestamp('2019-01-25 14:46:08.334049')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall') set quota('7', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset bandwidth('max', '30', 'mbps') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 09:40:08.395633') end timestamp('2019-01-25 14:40:08.395637')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('load-balancer') set quota('3', 'gb/wk') allow service('instagram'), service('youtube') start timestamp('2019-01-25 02:39:08.395611') end timestamp('2019-01-25 07:21:08.395627')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow protocol('smtp'), service('bittorrent') start timestamp('2019-01-25 08:51:08.819708') end timestamp('2019-01-25 13:07:08.819712')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') unset quota('5', 'gb/wk') block protocol('icmp'), service('popcorn-time') start timestamp('2019-01-25 02:42:08.819672') end timestamp('2019-01-25 08:08:08.819701')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block protocol('sftp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '50', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 04:18:09.809663') end timestamp('2019-01-25 13:33:09.809667')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('https'), service('stremio') start timestamp('2019-01-25 04:37:09.809637') end timestamp('2019-01-25 13:46:09.809657')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 09:18:11.145001') end timestamp('2019-01-25 14:35:11.145005')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 03:21:11.144979') end timestamp('2019-01-25 08:37:11.144995')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall') set quota('4', 'gb/wk') block protocol('snmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') add middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('sftp'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi') set quota('1', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 08:54:11.414044') end timestamp('2019-01-25 13:00:11.414061')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 02:45:11.414022') end timestamp('2019-01-25 08:36:11.414038')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 09:35:11.728249') end timestamp('2019-01-25 13:10:11.728253')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 03:07:11.728198') end timestamp('2019-01-25 08:24:11.728229')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 09:14:11.728318') end timestamp('2019-01-25 14:30:11.728322')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 03:00:11.728295') end timestamp('2019-01-25 08:23:11.728301')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('stremio'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set quota('5', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), protocol('sftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') set quota('3', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('2', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '30', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 05:45:13.209635') end timestamp('2019-01-25 14:44:13.209639')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 04:10:13.209608') end timestamp('2019-01-25 14:14:13.209628')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 04:54:13.237923') end timestamp('2019-01-25 13:38:13.237927')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:31:13.237898') end timestamp('2019-01-25 13:31:13.237916')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') set bandwidth('max', '90', 'mbps') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '70', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('3', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('5', 'gb/wk') allow protocol('sftp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') add middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('parental-control'), middlebox('ids') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('min', '60', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps') allow protocol('sftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('ids') set bandwidth('min', '80', 'mbps') allow protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') unset quota('3', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '10', 'mbps') block traffic('peer2peer') start timestamp('2019-01-25 05:55:14.774688') end timestamp('2019-01-25 14:41:14.774693')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') unset quota('8', 'gb/wk') allow service('stremio'), service('youtube') start timestamp('2019-01-25 05:58:14.774666') end timestamp('2019-01-25 14:18:14.774683')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') allow protocol('telnet'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), protocol('telnet')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block protocol('https'), protocol('icmp') start timestamp('2019-01-25 08:59:16.515364') end timestamp('2019-01-25 13:26:16.515368')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') allow service('facebook') start timestamp('2019-01-25 02:04:16.515357') end timestamp('2019-01-25 07:58:16.515360')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('load-balancer'), middlebox('parental-control') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer') allow traffic('streaming'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') block service('instagram'), service('youtube') start timestamp('2019-01-25 05:30:16.687431') end timestamp('2019-01-25 14:49:16.687435')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 04:48:16.687411') end timestamp('2019-01-25 13:02:16.687425')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') unset bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('snmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 08:22:16.836976') end timestamp('2019-01-25 14:36:16.836980')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 03:29:16.836914') end timestamp('2019-01-25 07:07:16.836957')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids') set quota('4', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('tcp'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set quota('8', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi') set bandwidth('min', '30', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('torrent'), protocol('http') start timestamp('2019-01-25 08:03:17.334168') end timestamp('2019-01-25 13:30:17.334172')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 02:18:17.334125') end timestamp('2019-01-25 07:32:17.334157')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall') set quota('7', 'gb/wk') block protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('icmp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow service('amazon-prime'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('min', '20', 'mbps') block service('vimeo'), protocol('https') start timestamp('2019-01-25 04:37:20.106335') end timestamp('2019-01-25 14:08:20.106339')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), protocol('quic') start timestamp('2019-01-25 05:25:20.106311') end timestamp('2019-01-25 14:48:20.106329')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 09:40:20.513231') end timestamp('2019-01-25 14:50:20.513234')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('dpi') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 02:33:20.513209') end timestamp('2019-01-25 07:34:20.513225')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow protocol('ftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 05:20:21.790467') end timestamp('2019-01-25 13:52:21.790471')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') unset quota('9', 'gb/wk') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 05:51:21.790444') end timestamp('2019-01-25 14:39:21.790461')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 08:35:22.427264') end timestamp('2019-01-25 14:24:22.427268')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block service('instagram'), traffic('streaming') start timestamp('2019-01-25 02:10:22.427230') end timestamp('2019-01-25 07:11:22.427258')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('popcorn-time'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 05:35:22.679444') end timestamp('2019-01-25 14:49:22.679448')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 04:43:22.679424') end timestamp('2019-01-25 13:52:22.679438')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 04:51:22.900317') end timestamp('2019-01-25 14:52:22.900320')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 04:01:22.900294') end timestamp('2019-01-25 13:24:22.900311')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') unset quota('8', 'gb/wk') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:06:23.007201') end timestamp('2019-01-25 14:55:23.007205')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('smtp') start timestamp('2019-01-25 04:54:23.007179') end timestamp('2019-01-25 13:06:23.007195')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 08:39:23.034387') end timestamp('2019-01-25 14:43:23.034391')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 02:45:23.034371') end timestamp('2019-01-25 07:26:23.034382')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi') block protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 08:44:23.272105') end timestamp('2019-01-25 13:31:23.272109')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 02:00:23.272085') end timestamp('2019-01-25 08:17:23.272100')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('5', 'gb/wk') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 04:12:23.298405') end timestamp('2019-01-25 14:53:23.298408')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 04:55:23.298388') end timestamp('2019-01-25 14:37:23.298399')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('popcorn-time'), service('netflix') start timestamp('2019-01-25 04:34:23.366740') end timestamp('2019-01-25 13:20:23.366744')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 04:41:23.366720') end timestamp('2019-01-25 14:42:23.366735')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block protocol('https'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('ftp') start timestamp('2019-01-25 09:45:24.615382') end timestamp('2019-01-25 13:13:24.615386')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), protocol('tcp') start timestamp('2019-01-25 02:41:24.615359') end timestamp('2019-01-25 08:37:24.615376')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 05:18:24.683853') end timestamp('2019-01-25 14:45:24.683857')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 04:54:24.683831') end timestamp('2019-01-25 14:42:24.683847')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '20', 'mbps') block service('stremio'), protocol('udp') start timestamp('2019-01-25 09:43:24.710478') end timestamp('2019-01-25 13:13:24.710482')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 03:22:24.710461') end timestamp('2019-01-25 08:58:24.710472')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 09:19:24.710693') end timestamp('2019-01-25 13:27:24.710699')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 02:57:24.710662') end timestamp('2019-01-25 07:55:24.710685')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('9', 'gb/wk') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('dpi') set quota('4', 'gb/wk') start timestamp('2019-01-25 09:22:24.837423') end timestamp('2019-01-25 13:39:24.837427')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('load-balancer') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 02:13:24.837403') end timestamp('2019-01-25 07:49:24.837417')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('torrent'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('ids'), middlebox('parental-control') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') set quota('4', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('8', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') block service('youtube'), service('facebook') start timestamp('2019-01-25 09:17:25.076730') end timestamp('2019-01-25 13:04:25.076734')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') allow protocol('tcp'), service('youtube') start timestamp('2019-01-25 03:37:25.076681') end timestamp('2019-01-25 07:38:25.076724')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('sftp'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('sftp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '50', 'mbps') block protocol('https'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('max', '60', 'mbps') allow protocol('icmp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set quota('4', 'gb/wk') allow protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('firewall'), middlebox('parental-control') unset quota('3', 'gb/wk') block service('facebook'), service('youtube') start timestamp('2019-01-25 09:26:25.819372') end timestamp('2019-01-25 13:38:25.819376')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 03:16:25.819350') end timestamp('2019-01-25 08:18:25.819366')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') unset bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('sftp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') unset quota('2', 'gb/wk') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:39:26.518354') end timestamp('2019-01-25 14:47:26.518358')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('bittorrent'), service('netflix') start timestamp('2019-01-25 05:36:26.518332') end timestamp('2019-01-25 14:15:26.518349')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:25:26.545284') end timestamp('2019-01-25 13:25:26.545288')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 02:56:26.545264') end timestamp('2019-01-25 07:16:26.545278')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') block traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 08:44:26.545499') end timestamp('2019-01-25 13:00:26.545503')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') allow service('netflix') start timestamp('2019-01-25 02:14:26.545473') end timestamp('2019-01-25 07:00:26.545480')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('http'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block service('facebook'), service('netflix') start timestamp('2019-01-25 08:43:27.318792') end timestamp('2019-01-25 14:43:27.318796')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 02:37:27.318772') end timestamp('2019-01-25 08:32:27.318787')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids') set quota('3', 'gb/wk') block protocol('snmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') unset quota('3', 'gb/wk') start timestamp('2019-01-25 04:36:27.709899') end timestamp('2019-01-25 13:35:27.709903')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 04:33:27.709877') end timestamp('2019-01-25 14:15:27.709894')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('firewall') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('firewall') set quota('2', 'gb/wk') allow protocol('telnet'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('dpi') set quota('1', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') unset quota('1', 'gb/wk') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 05:22:28.131824') end timestamp('2019-01-25 14:48:28.131828')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow traffic('torrent'), protocol('http') start timestamp('2019-01-25 04:57:28.131799') end timestamp('2019-01-25 13:03:28.131818')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow protocol('icmp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset quota('3', 'gb/wk') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 08:47:28.915901') end timestamp('2019-01-25 14:45:28.915920')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control') unset quota('7', 'gb/wk') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 02:24:28.915865') end timestamp('2019-01-25 07:23:28.915895')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 09:21:28.928937') end timestamp('2019-01-25 13:12:28.928941')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('load-balancer') start timestamp('2019-01-25 02:12:28.928922') end timestamp('2019-01-25 08:51:28.928931')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 04:40:29.361987') end timestamp('2019-01-25 14:16:29.361991')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 04:24:29.361963') end timestamp('2019-01-25 14:30:29.361981')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set quota('7', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') allow service('stremio'), protocol('ftp') start timestamp('2019-01-25 08:19:30.065175') end timestamp('2019-01-25 13:33:30.065179')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 02:15:30.065155') end timestamp('2019-01-25 07:55:30.065169')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 05:32:30.170067') end timestamp('2019-01-25 14:20:30.170071')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi') unset bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('bittorrent') start timestamp('2019-01-25 05:09:30.170047') end timestamp('2019-01-25 14:31:30.170062')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('bittorrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('facebook'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 05:52:30.996224') end timestamp('2019-01-25 14:56:30.996227')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), protocol('ftp') start timestamp('2019-01-25 04:38:30.996205') end timestamp('2019-01-25 13:31:30.996219')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids') set quota('3', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi') set quota('9', 'gb/wk') allow traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('firewall'), middlebox('ids') unset bandwidth('max', '50', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 04:03:31.360179') end timestamp('2019-01-25 14:44:31.360183')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 04:01:31.360158') end timestamp('2019-01-25 13:14:31.360174')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), service('stremio') start timestamp('2019-01-25 04:49:32.132657') end timestamp('2019-01-25 13:35:32.132661')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') unset quota('3', 'gb/wk') block service('stremio'), traffic('torrent') start timestamp('2019-01-25 04:32:32.132637') end timestamp('2019-01-25 13:00:32.132652')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') add middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 05:27:32.172687') end timestamp('2019-01-25 13:21:32.172691')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi') unset bandwidth('max', '50', 'mbps') allow service('facebook'), service('netflix') start timestamp('2019-01-25 05:57:32.172670') end timestamp('2019-01-25 14:21:32.172682')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set quota('5', 'gb/wk') allow protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('2', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk') allow protocol('ftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('9', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('ids') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '30', 'mbps') block service('vimeo'), service('youtube') start timestamp('2019-01-25 05:51:33.988781') end timestamp('2019-01-25 14:20:33.988785')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps') allow service('youtube'), service('facebook') start timestamp('2019-01-25 05:48:33.988757') end timestamp('2019-01-25 14:27:33.988775')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('telnet'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '50', 'mbps') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 04:59:35.224864') end timestamp('2019-01-25 14:43:35.224867')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('bittorrent') start timestamp('2019-01-25 05:22:35.224842') end timestamp('2019-01-25 13:52:35.224858')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('vimeo'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('snmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('snmp'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') add middlebox('dpi') set quota('5', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '30', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') set bandwidth('max', '60', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '50', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('vimeo'), protocol('https')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 08:30:36.482505') end timestamp('2019-01-25 14:28:36.482509')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 03:19:36.482483') end timestamp('2019-01-25 07:40:36.482488')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block protocol('icmp'), service('netflix') start timestamp('2019-01-25 08:49:36.615518') end timestamp('2019-01-25 13:43:36.615521')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental-control') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 02:41:36.615497') end timestamp('2019-01-25 07:39:36.615512')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('icmp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('torrent'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('tcp'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:40:37.685857') end timestamp('2019-01-25 14:12:37.685861')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('udp'), service('bittorrent') start timestamp('2019-01-25 03:25:37.685838') end timestamp('2019-01-25 08:37:37.685851')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '20', 'mbps') start timestamp('2019-01-25 05:18:38.112038') end timestamp('2019-01-25 14:28:38.112042')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 05:51:38.112017') end timestamp('2019-01-25 13:37:38.112033')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') set quota('6', 'gb/wk') allow service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '20', 'mbps') block traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') unset quota('9', 'gb/wk') allow protocol('quic'), service('bittorrent') start timestamp('2019-01-25 04:09:39.019257') end timestamp('2019-01-25 14:29:39.019261')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 05:33:39.019235') end timestamp('2019-01-25 14:44:39.019251')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('parental-control') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 09:29:39.296941') end timestamp('2019-01-25 13:10:39.296944')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow protocol('quic'), traffic('social-media') start timestamp('2019-01-25 03:42:39.296933') end timestamp('2019-01-25 07:36:39.296937')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block protocol('snmp'), traffic('streaming') start timestamp('2019-01-25 08:40:39.352447') end timestamp('2019-01-25 13:48:39.352451')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 02:33:39.352401') end timestamp('2019-01-25 08:06:39.352427')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') allow protocol('udp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') set bandwidth('max', '70', 'mbps') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') set bandwidth('max', '90', 'mbps') allow service('amazon-prime'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') set quota('3', 'gb/wk') block service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set quota('8', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 04:30:41.034564') end timestamp('2019-01-25 14:13:41.034568')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 05:39:41.034541') end timestamp('2019-01-25 14:41:41.034558')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('9', 'gb/wk') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 04:54:41.195424') end timestamp('2019-01-25 13:55:41.195428')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 05:22:41.195403') end timestamp('2019-01-25 14:43:41.195418')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('netflix'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi') set quota('1', 'gb/wk') start timestamp('2019-01-25 09:11:42.012275') end timestamp('2019-01-25 14:07:42.012279')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') start timestamp('2019-01-25 02:20:42.012253') end timestamp('2019-01-25 07:11:42.012268')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('5', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk') allow protocol('tcp'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('amazon-prime')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '20', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 09:03:43.093633') end timestamp('2019-01-25 13:10:43.093637')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 03:00:43.093585') end timestamp('2019-01-25 07:29:43.093614')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('instagram'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control') set quota('1', 'gb/wk') allow service('amazon-prime')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('torrent'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('1', 'gb/wk') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 08:19:44.065716') end timestamp('2019-01-25 14:25:44.065720')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 02:40:44.065695') end timestamp('2019-01-25 07:10:44.065710')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') unset quota('5', 'gb/wk') block protocol('http'), traffic('social-media') start timestamp('2019-01-25 05:12:44.369208') end timestamp('2019-01-25 13:25:44.369212')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 05:36:44.369186') end timestamp('2019-01-25 14:35:44.369202')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('9', 'gb/wk') allow traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') set bandwidth('max', '90', 'mbps') block service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 09:34:44.707729') end timestamp('2019-01-25 14:30:44.707732')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 02:14:44.707708') end timestamp('2019-01-25 07:54:44.707723')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('parental-control') set bandwidth('min', '50', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('stremio'), service('instagram') start timestamp('2019-01-25 09:02:45.068643') end timestamp('2019-01-25 13:06:45.068647')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('ids') unset quota('7', 'gb/wk') allow service('instagram'), service('youtube') start timestamp('2019-01-25 02:39:45.068622') end timestamp('2019-01-25 07:30:45.068637')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 04:51:45.147861') end timestamp('2019-01-25 13:32:45.147868')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:32:45.147840') end timestamp('2019-01-25 14:22:45.147856')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('6', 'gb/wk') block protocol('snmp'), service('netflix') start timestamp('2019-01-25 04:21:45.279668') end timestamp('2019-01-25 14:49:45.279672')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 05:31:45.279646') end timestamp('2019-01-25 13:07:45.279662')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block service('youtube'), service('netflix') start timestamp('2019-01-25 09:55:45.398585') end timestamp('2019-01-25 13:02:45.398589')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 03:52:45.398565') end timestamp('2019-01-25 08:43:45.398580')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block service('vimeo'), service('instagram') start timestamp('2019-01-25 05:21:45.425128') end timestamp('2019-01-25 13:21:45.425133')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') unset quota('2', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:57:45.425108') end timestamp('2019-01-25 13:34:45.425123')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('5', 'gb/wk') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('social-media'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow protocol('smtp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') start timestamp('2019-01-25 09:03:45.925043') end timestamp('2019-01-25 13:59:45.925047')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') start timestamp('2019-01-25 03:23:45.925022') end timestamp('2019-01-25 08:08:45.925037')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset quota('6', 'gb/wk') start timestamp('2019-01-25 09:56:46.079356') end timestamp('2019-01-25 14:58:46.079359')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 02:47:46.079335') end timestamp('2019-01-25 07:45:46.079350')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('8', 'gb/wk') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') block service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('tcp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('telnet'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('peer2peer'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') start timestamp('2019-01-25 04:21:46.996708') end timestamp('2019-01-25 13:39:46.996712')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 05:30:46.996685') end timestamp('2019-01-25 13:34:46.996702')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 08:11:46.996850') end timestamp('2019-01-25 13:45:46.996854')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') start timestamp('2019-01-25 03:58:46.996825') end timestamp('2019-01-25 07:22:46.996831')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set quota('9', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') block traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 08:14:47.867811') end timestamp('2019-01-25 14:08:47.867815')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 02:56:47.867790') end timestamp('2019-01-25 07:38:47.867805')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') block protocol('telnet'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('max', '50', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('2', 'gb/wk') start timestamp('2019-01-25 04:52:48.473788') end timestamp('2019-01-25 13:07:48.473792')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 04:13:48.473764') end timestamp('2019-01-25 13:07:48.473782')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow service('facebook'), service('netflix') start timestamp('2019-01-25 05:10:48.500015') end timestamp('2019-01-25 14:03:48.500019')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '50', 'mbps') block protocol('icmp'), service('youtube') start timestamp('2019-01-25 04:56:48.499984') end timestamp('2019-01-25 14:33:48.500009')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('8', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 08:54:49.083570') end timestamp('2019-01-25 13:25:49.083574')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') start timestamp('2019-01-25 03:51:49.083563') end timestamp('2019-01-25 07:30:49.083566')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 09:02:49.563254') end timestamp('2019-01-25 13:54:49.563258')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi') start timestamp('2019-01-25 03:33:49.563231') end timestamp('2019-01-25 08:27:49.563247')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.150') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk') allow protocol('icmp'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') allow service('stremio'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('snmp'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('firewall') unset quota('9', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') unset quota('2', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('vimeo'), protocol('icmp') start timestamp('2019-01-25 04:18:50.578846') end timestamp('2019-01-25 13:37:50.578850')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '60', 'mbps') allow service('amazon-prime') start timestamp('2019-01-25 04:51:50.578824') end timestamp('2019-01-25 14:16:50.578840')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow protocol('tcp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('load-balancer'), middlebox('ids') block service('amazon-prime'), protocol('ftp') start timestamp('2019-01-25 08:18:51.071592') end timestamp('2019-01-25 13:21:51.071596')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 03:11:51.071571') end timestamp('2019-01-25 07:13:51.071587')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block service('bittorrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') start timestamp('2019-01-25 05:13:51.222816') end timestamp('2019-01-25 13:21:51.222820')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:17:51.222793') end timestamp('2019-01-25 13:45:51.222810')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block protocol('https'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') allow service('amazon-prime'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 08:58:51.509005') end timestamp('2019-01-25 14:21:51.509009')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('1', 'gb/wk') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 02:12:51.508983') end timestamp('2019-01-25 08:22:51.508999')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 08:25:52.301794') end timestamp('2019-01-25 13:50:52.301798')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('youtube'), service('netflix') start timestamp('2019-01-25 02:44:52.301773') end timestamp('2019-01-25 07:12:52.301788')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('stremio'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('min', '60', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') block traffic('peer2peer'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('load-balancer'), middlebox('dpi') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall') block protocol('quic'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('parental-control') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow traffic('peer2peer'), protocol('quic')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') start timestamp('2019-01-25 04:45:53.277955') end timestamp('2019-01-25 14:02:53.277959')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:15:53.277934') end timestamp('2019-01-25 13:30:53.277949')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk') block protocol('ftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('dpi'), middlebox('parental-control') block service('instagram'), service('netflix') start timestamp('2019-01-25 09:55:53.806340') end timestamp('2019-01-25 14:52:53.806344')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('firewall') allow service('instagram'), protocol('icmp') start timestamp('2019-01-25 02:01:53.806320') end timestamp('2019-01-25 08:21:53.806334')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') block protocol('https'), protocol('http') start timestamp('2019-01-25 09:36:53.961105') end timestamp('2019-01-25 13:47:53.961109')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 02:48:53.961068') end timestamp('2019-01-25 08:16:53.961099')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') allow service('youtube'), service('netflix') start timestamp('2019-01-25 09:28:53.961285') end timestamp('2019-01-25 14:19:53.961302')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block service('instagram'), service('bittorrent') start timestamp('2019-01-25 02:02:53.961273') end timestamp('2019-01-25 08:41:53.961280')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') unset quota('6', 'gb/wk') block protocol('http'), service('instagram') start timestamp('2019-01-25 04:10:54.014588') end timestamp('2019-01-25 14:08:54.014592')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') unset quota('4', 'gb/wk') allow protocol('https'), protocol('icmp') start timestamp('2019-01-25 04:28:54.014569') end timestamp('2019-01-25 14:47:54.014583')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set bandwidth('min', '10', 'mbps') block protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '10', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('2', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), protocol('http')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('3', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('instagram'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('5', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('dpi') set quota('2', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow protocol('telnet'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('streaming'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 04:54:55.793467') end timestamp('2019-01-25 13:15:55.793471')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), service('facebook') start timestamp('2019-01-25 04:13:55.793442') end timestamp('2019-01-25 14:27:55.793461')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('sftp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('firewall') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') block traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 08:46:57.514972') end timestamp('2019-01-25 14:21:57.514976')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('stremio'), service('youtube') start timestamp('2019-01-25 03:57:57.514951') end timestamp('2019-01-25 07:53:57.514966')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('https'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') block service('stremio'), service('netflix') start timestamp('2019-01-25 09:10:58.123093') end timestamp('2019-01-25 13:44:58.123098')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') allow service('stremio'), service('instagram') start timestamp('2019-01-25 03:26:58.123071') end timestamp('2019-01-25 07:53:58.123087')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), service('bittorrent') start timestamp('2019-01-25 04:03:58.577246') end timestamp('2019-01-25 14:28:58.577250')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 04:20:58.577215') end timestamp('2019-01-25 14:28:58.577240')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('parental-control'), middlebox('firewall') block protocol('udp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow service('vimeo'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set quota('8', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') unset bandwidth('min', '60', 'mbps') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 04:07:59.080079') end timestamp('2019-01-25 14:08:59.080083')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 05:00:59.080043') end timestamp('2019-01-25 14:13:59.080060')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 09:22:59.389596') end timestamp('2019-01-25 14:47:59.389600')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 03:21:59.389574') end timestamp('2019-01-25 07:29:59.389590')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), protocol('https') start timestamp('2019-01-25 05:52:59.442650') end timestamp('2019-01-25 14:42:59.442654')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '40', 'mbps') allow protocol('tcp'), traffic('social-media') start timestamp('2019-01-25 05:02:59.442631') end timestamp('2019-01-25 13:54:59.442644')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 08:50:59.442740') end timestamp('2019-01-25 13:47:59.442743')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') start timestamp('2019-01-25 02:21:59.442729') end timestamp('2019-01-25 07:39:59.442734')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('4', 'gb/wk') start timestamp('2019-01-25 05:47:59.497261') end timestamp('2019-01-25 14:41:59.497265')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 03:59:59.497239') end timestamp('2019-01-25 14:57:59.497255')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block service('vimeo'), protocol('tcp') start timestamp('2019-01-25 09:20:00.566675') end timestamp('2019-01-25 13:52:00.566679')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.70') add middlebox('dpi'), middlebox('ids') unset quota('3', 'gb/wk') allow protocol('https'), service('facebook') start timestamp('2019-01-25 03:59:00.566653') end timestamp('2019-01-25 08:50:00.566668')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block protocol('tcp'), protocol('quic') start timestamp('2019-01-25 09:42:00.579994') end timestamp('2019-01-25 13:33:00.579997')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 03:22:00.579986') end timestamp('2019-01-25 07:44:00.579990')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('3', 'gb/wk') block protocol('sftp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') set quota('6', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('5', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps') allow protocol('quic'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') set quota('3', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('2', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('telnet'), service('instagram') start timestamp('2019-01-25 05:18:01.562842') end timestamp('2019-01-25 13:49:01.562846')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('instagram'), traffic('social-media') start timestamp('2019-01-25 05:46:01.562819') end timestamp('2019-01-25 14:18:01.562836')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('load-balancer') unset bandwidth('min', '90', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') allow service('stremio'), service('instagram') start timestamp('2019-01-25 05:23:01.897583') end timestamp('2019-01-25 13:23:01.897587')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block traffic('torrent') start timestamp('2019-01-25 04:19:01.897561') end timestamp('2019-01-25 14:15:01.897577')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 09:45:01.992232') end timestamp('2019-01-25 13:57:01.992236')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 03:08:01.992211') end timestamp('2019-01-25 07:18:01.992226')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('5', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') set quota('6', 'gb/wk') allow service('netflix'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('dpi') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 09:32:02.647346') end timestamp('2019-01-25 14:16:02.647350')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 03:57:02.647338') end timestamp('2019-01-25 08:39:02.647342')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('stremio'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('https'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('7', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('instagram'), service('netflix') start timestamp('2019-01-25 04:18:03.755679') end timestamp('2019-01-25 14:36:03.755683')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 05:02:03.755657') end timestamp('2019-01-25 13:58:03.755673')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') unset quota('6', 'gb/wk') start timestamp('2019-01-25 04:54:04.387971') end timestamp('2019-01-25 13:31:04.387974')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 04:57:04.387951') end timestamp('2019-01-25 13:55:04.387965')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block protocol('http'), service('facebook') start timestamp('2019-01-25 05:01:05.400838') end timestamp('2019-01-25 13:17:05.400842')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 05:07:05.400816') end timestamp('2019-01-25 13:11:05.400832')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('ids') set quota('6', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '80', 'mbps') block protocol('https'), service('instagram') start timestamp('2019-01-25 05:33:06.891611') end timestamp('2019-01-25 13:26:06.891615')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') unset quota('6', 'gb/wk') allow service('vimeo'), protocol('quic') start timestamp('2019-01-25 04:53:06.891588') end timestamp('2019-01-25 13:23:06.891605')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('firewall') allow traffic('peer2peer'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') unset quota('4', 'gb/wk') block service('stremio'), service('youtube') start timestamp('2019-01-25 09:54:07.806242') end timestamp('2019-01-25 13:44:07.806246')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('9', 'gb/wk') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 03:53:07.806219') end timestamp('2019-01-25 07:16:07.806236')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') start timestamp('2019-01-25 09:58:07.984523') end timestamp('2019-01-25 13:07:07.984527')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 03:18:07.984501') end timestamp('2019-01-25 07:27:07.984516')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block service('stremio'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental-control') allow protocol('sftp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') block traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 09:27:08.516182') end timestamp('2019-01-25 14:53:08.516186')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), protocol('telnet') start timestamp('2019-01-25 02:37:08.516160') end timestamp('2019-01-25 07:05:08.516176')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('youtube'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow protocol('sftp'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block protocol('telnet'), protocol('icmp') start timestamp('2019-01-25 09:55:09.454691') end timestamp('2019-01-25 13:14:09.454695')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 03:27:09.454667') end timestamp('2019-01-25 07:55:09.454685')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('3', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('sftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('1', 'gb/wk') block protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block protocol('sftp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') block protocol('quic'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('vimeo'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('netflix'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 09:52:10.231381') end timestamp('2019-01-25 14:44:10.231385')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 02:52:10.231357') end timestamp('2019-01-25 08:25:10.231374')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') unset quota('5', 'gb/wk') block service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 05:35:10.285147') end timestamp('2019-01-25 13:39:10.285151')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:02:10.285124') end timestamp('2019-01-25 14:39:10.285141')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('dpi') set quota('9', 'gb/wk') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 05:23:11.257632') end timestamp('2019-01-25 14:48:11.257636')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids') unset quota('8', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 05:42:11.257611') end timestamp('2019-01-25 13:06:11.257627')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:58:11.457771') end timestamp('2019-01-25 14:00:11.457775')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:49:11.457748') end timestamp('2019-01-25 14:42:11.457766')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('https'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('facebook'), protocol('ftp') start timestamp('2019-01-25 08:46:11.472477') end timestamp('2019-01-25 14:20:11.472481')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') allow protocol('https'), service('netflix') start timestamp('2019-01-25 02:36:11.472470') end timestamp('2019-01-25 07:16:11.472473')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block protocol('telnet'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block protocol('icmp'), protocol('udp') start timestamp('2019-01-25 09:27:11.732787') end timestamp('2019-01-25 14:55:11.732790')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow service('netflix'), traffic('streaming') start timestamp('2019-01-25 03:00:11.732779') end timestamp('2019-01-25 08:38:11.732783')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set quota('7', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block protocol('udp'), service('youtube') start timestamp('2019-01-25 09:49:12.311160') end timestamp('2019-01-25 14:16:12.311164')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 03:28:12.311138') end timestamp('2019-01-25 07:30:12.311154')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 09:54:12.405324') end timestamp('2019-01-25 13:02:12.405328')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 03:19:12.405299') end timestamp('2019-01-25 08:51:12.405318')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:07:12.431938') end timestamp('2019-01-25 14:40:12.431942')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:08:12.431913') end timestamp('2019-01-25 14:39:12.431930')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') allow protocol('quic'), service('netflix') start timestamp('2019-01-25 09:19:12.635135') end timestamp('2019-01-25 13:59:12.635140')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') allow service('instagram'), protocol('udp') start timestamp('2019-01-25 03:35:12.635097') end timestamp('2019-01-25 08:41:12.635114')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('telnet'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('tcp') start timestamp('2019-01-25 04:43:13.036331') end timestamp('2019-01-25 14:19:13.036335')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 04:01:13.036307') end timestamp('2019-01-25 13:22:13.036325')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('torrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 04:18:13.600711') end timestamp('2019-01-25 13:16:13.600715')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('tcp'), service('facebook') start timestamp('2019-01-25 04:26:13.600686') end timestamp('2019-01-25 14:00:13.600705')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') unset bandwidth('max', '80', 'mbps') block traffic('social-media') start timestamp('2019-01-25 09:02:13.825414') end timestamp('2019-01-25 14:44:13.825418')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 03:25:13.825388') end timestamp('2019-01-25 08:48:13.825407')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '70', 'mbps') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow protocol('tcp'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 04:54:13.972514') end timestamp('2019-01-25 14:39:13.972519')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '90', 'mbps') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 04:27:13.972484') end timestamp('2019-01-25 13:34:13.972508')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('torrent'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set quota('8', 'gb/wk') allow service('instagram'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 04:29:15.250106') end timestamp('2019-01-25 14:49:15.250110')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 04:08:15.250070') end timestamp('2019-01-25 14:57:15.250099')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') allow service('stremio') start timestamp('2019-01-25 05:45:15.375906') end timestamp('2019-01-25 13:06:15.375910')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset quota('9', 'gb/wk') block service('vimeo'), service('facebook') start timestamp('2019-01-25 04:57:15.375876') end timestamp('2019-01-25 13:29:15.375899')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('telnet'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 08:59:16.024433') end timestamp('2019-01-25 14:51:16.024449')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('parental-control'), middlebox('ids') allow service('vimeo'), protocol('sftp') start timestamp('2019-01-25 02:08:16.024426') end timestamp('2019-01-25 07:30:16.024429')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '40', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') unset quota('4', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('load-balancer') allow protocol('icmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '60', 'mbps') block service('bittorrent'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') unset bandwidth('min', '90', 'mbps') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 04:57:16.286561') end timestamp('2019-01-25 14:10:16.286565')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('youtube'), traffic('streaming') start timestamp('2019-01-25 05:20:16.286533') end timestamp('2019-01-25 14:05:16.286555')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('sftp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 09:51:16.606624') end timestamp('2019-01-25 13:43:16.606629')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 02:56:16.606601') end timestamp('2019-01-25 08:04:16.606618')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('amazon-prime')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('amazon-prime'), protocol('https')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow service('netflix'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:29:17.410720') end timestamp('2019-01-25 14:05:17.410724')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') unset quota('9', 'gb/wk') start timestamp('2019-01-25 04:41:17.410697') end timestamp('2019-01-25 14:14:17.410714')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 09:04:17.636660') end timestamp('2019-01-25 14:22:17.636664')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control') allow service('vimeo') start timestamp('2019-01-25 03:16:17.636637') end timestamp('2019-01-25 07:14:17.636655')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '10', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), protocol('http')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.58') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '50', 'mbps') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 05:56:17.882641') end timestamp('2019-01-25 14:16:17.882646')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 04:42:17.882620') end timestamp('2019-01-25 14:12:17.882636')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') block service('vimeo'), service('stremio') start timestamp('2019-01-25 08:13:17.882825') end timestamp('2019-01-25 14:27:17.882829')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') allow service('vimeo'), traffic('streaming') start timestamp('2019-01-25 02:37:17.882817') end timestamp('2019-01-25 07:39:17.882821')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('quic'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('parental-control') allow protocol('quic'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('youtube'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '50', 'mbps') allow protocol('icmp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('ids') set quota('6', 'gb/wk') allow protocol('smtp'), service('popcorn-time') start timestamp('2019-01-25 09:35:18.114857') end timestamp('2019-01-25 14:13:18.114861')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 02:27:18.114834') end timestamp('2019-01-25 07:35:18.114851')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('7', 'gb/wk') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 09:14:18.155436') end timestamp('2019-01-25 14:24:18.155440')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') allow service('stremio'), protocol('snmp') start timestamp('2019-01-25 03:02:18.155415') end timestamp('2019-01-25 08:19:18.155430')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('smtp'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 05:50:19.548592') end timestamp('2019-01-25 14:20:19.548596')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:55:19.548567') end timestamp('2019-01-25 14:56:19.548586')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block protocol('http'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') set quota('8', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('min', '10', 'mbps') block protocol('sftp'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 04:52:20.228172') end timestamp('2019-01-25 13:22:20.228178')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 04:47:20.228112') end timestamp('2019-01-25 13:47:20.228151')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') start timestamp('2019-01-25 04:23:20.256785') end timestamp('2019-01-25 13:17:20.256789')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('6', 'gb/wk') start timestamp('2019-01-25 05:28:20.256761') end timestamp('2019-01-25 13:23:20.256778')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') set quota('1', 'gb/wk') block service('stremio'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('5', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow service('instagram'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('stremio'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('netflix'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 08:48:20.569171') end timestamp('2019-01-25 13:27:20.569174')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 03:14:20.569163') end timestamp('2019-01-25 08:34:20.569167')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 04:24:20.621758') end timestamp('2019-01-25 13:18:20.621762')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:36:20.621732') end timestamp('2019-01-25 13:39:20.621752')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') remove middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 04:08:20.746722') end timestamp('2019-01-25 14:34:20.746726')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('5', 'gb/wk') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 04:34:20.746697') end timestamp('2019-01-25 13:30:20.746716')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('bittorrent') start timestamp('2019-01-25 04:44:20.772711') end timestamp('2019-01-25 13:13:20.772715')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 04:41:20.772693') end timestamp('2019-01-25 14:36:20.772705')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 09:00:21.599851') end timestamp('2019-01-25 13:44:21.599855')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('4', 'gb/wk') start timestamp('2019-01-25 02:27:21.599829') end timestamp('2019-01-25 07:21:21.599845')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') set quota('3', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set quota('4', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') block protocol('snmp'), protocol('icmp') start timestamp('2019-01-25 08:17:21.941073') end timestamp('2019-01-25 13:33:21.941077')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('parental-control'), middlebox('firewall') block service('amazon-prime') start timestamp('2019-01-25 03:54:21.941049') end timestamp('2019-01-25 07:25:21.941067')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 08:54:21.955816') end timestamp('2019-01-25 13:44:21.955820')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block protocol('telnet'), protocol('http') start timestamp('2019-01-25 02:47:21.955794') end timestamp('2019-01-25 07:27:21.955810')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('https'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('telnet'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 05:31:22.342078') end timestamp('2019-01-25 13:30:22.342082')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('load-balancer') set quota('2', 'gb/wk') allow service('facebook'), service('netflix') start timestamp('2019-01-25 04:31:22.342054') end timestamp('2019-01-25 14:13:22.342072')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 04:12:22.608911') end timestamp('2019-01-25 13:25:22.608915')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('dpi'), middlebox('load-balancer') unset quota('5', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 04:02:22.608887') end timestamp('2019-01-25 13:59:22.608906')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') start timestamp('2019-01-25 09:46:22.609012') end timestamp('2019-01-25 13:26:22.609031')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') start timestamp('2019-01-25 03:24:22.609001') end timestamp('2019-01-25 08:48:22.609007')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('1', 'gb/wk') block protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('quic'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('1', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set quota('5', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 05:44:23.113587') end timestamp('2019-01-25 13:51:23.113592')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('ids') set bandwidth('max', '40', 'mbps') start timestamp('2019-01-25 04:35:23.113560') end timestamp('2019-01-25 13:41:23.113582')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('ids') set quota('1', 'gb/wk') block service('stremio'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('telnet'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 08:55:23.406607') end timestamp('2019-01-25 14:50:23.406612')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 03:47:23.406572') end timestamp('2019-01-25 07:23:23.406601')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') unset quota('9', 'gb/wk') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 05:22:23.611767') end timestamp('2019-01-25 13:25:23.611772')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 05:04:23.611745') end timestamp('2019-01-25 13:31:23.611762')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 08:11:23.700053') end timestamp('2019-01-25 13:30:23.700057')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 03:00:23.700031') end timestamp('2019-01-25 07:13:23.700047')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall') set quota('1', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('smtp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') block service('vimeo'), traffic('social-media') start timestamp('2019-01-25 09:08:24.865434') end timestamp('2019-01-25 13:09:24.865439')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids') block traffic('torrent'), protocol('snmp') start timestamp('2019-01-25 03:47:24.865396') end timestamp('2019-01-25 08:39:24.865413')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow protocol('https'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi') unset bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 05:22:26.068486') end timestamp('2019-01-25 14:54:26.068490')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') unset quota('9', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 04:00:26.068461') end timestamp('2019-01-25 14:53:26.068480')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') add middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('max', '30', 'mbps') block traffic('streaming'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') block traffic('social-media'), service('bittorrent') start timestamp('2019-01-25 08:46:26.595536') end timestamp('2019-01-25 13:36:26.595540')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow service('youtube') start timestamp('2019-01-25 02:04:26.595509') end timestamp('2019-01-25 07:13:26.595530')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') unset bandwidth('max', '20', 'mbps') allow protocol('https'), protocol('udp') start timestamp('2019-01-25 08:27:26.623719') end timestamp('2019-01-25 14:22:26.623723')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids') unset quota('7', 'gb/wk') allow protocol('sftp'), service('vimeo') start timestamp('2019-01-25 03:10:26.623711') end timestamp('2019-01-25 07:03:26.623715')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '80', 'mbps') block service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 04:44:26.807540') end timestamp('2019-01-25 14:14:26.807545')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('smtp'), service('facebook') start timestamp('2019-01-25 05:32:26.807509') end timestamp('2019-01-25 14:08:26.807534')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') set bandwidth('min', '30', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi') set quota('9', 'gb/wk') allow service('amazon-prime'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 09:28:28.154908') end timestamp('2019-01-25 14:51:28.154912')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') start timestamp('2019-01-25 02:54:28.154886') end timestamp('2019-01-25 08:55:28.154902')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('2', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') allow protocol('udp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block service('amazon-prime'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') allow protocol('telnet'), protocol('tcp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('8', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.92') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') block protocol('smtp'), service('facebook') start timestamp('2019-01-25 09:53:29.179691') end timestamp('2019-01-25 14:26:29.179710')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 03:46:29.179650') end timestamp('2019-01-25 08:51:29.179685')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') unset bandwidth('min', '60', 'mbps') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 05:20:29.207688') end timestamp('2019-01-25 13:09:29.207692')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 04:19:29.207660') end timestamp('2019-01-25 13:36:29.207682')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 09:24:29.243232') end timestamp('2019-01-25 14:56:29.243236')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 03:07:29.243207') end timestamp('2019-01-25 08:00:29.243226')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') unset quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('5', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall') allow service('bittorrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('https') start timestamp('2019-01-25 04:34:31.623841') end timestamp('2019-01-25 14:41:31.623847')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('streaming'), protocol('ftp') start timestamp('2019-01-25 04:18:31.623798') end timestamp('2019-01-25 13:33:31.623832')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') add middlebox('dpi') set quota('4', 'gb/wk') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '80', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('https'), service('netflix') start timestamp('2019-01-25 05:10:32.691036') end timestamp('2019-01-25 14:54:32.691054')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('dpi') set bandwidth('max', '20', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 04:05:32.690974') end timestamp('2019-01-25 13:09:32.691029')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('min', '80', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') set bandwidth('max', '50', 'mbps') block protocol('https'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('max', '70', 'mbps') allow protocol('snmp'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 08:18:33.014711') end timestamp('2019-01-25 13:58:33.014715')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 03:58:33.014687') end timestamp('2019-01-25 07:05:33.014705')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 04:18:33.037111') end timestamp('2019-01-25 14:44:33.037115')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('parental-control') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:11:33.037089') end timestamp('2019-01-25 13:09:33.037106')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('social-media'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control') set quota('1', 'gb/wk') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('parental-control') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') allow protocol('udp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') start timestamp('2019-01-25 05:28:33.814342') end timestamp('2019-01-25 14:57:33.814346')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi') set quota('6', 'gb/wk') start timestamp('2019-01-25 04:22:33.814317') end timestamp('2019-01-25 13:45:33.814336')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 08:27:33.883368') end timestamp('2019-01-25 13:02:33.883372')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 03:17:33.883347') end timestamp('2019-01-25 07:31:33.883362')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall') set quota('8', 'gb/wk') block protocol('sftp'), protocol('https') start timestamp('2019-01-25 08:51:33.897567') end timestamp('2019-01-25 13:32:33.897571')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('https'), protocol('ftp') start timestamp('2019-01-25 03:05:33.897547') end timestamp('2019-01-25 07:13:33.897561')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('load-balancer'), middlebox('dpi') allow protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block service('stremio'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '10', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('parental-control') start timestamp('2019-01-25 08:33:34.991147') end timestamp('2019-01-25 14:58:34.991152')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 02:00:34.991121') end timestamp('2019-01-25 07:48:34.991140')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('4', 'gb/wk') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 04:26:35.392858') end timestamp('2019-01-25 13:39:35.392862')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 04:47:35.392830') end timestamp('2019-01-25 13:11:35.392852')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow service('popcorn-time'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('7', 'gb/wk') allow protocol('icmp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow protocol('snmp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('quic') start timestamp('2019-01-25 04:26:38.095381') end timestamp('2019-01-25 14:22:38.095385')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 04:54:38.095352') end timestamp('2019-01-25 14:24:38.095375')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow traffic('peer2peer'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block traffic('social-media'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 08:01:38.557201') end timestamp('2019-01-25 14:07:38.557205')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('5', 'gb/wk') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 02:42:38.557179') end timestamp('2019-01-25 07:44:38.557195')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block service('facebook'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '70', 'mbps') block protocol('snmp'), service('youtube') start timestamp('2019-01-25 04:20:38.870190') end timestamp('2019-01-25 14:26:38.870196')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') unset bandwidth('max', '90', 'mbps') allow traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 04:54:38.870154') end timestamp('2019-01-25 13:17:38.870182')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall') set quota('3', 'gb/wk') allow service('vimeo'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') allow protocol('telnet'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.111') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') add middlebox('firewall'), middlebox('dpi') allow protocol('http'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('load-balancer'), middlebox('ids') unset bandwidth('min', '30', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('instagram'), protocol('udp') start timestamp('2019-01-25 04:58:41.566488') end timestamp('2019-01-25 14:02:41.566493')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 04:22:41.566466') end timestamp('2019-01-25 14:10:41.566483')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block service('stremio'), service('facebook') start timestamp('2019-01-25 09:20:41.580485') end timestamp('2019-01-25 14:15:41.580501')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids') allow service('stremio'), protocol('http') start timestamp('2019-01-25 03:21:41.580463') end timestamp('2019-01-25 07:44:41.580481')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') block service('facebook'), service('netflix') start timestamp('2019-01-25 08:22:41.607375') end timestamp('2019-01-25 13:01:41.607379')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('quic'), service('facebook') start timestamp('2019-01-25 02:16:41.607355') end timestamp('2019-01-25 07:18:41.607369')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('youtube'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') unset quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 05:27:41.762833') end timestamp('2019-01-25 13:56:41.762837')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('https'), protocol('telnet') start timestamp('2019-01-25 04:02:41.762807') end timestamp('2019-01-25 13:24:41.762827')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block protocol('tcp'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow traffic('social-media'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') add middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') block traffic('torrent'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('social-media'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('parental-control') set quota('4', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('load-balancer') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:25:43.899233') end timestamp('2019-01-25 13:39:43.899250')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:51:43.899211') end timestamp('2019-01-25 13:16:43.899227')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:49:43.987430') end timestamp('2019-01-25 13:36:43.987434')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('torrent') start timestamp('2019-01-25 04:09:43.987406') end timestamp('2019-01-25 13:18:43.987424')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('ids'), middlebox('firewall') unset bandwidth('min', '80', 'mbps') start timestamp('2019-01-25 08:33:44.001050') end timestamp('2019-01-25 14:29:44.001054')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 03:42:44.001035') end timestamp('2019-01-25 07:05:44.001044')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block protocol('sftp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block traffic('peer2peer'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow protocol('quic'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '70', 'mbps') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '40', 'mbps') block protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 05:03:44.663446') end timestamp('2019-01-25 14:05:44.663450')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block protocol('https'), protocol('ftp') start timestamp('2019-01-25 04:25:44.663424') end timestamp('2019-01-25 13:07:44.663441')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 08:01:44.698445') end timestamp('2019-01-25 14:16:44.698450')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 02:25:44.698425') end timestamp('2019-01-25 07:14:44.698439')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 08:00:44.791805') end timestamp('2019-01-25 14:00:44.791808')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental-control'), middlebox('dpi') allow service('stremio'), traffic('social-media') start timestamp('2019-01-25 02:10:44.791784') end timestamp('2019-01-25 07:51:44.791799')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control') set quota('2', 'gb/wk') block service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('vimeo'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi') set quota('9', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('https'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set bandwidth('min', '40', 'mbps') allow traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('1', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 09:49:45.705252') end timestamp('2019-01-25 13:44:45.705256')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 03:29:45.705231') end timestamp('2019-01-25 07:56:45.705246')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block service('stremio'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 09:25:46.050805') end timestamp('2019-01-25 14:31:46.050809')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 02:12:46.050784') end timestamp('2019-01-25 07:28:46.050799')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block service('vimeo'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block protocol('sftp'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control') unset quota('6', 'gb/wk') block service('stremio'), service('netflix') start timestamp('2019-01-25 05:44:46.511010') end timestamp('2019-01-25 14:33:46.511014')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set quota('3', 'gb/wk') allow traffic('social-media'), protocol('ftp') start timestamp('2019-01-25 05:26:46.510986') end timestamp('2019-01-25 13:48:46.511004')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('icmp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 08:21:46.715525') end timestamp('2019-01-25 14:21:46.715529')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block protocol('udp'), service('bittorrent') start timestamp('2019-01-25 02:16:46.715506') end timestamp('2019-01-25 08:13:46.715519')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') start timestamp('2019-01-25 09:49:47.234065') end timestamp('2019-01-25 14:41:47.234069')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 02:37:47.234044') end timestamp('2019-01-25 08:10:47.234059')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 05:52:47.895852') end timestamp('2019-01-25 14:22:47.895855')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 04:35:47.895832') end timestamp('2019-01-25 14:25:47.895847')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set quota('7', 'gb/wk') allow service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('dpi') set bandwidth('max', '10', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 04:32:48.609592') end timestamp('2019-01-25 13:16:48.609596')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') unset quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:11:48.609571') end timestamp('2019-01-25 14:54:48.609587')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') allow service('vimeo'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('2', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('stremio'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 09:51:49.158756') end timestamp('2019-01-25 13:21:49.158760')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 02:21:49.158735') end timestamp('2019-01-25 08:39:49.158750')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') remove middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block traffic('social-media'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps') block service('facebook'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('min', '70', 'mbps') allow protocol('tcp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('9', 'gb/wk') allow protocol('sftp'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow protocol('snmp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('7', 'gb/wk') start timestamp('2019-01-25 04:03:50.401879') end timestamp('2019-01-25 13:02:50.401883')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 05:21:50.401853') end timestamp('2019-01-25 13:25:50.401874')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block service('amazon-prime'), service('netflix') start timestamp('2019-01-25 08:16:50.530803') end timestamp('2019-01-25 14:39:50.530807')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow service('stremio'), service('netflix') start timestamp('2019-01-25 03:41:50.530795') end timestamp('2019-01-25 08:01:50.530799')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('youtube'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('firewall') set quota('3', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow protocol('https'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('load-balancer') allow service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') block traffic('peer2peer'), protocol('http')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 08:06:51.925660') end timestamp('2019-01-25 13:45:51.925665')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('firewall') allow service('stremio') start timestamp('2019-01-25 02:56:51.925637') end timestamp('2019-01-25 08:02:51.925654')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') set quota('8', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block protocol('tcp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') allow service('vimeo'), traffic('social-media') start timestamp('2019-01-25 08:12:52.021345') end timestamp('2019-01-25 13:13:52.021349')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') block service('stremio'), service('youtube') start timestamp('2019-01-25 03:03:52.021323') end timestamp('2019-01-25 07:24:52.021341')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set quota('1', 'gb/wk') block traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 05:55:52.112472') end timestamp('2019-01-25 13:29:52.112476')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') unset quota('6', 'gb/wk') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 05:00:52.112444') end timestamp('2019-01-25 13:47:52.112466')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 08:05:53.424377') end timestamp('2019-01-25 13:03:53.424381')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 03:42:53.424355') end timestamp('2019-01-25 07:13:53.424370')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 08:46:53.495375') end timestamp('2019-01-25 14:49:53.495379')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 03:34:53.495352') end timestamp('2019-01-25 08:00:53.495369')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('parental-control') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 09:46:53.817737') end timestamp('2019-01-25 14:02:53.817741')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') allow service('stremio'), service('facebook') start timestamp('2019-01-25 02:15:53.817700') end timestamp('2019-01-25 07:07:53.817730')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi') set quota('7', 'gb/wk') allow protocol('sftp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow service('instagram'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') remove middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('vimeo') start timestamp('2019-01-25 04:48:54.315557') end timestamp('2019-01-25 13:20:54.315561')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 04:54:54.315536') end timestamp('2019-01-25 13:33:54.315552')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') unset bandwidth('max', '40', 'mbps') block protocol('https'), protocol('http') start timestamp('2019-01-25 09:45:54.810144') end timestamp('2019-01-25 14:30:54.810148')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('snmp'), protocol('smtp') start timestamp('2019-01-25 02:00:54.810121') end timestamp('2019-01-25 08:04:54.810138')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('firewall') set bandwidth('min', '10', 'mbps') allow service('vimeo'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') add middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 08:22:56.170498') end timestamp('2019-01-25 14:50:56.170502')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') allow protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 02:48:56.170476') end timestamp('2019-01-25 07:17:56.170492')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('tcp'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('https')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('ids') start timestamp('2019-01-25 09:17:58.016587') end timestamp('2019-01-25 14:29:58.016591')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 02:38:58.016566') end timestamp('2019-01-25 08:42:58.016581')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('ids') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 09:40:58.196215') end timestamp('2019-01-25 13:19:58.196220')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('load-balancer') allow protocol('telnet'), service('popcorn-time') start timestamp('2019-01-25 03:44:58.196175') end timestamp('2019-01-25 08:12:58.196209')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('netflix'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('load-balancer') unset bandwidth('min', '70', 'mbps') start timestamp('2019-01-25 08:37:58.460816') end timestamp('2019-01-25 13:02:58.460820')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 02:08:58.460793') end timestamp('2019-01-25 07:01:58.460810')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 09:39:58.481581') end timestamp('2019-01-25 13:31:58.481585')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 02:33:58.481549') end timestamp('2019-01-25 07:57:58.481560')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') unset quota('2', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 04:14:58.511705') end timestamp('2019-01-25 13:51:58.511709')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 05:48:58.511679') end timestamp('2019-01-25 14:16:58.511699')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '10', 'mbps') allow protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('social-media'), service('netflix') start timestamp('2019-01-25 08:05:59.187044') end timestamp('2019-01-25 14:32:59.187049')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('load-balancer') block protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 02:32:59.187017') end timestamp('2019-01-25 07:09:59.187038')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '60', 'mbps') allow protocol('sftp'), service('youtube') start timestamp('2019-01-25 04:10:00.008474') end timestamp('2019-01-25 13:15:00.008478')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') unset quota('9', 'gb/wk') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 04:53:00.008448') end timestamp('2019-01-25 14:27:00.008468')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '80', 'mbps') block traffic('social-media') start timestamp('2019-01-25 05:26:00.045674') end timestamp('2019-01-25 14:51:00.045678')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('smtp'), traffic('social-media') start timestamp('2019-01-25 04:15:00.045649') end timestamp('2019-01-25 13:57:00.045668')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('vimeo'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('parental-control'), middlebox('dpi') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') allow service('instagram'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('sftp'), protocol('smtp') start timestamp('2019-01-25 04:05:00.713379') end timestamp('2019-01-25 14:51:00.713383')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block service('stremio'), protocol('https') start timestamp('2019-01-25 04:27:00.713355') end timestamp('2019-01-25 13:16:00.713373')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') unset quota('5', 'gb/wk') start timestamp('2019-01-25 05:10:00.818677') end timestamp('2019-01-25 13:31:00.818681')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set quota('4', 'gb/wk') start timestamp('2019-01-25 05:03:00.818655') end timestamp('2019-01-25 13:35:00.818671')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('https'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('dpi') set quota('2', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') unset bandwidth('max', '80', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') remove middlebox('load-balancer'), middlebox('parental-control') unset quota('4', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '10', 'mbps') block protocol('snmp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('snmp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), protocol('http') start timestamp('2019-01-25 09:42:02.159817') end timestamp('2019-01-25 13:20:02.159821')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') add middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '80', 'mbps') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 02:51:02.159796') end timestamp('2019-01-25 08:26:02.159811')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('http'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi') set quota('8', 'gb/wk') start timestamp('2019-01-25 08:25:02.721092') end timestamp('2019-01-25 14:06:02.721096')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') start timestamp('2019-01-25 02:11:02.721072') end timestamp('2019-01-25 08:04:02.721086')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('ids'), middlebox('load-balancer') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('firewall')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('max', '80', 'mbps') allow protocol('smtp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('5', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') start timestamp('2019-01-25 08:02:03.706443') end timestamp('2019-01-25 13:53:03.706447')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 02:51:03.706400') end timestamp('2019-01-25 07:46:03.706437')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow traffic('peer2peer'), protocol('sftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set quota('7', 'gb/wk') block protocol('tcp'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.96') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('http')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('telnet'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control'), middlebox('load-balancer') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 09:07:04.111050') end timestamp('2019-01-25 13:30:04.111054')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.145') remove middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 03:51:04.111023') end timestamp('2019-01-25 07:49:04.111043')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('youtube'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') allow traffic('torrent'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') block service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 08:32:05.351942') end timestamp('2019-01-25 13:08:05.351946')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:22:05.351919') end timestamp('2019-01-25 08:15:05.351936')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '90', 'mbps') allow service('stremio'), protocol('icmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '10', 'mbps') block service('facebook'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('https'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('https'), protocol('icmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set quota('8', 'gb/wk') block traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('9', 'gb/wk') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') set bandwidth('max', '10', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '30', 'mbps') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('snmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') block service('facebook'), traffic('streaming') start timestamp('2019-01-25 08:13:07.903139') end timestamp('2019-01-25 13:28:07.903143')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow protocol('snmp'), service('facebook') start timestamp('2019-01-25 02:08:07.903116') end timestamp('2019-01-25 07:50:07.903133')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('load-balancer') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 09:13:07.918191') end timestamp('2019-01-25 14:34:07.918195')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') block protocol('sftp'), protocol('http') start timestamp('2019-01-25 03:57:07.918171') end timestamp('2019-01-25 08:01:07.918185')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 05:50:07.958369') end timestamp('2019-01-25 14:27:07.958373')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') start timestamp('2019-01-25 05:57:07.958348') end timestamp('2019-01-25 13:33:07.958362')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 09:57:08.192084') end timestamp('2019-01-25 13:44:08.192088')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('load-balancer') unset quota('4', 'gb/wk') allow traffic('torrent'), protocol('icmp') start timestamp('2019-01-25 03:36:08.192061') end timestamp('2019-01-25 07:06:08.192078')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi') set quota('2', 'gb/wk') block protocol('telnet'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') allow protocol('quic'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block protocol('http'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('tcp') start timestamp('2019-01-25 09:05:09.002793') end timestamp('2019-01-25 13:08:09.002797')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.100') add middlebox('dpi'), middlebox('load-balancer') unset quota('9', 'gb/wk') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 03:52:09.002786') end timestamp('2019-01-25 07:20:09.002789')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') block protocol('sftp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('sftp'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('firewall'), middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('parental-control') unset quota('6', 'gb/wk') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') add middlebox('load-balancer') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('quic'), protocol('ftp') start timestamp('2019-01-25 04:53:09.591126') end timestamp('2019-01-25 13:06:09.591130')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 04:40:09.591100') end timestamp('2019-01-25 13:14:09.591121')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '10', 'mbps') block protocol('sftp'), service('youtube') start timestamp('2019-01-25 05:20:10.150227') end timestamp('2019-01-25 13:16:10.150232')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('netflix') start timestamp('2019-01-25 04:05:10.150198') end timestamp('2019-01-25 13:20:10.150222')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') unset bandwidth('max', '90', 'mbps') block traffic('peer2peer'), protocol('udp') start timestamp('2019-01-25 05:40:10.178695') end timestamp('2019-01-25 14:58:10.178699')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('netflix'), traffic('streaming') start timestamp('2019-01-25 05:49:10.178668') end timestamp('2019-01-25 13:21:10.178689')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('ids') set quota('5', 'gb/wk') block service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') allow service('amazon-prime'), protocol('sftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('5', 'gb/wk') block protocol('smtp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '10', 'mbps') block protocol('tcp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('8', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '80', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('firewall') set quota('6', 'gb/wk') allow protocol('sftp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('ids') set quota('3', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('youtube'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '50', 'mbps') start timestamp('2019-01-25 04:22:13.917120') end timestamp('2019-01-25 14:14:13.917124')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') start timestamp('2019-01-25 04:12:13.917095') end timestamp('2019-01-25 14:11:13.917114')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('2', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('9', 'gb/wk') allow service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('tcp'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('4', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set quota('4', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') add middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('min', '20', 'mbps') block protocol('telnet'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '80', 'mbps') block service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 05:37:14.173129') end timestamp('2019-01-25 13:41:14.173133')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('firewall') unset quota('9', 'gb/wk') allow protocol('sftp'), traffic('social-media') start timestamp('2019-01-25 04:25:14.173109') end timestamp('2019-01-25 14:49:14.173124')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('1', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '10', 'mbps') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('4', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall') set quota('2', 'gb/wk') allow service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set quota('8', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set quota('6', 'gb/wk') block protocol('snmp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('tcp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow protocol('icmp'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') block traffic('peer2peer') start timestamp('2019-01-25 08:29:15.631765') end timestamp('2019-01-25 13:07:15.631770')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow protocol('sftp'), service('stremio') start timestamp('2019-01-25 03:43:15.631741') end timestamp('2019-01-25 07:17:15.631759')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') unset quota('2', 'gb/wk') block traffic('peer2peer'), protocol('ftp') start timestamp('2019-01-25 04:11:15.686081') end timestamp('2019-01-25 15:00:15.686085')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') unset quota('3', 'gb/wk') allow protocol('quic'), service('popcorn-time') start timestamp('2019-01-25 06:00:15.686060') end timestamp('2019-01-25 13:11:15.686075')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') block protocol('quic'), traffic('social-media') start timestamp('2019-01-25 09:27:15.915643') end timestamp('2019-01-25 14:27:15.915647')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('https'), traffic('streaming') start timestamp('2019-01-25 03:43:15.915623') end timestamp('2019-01-25 07:45:15.915637')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') allow service('amazon-prime'), protocol('icmp') start timestamp('2019-01-25 08:38:15.915751') end timestamp('2019-01-25 13:13:15.915755')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('vimeo') start timestamp('2019-01-25 03:02:15.915740') end timestamp('2019-01-25 07:57:15.915746')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.105') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('max', '40', 'mbps') block protocol('https'), traffic('torrent') start timestamp('2019-01-25 05:52:16.680049') end timestamp('2019-01-25 13:44:16.680053')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 05:48:16.680027') end timestamp('2019-01-25 13:57:16.680043')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') set quota('8', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('3', 'gb/wk') allow protocol('snmp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') block service('vimeo'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '80', 'mbps') block protocol('telnet'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block protocol('icmp'), traffic('social-media') start timestamp('2019-01-25 04:29:17.647649') end timestamp('2019-01-25 14:39:17.647653')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') set bandwidth('min', '80', 'mbps') allow traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 05:02:17.647623') end timestamp('2019-01-25 13:28:17.647642')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('popcorn-time') start timestamp('2019-01-25 04:10:17.674724') end timestamp('2019-01-25 14:22:17.674727')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset quota('3', 'gb/wk') allow traffic('streaming'), service('bittorrent') start timestamp('2019-01-25 05:21:17.674704') end timestamp('2019-01-25 15:01:17.674718')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') allow traffic('peer2peer'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.142') add middlebox('firewall'), middlebox('ids') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 08:56:18.003018') end timestamp('2019-01-25 13:12:18.003022')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 02:35:18.002997') end timestamp('2019-01-25 08:29:18.003012')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('sftp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') allow protocol('snmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') unset quota('6', 'gb/wk') block service('amazon-prime'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '10', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi') allow protocol('https'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('8', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set quota('3', 'gb/wk') allow protocol('quic'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi') set bandwidth('min', '20', 'mbps') block protocol('snmp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer') set quota('5', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set quota('9', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('4', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') block protocol('quic'), protocol('udp') start timestamp('2019-01-25 08:30:20.241861') end timestamp('2019-01-25 14:53:20.241866')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') allow service('bittorrent'), service('popcorn-time') start timestamp('2019-01-25 03:44:20.241811') end timestamp('2019-01-25 07:29:20.241840')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer') set quota('7', 'gb/wk') allow service('popcorn-time'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('tcp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('streaming'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('ids') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 08:42:21.204065') end timestamp('2019-01-25 14:42:21.204069')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') remove middlebox('firewall'), middlebox('dpi') block service('stremio'), service('netflix') start timestamp('2019-01-25 03:53:21.204044') end timestamp('2019-01-25 07:41:21.204059')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('http'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') allow service('stremio'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block service('netflix'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow traffic('social-media'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') unset bandwidth('max', '30', 'mbps') start timestamp('2019-01-25 09:09:21.704291') end timestamp('2019-01-25 14:49:21.704295')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi') unset quota('2', 'gb/wk') start timestamp('2019-01-25 03:55:21.704270') end timestamp('2019-01-25 07:55:21.704285')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') block service('stremio'), service('instagram') start timestamp('2019-01-25 08:35:21.852521') end timestamp('2019-01-25 14:42:21.852525')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow service('instagram'), service('facebook') start timestamp('2019-01-25 03:23:21.852500') end timestamp('2019-01-25 08:23:21.852515')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('ids') block protocol('telnet'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('9', 'gb/wk') allow traffic('torrent'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') set bandwidth('min', '10', 'mbps') allow protocol('http'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow protocol('quic'), protocol('snmp') start timestamp('2019-01-25 05:17:23.245768') end timestamp('2019-01-25 13:57:23.245771')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') allow protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 04:47:23.245745') end timestamp('2019-01-25 14:03:23.245762')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') remove middlebox('parental-control') unset quota('4', 'gb/wk') allow service('amazon-prime') start timestamp('2019-01-25 05:15:23.450471') end timestamp('2019-01-25 13:49:23.450475')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('ids') set bandwidth('max', '50', 'mbps') block service('facebook'), service('netflix') start timestamp('2019-01-25 04:09:23.450445') end timestamp('2019-01-25 14:28:23.450466')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block protocol('tcp'), service('youtube') start timestamp('2019-01-25 04:30:23.479902') end timestamp('2019-01-25 14:52:23.479906')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') unset bandwidth('max', '10', 'mbps') allow service('facebook'), traffic('streaming') start timestamp('2019-01-25 04:07:23.479876') end timestamp('2019-01-25 14:29:23.479896')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 09:42:23.922326') end timestamp('2019-01-25 14:00:23.922330')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow traffic('social-media'), service('youtube') start timestamp('2019-01-25 02:30:23.922299') end timestamp('2019-01-25 08:22:23.922319')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') block service('youtube'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('torrent'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 08:05:24.205667') end timestamp('2019-01-25 13:52:24.205671')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') start timestamp('2019-01-25 02:16:24.205629') end timestamp('2019-01-25 07:23:24.205645')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids') set quota('6', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('peer2peer'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), traffic('peer2peer') start timestamp('2019-01-25 04:05:24.913021') end timestamp('2019-01-25 14:18:24.913025')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 05:00:24.912990') end timestamp('2019-01-25 14:18:24.913014')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') set quota('4', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') allow protocol('tcp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow traffic('peer2peer'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set quota('1', 'gb/wk') allow protocol('sftp'), service('popcorn-time') start timestamp('2019-01-25 05:00:25.608623') end timestamp('2019-01-25 13:50:25.608627')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps') allow protocol('udp'), service('facebook') start timestamp('2019-01-25 05:33:25.608590') end timestamp('2019-01-25 14:29:25.608616')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.136') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('vimeo'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('parental-control') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '30', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block protocol('quic'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('2', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') unset quota('8', 'gb/wk') block service('stremio'), traffic('social-media') start timestamp('2019-01-25 05:12:28.122116') end timestamp('2019-01-25 14:31:28.122120')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 05:45:28.122083') end timestamp('2019-01-25 14:53:28.122110')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') remove middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('firewall'), middlebox('dpi') allow traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow protocol('udp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('min', '80', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('vimeo'), protocol('sftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow protocol('quic'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') set bandwidth('min', '70', 'mbps') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') unset bandwidth('max', '10', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') allow traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') block service('stremio'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') remove middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') remove middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall'), middlebox('ids') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 05:07:30.589508') end timestamp('2019-01-25 13:46:30.589512')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), service('popcorn-time') start timestamp('2019-01-25 05:32:30.589487') end timestamp('2019-01-25 14:17:30.589503')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('1', 'gb/wk') allow traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids') set bandwidth('min', '50', 'mbps') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') add middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('sftp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('quic'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps') allow service('amazon-prime') start timestamp('2019-01-25 09:01:31.933787') end timestamp('2019-01-25 14:32:31.933791')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') add middlebox('load-balancer'), middlebox('dpi') unset quota('9', 'gb/wk') block service('stremio'), service('instagram') start timestamp('2019-01-25 03:02:31.933766') end timestamp('2019-01-25 07:34:31.933782')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow service('vimeo'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('ftp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('telnet'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('min', '40', 'mbps') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('8', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('9', 'gb/wk') allow service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 08:59:32.535475') end timestamp('2019-01-25 15:00:32.535479')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi') unset quota('8', 'gb/wk') allow protocol('tcp'), traffic('torrent') start timestamp('2019-01-25 02:48:32.535455') end timestamp('2019-01-25 08:02:32.535470')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('5', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block protocol('udp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') start timestamp('2019-01-25 09:07:33.167482') end timestamp('2019-01-25 13:40:33.167486')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 03:43:33.167460') end timestamp('2019-01-25 07:43:33.167476')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 08:47:33.203017') end timestamp('2019-01-25 13:42:33.203038')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') allow service('vimeo'), service('stremio') start timestamp('2019-01-25 02:36:33.202970') end timestamp('2019-01-25 08:19:33.202998')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 05:53:33.632852') end timestamp('2019-01-25 14:36:33.632856')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 05:38:33.632833') end timestamp('2019-01-25 13:55:33.632847')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids') unset bandwidth('max', '20', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') allow service('amazon-prime'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') allow service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow protocol('tcp'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set quota('3', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('vimeo'), protocol('sftp') start timestamp('2019-01-25 09:01:34.018867') end timestamp('2019-01-25 13:22:34.018871')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '60', 'mbps') block service('youtube'), service('facebook') start timestamp('2019-01-25 03:54:34.018845') end timestamp('2019-01-25 08:43:34.018861')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('stremio'), protocol('http') start timestamp('2019-01-25 09:04:34.289030') end timestamp('2019-01-25 14:38:34.289034')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block service('popcorn-time') start timestamp('2019-01-25 03:21:34.289008') end timestamp('2019-01-25 07:19:34.289024')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('stremio'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '10', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') set bandwidth('min', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '30', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') set bandwidth('max', '80', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') block traffic('streaming'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') block traffic('torrent'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block service('stremio'), protocol('quic') start timestamp('2019-01-25 05:24:34.694226') end timestamp('2019-01-25 14:36:34.694231')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('4', 'gb/wk') allow service('youtube'), service('bittorrent') start timestamp('2019-01-25 05:14:34.694205') end timestamp('2019-01-25 14:37:34.694221')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') block service('vimeo'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('2', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '80', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids') block service('amazon-prime'), traffic('social-media') start timestamp('2019-01-25 08:42:35.941744') end timestamp('2019-01-25 14:40:35.941748')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') allow protocol('quic'), traffic('social-media') start timestamp('2019-01-25 03:43:35.941722') end timestamp('2019-01-25 08:30:35.941738')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') block protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') allow traffic('torrent'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '70', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow protocol('http'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '20', 'mbps') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 05:06:36.911168') end timestamp('2019-01-25 14:49:36.911172')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 04:12:36.911145') end timestamp('2019-01-25 13:27:36.911163')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.152') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow service('stremio'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer') block service('stremio'), service('netflix') start timestamp('2019-01-25 08:35:37.006309') end timestamp('2019-01-25 14:02:37.006313')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 02:08:37.006288') end timestamp('2019-01-25 07:43:37.006303')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow protocol('smtp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('telnet'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') unset quota('7', 'gb/wk') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 05:51:38.454674') end timestamp('2019-01-25 13:11:38.454678')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') unset quota('3', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 05:27:38.454654') end timestamp('2019-01-25 13:46:38.454669')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('4', 'gb/wk') block service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') allow traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids') set quota('2', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.122') set quota('7', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '10', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') remove middlebox('load-balancer'), middlebox('ids') set quota('5', 'gb/wk') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') remove middlebox('ids') unset bandwidth('min', '70', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control') unset quota('3', 'gb/wk') allow traffic('torrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 08:48:39.614917') end timestamp('2019-01-25 14:26:39.614921')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 02:24:39.614889') end timestamp('2019-01-25 07:10:39.614909')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') block traffic('streaming') start timestamp('2019-01-25 09:59:40.065030') end timestamp('2019-01-25 14:48:40.065034')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer') allow service('instagram'), service('netflix') start timestamp('2019-01-25 03:55:40.065008') end timestamp('2019-01-25 08:24:40.065024')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('dpi'), middlebox('firewall') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps') block service('stremio'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('telnet'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set bandwidth('min', '30', 'mbps') block traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 04:28:40.591551') end timestamp('2019-01-25 13:04:40.591555')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 04:59:40.591526') end timestamp('2019-01-25 14:22:40.591545')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') allow protocol('snmp'), service('facebook') start timestamp('2019-01-25 04:11:41.159061') end timestamp('2019-01-25 14:56:41.159065')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow service('youtube'), protocol('ftp') start timestamp('2019-01-25 04:09:41.159036') end timestamp('2019-01-25 14:54:41.159056')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('load-balancer'), middlebox('dpi') set quota('6', 'gb/wk') block protocol('smtp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') remove middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block protocol('sftp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids') set quota('7', 'gb/wk') allow protocol('telnet'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 04:23:41.747799') end timestamp('2019-01-25 13:42:41.747803')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('netflix'), service('bittorrent') start timestamp('2019-01-25 04:39:41.747775') end timestamp('2019-01-25 15:01:41.747793')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi') set quota('6', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow protocol('sftp'), service('youtube') start timestamp('2019-01-25 04:21:42.075248') end timestamp('2019-01-25 14:52:42.075252')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') unset bandwidth('max', '10', 'mbps') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 04:41:42.075223') end timestamp('2019-01-25 14:41:42.075242')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('quic'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') remove middlebox('ids') set quota('1', 'gb/wk') block service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk') block service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('snmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') set bandwidth('max', '10', 'mbps') block service('amazon-prime'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('max', '20', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('ids') unset quota('6', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('9', 'gb/wk') allow protocol('quic'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.118') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 05:19:44.585591') end timestamp('2019-01-25 13:44:44.585595')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('dpi') set quota('8', 'gb/wk') start timestamp('2019-01-25 04:56:44.585567') end timestamp('2019-01-25 13:17:44.585585')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block traffic('social-media'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set bandwidth('max', '30', 'mbps') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '90', 'mbps') allow protocol('telnet'), traffic('torrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') block protocol('icmp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('amazon-prime'), protocol('http')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow protocol('icmp'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('4', 'gb/wk') block protocol('quic'), protocol('snmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('4', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') block service('amazon-prime'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') allow traffic('torrent'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('parental-control') set quota('9', 'gb/wk') allow service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block service('instagram'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('telnet'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('ids') set bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 04:46:46.439328') end timestamp('2019-01-25 13:54:46.439332')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 04:22:46.439307') end timestamp('2019-01-25 14:42:46.439322')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '60', 'mbps') allow service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 04:23:46.734505') end timestamp('2019-01-25 14:23:46.734509')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 05:25:46.734480') end timestamp('2019-01-25 14:38:46.734500')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block service('vimeo'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow traffic('torrent'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 04:13:46.878715') end timestamp('2019-01-25 14:17:46.878719')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset quota('1', 'gb/wk') allow service('netflix') start timestamp('2019-01-25 05:19:46.878689') end timestamp('2019-01-25 14:34:46.878709')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('facebook'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') block traffic('peer2peer'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi') block service('vimeo'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') allow service('vimeo'), protocol('smtp') start timestamp('2019-01-25 09:48:47.071934') end timestamp('2019-01-25 14:18:47.071938')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 02:55:47.071872') end timestamp('2019-01-25 07:21:47.071915')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('6', 'gb/wk') allow protocol('udp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow service('instagram'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') unset bandwidth('min', '80', 'mbps') block traffic('torrent'), service('youtube') start timestamp('2019-01-25 04:50:47.373713') end timestamp('2019-01-25 14:40:47.373717')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control'), middlebox('load-balancer') unset quota('8', 'gb/wk') allow traffic('torrent'), service('facebook') start timestamp('2019-01-25 04:08:47.373685') end timestamp('2019-01-25 13:11:47.373706')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('netflix'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('stremio'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.174') set bandwidth('min', '30', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('min', '80', 'mbps') allow protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('1', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk') allow service('facebook'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '50', 'mbps') allow service('bittorrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') block protocol('https'), service('stremio') start timestamp('2019-01-25 08:42:47.772067') end timestamp('2019-01-25 14:32:47.772071')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') remove middlebox('parental-control') allow service('amazon-prime') start timestamp('2019-01-25 02:37:47.772045') end timestamp('2019-01-25 08:28:47.772061')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') block protocol('tcp'), service('facebook') start timestamp('2019-01-25 04:55:48.710491') end timestamp('2019-01-25 14:34:48.710495')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset quota('3', 'gb/wk') allow protocol('icmp'), service('facebook') start timestamp('2019-01-25 04:14:48.710469') end timestamp('2019-01-25 14:29:48.710485')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('parental-control'), middlebox('dpi') set quota('1', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('tcp'), service('popcorn-time') start timestamp('2019-01-25 04:23:49.208326') end timestamp('2019-01-25 13:02:49.208330')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 05:49:49.208297') end timestamp('2019-01-25 13:12:49.208320')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('vimeo'), traffic('peer2peer') start timestamp('2019-01-25 05:18:50.027913') end timestamp('2019-01-25 14:16:50.027917')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('parental-control') unset quota('8', 'gb/wk') block protocol('smtp'), service('instagram') start timestamp('2019-01-25 05:24:50.027889') end timestamp('2019-01-25 14:48:50.027908')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('6', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('min', '90', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.114') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('icmp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow protocol('telnet'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('load-balancer') set bandwidth('min', '90', 'mbps') block protocol('snmp'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block protocol('smtp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') block protocol('snmp'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') allow service('facebook'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') remove middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('8', 'gb/wk') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('tcp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:54:52.312934') end timestamp('2019-01-25 13:06:52.312937')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('7', 'gb/wk') start timestamp('2019-01-25 04:30:52.312911') end timestamp('2019-01-25 14:30:52.312928')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block protocol('sftp'), protocol('telnet') start timestamp('2019-01-25 04:52:52.366318') end timestamp('2019-01-25 14:03:52.366321')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi') unset quota('6', 'gb/wk') allow service('vimeo'), protocol('ftp') start timestamp('2019-01-25 04:46:52.366298') end timestamp('2019-01-25 14:55:52.366312')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('load-balancer') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('ids') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow protocol('http'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '70', 'mbps') allow protocol('telnet'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('facebook'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('snmp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') start timestamp('2019-01-25 09:11:52.796208') end timestamp('2019-01-25 13:15:52.796212')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 02:16:52.796186') end timestamp('2019-01-25 07:30:52.796202')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow protocol('http'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi') set quota('7', 'gb/wk') block service('bittorrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') block service('netflix'), service('popcorn-time') start timestamp('2019-01-25 09:38:54.903431') end timestamp('2019-01-25 14:26:54.903436')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') allow traffic('torrent'), service('netflix') start timestamp('2019-01-25 03:40:54.903406') end timestamp('2019-01-25 08:41:54.903425')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('firewall'), middlebox('dpi') allow service('stremio'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('sftp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('sftp'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer') unset quota('7', 'gb/wk') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 05:34:55.492951') end timestamp('2019-01-25 13:14:55.492955')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') unset quota('7', 'gb/wk') allow service('youtube'), service('netflix') start timestamp('2019-01-25 04:44:55.492912') end timestamp('2019-01-25 13:06:55.492945')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.75') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') allow service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 09:49:55.526833') end timestamp('2019-01-25 14:04:55.526837')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') add middlebox('firewall') set bandwidth('max', '10', 'mbps') block protocol('icmp'), service('instagram') start timestamp('2019-01-25 03:21:55.526815') end timestamp('2019-01-25 07:30:55.526827')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') block protocol('https'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') block traffic('torrent'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow protocol('http'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('firewall') set bandwidth('max', '20', 'mbps') allow protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set quota('6', 'gb/wk') allow service('vimeo'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:13:56.121006') end timestamp('2019-01-25 14:31:56.121010')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow service('vimeo'), protocol('ftp') start timestamp('2019-01-25 04:41:56.120983') end timestamp('2019-01-25 14:36:56.121000')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block service('stremio'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow protocol('tcp'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), service('youtube') start timestamp('2019-01-25 04:52:56.838883') end timestamp('2019-01-25 13:56:56.838887')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 04:46:56.838858') end timestamp('2019-01-25 14:58:56.838877')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi') set quota('8', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow service('amazon-prime'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('firewall') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') unset quota('2', 'gb/wk') start timestamp('2019-01-25 05:02:57.130648') end timestamp('2019-01-25 13:33:57.130652')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:20:57.130624') end timestamp('2019-01-25 14:33:57.130642')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('load-balancer') block service('bittorrent'), traffic('streaming') start timestamp('2019-01-25 08:56:57.392647') end timestamp('2019-01-25 13:25:57.392652')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('dpi'), middlebox('ids') allow service('facebook'), traffic('social-media') start timestamp('2019-01-25 03:39:57.392625') end timestamp('2019-01-25 08:40:57.392641')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('https'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('2', 'gb/wk') block protocol('http'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '10', 'mbps') block service('youtube'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('6', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('facebook'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('telnet'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') block service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('dpi'), middlebox('load-balancer') block protocol('quic'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('load-balancer') allow service('instagram'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('firewall') set quota('7', 'gb/wk') allow service('youtube'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '50', 'mbps') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') set quota('6', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') add middlebox('parental-control') set quota('7', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') remove middlebox('load-balancer') set bandwidth('max', '90', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.115') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow service('amazon-prime'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('max', '80', 'mbps') block traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 09:18:59.441655') end timestamp('2019-01-25 13:17:59.441658')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset bandwidth('min', '20', 'mbps') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 03:59:59.441647') end timestamp('2019-01-25 07:23:59.441651')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') block service('vimeo'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('vimeo'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') start timestamp('2019-01-25 08:58:59.675238') end timestamp('2019-01-25 14:36:59.675242')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi') start timestamp('2019-01-25 02:18:59.675209') end timestamp('2019-01-25 07:44:59.675231')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 09:16:59.843791') end timestamp('2019-01-25 13:56:59.843795')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('firewall') block traffic('torrent'), protocol('http') start timestamp('2019-01-25 02:41:59.843769') end timestamp('2019-01-25 07:20:59.843785')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') block service('vimeo'), protocol('https') start timestamp('2019-01-25 08:40:00.581321') end timestamp('2019-01-25 14:46:00.581325')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control') allow protocol('icmp'), traffic('streaming') start timestamp('2019-01-25 02:15:00.581314') end timestamp('2019-01-25 07:25:00.581317')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('http'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 05:20:01.210460') end timestamp('2019-01-25 13:42:01.210463')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') unset quota('8', 'gb/wk') start timestamp('2019-01-25 05:34:01.210438') end timestamp('2019-01-25 13:04:01.210454')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.123') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.66') add middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '40', 'mbps') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('min', '90', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') block traffic('streaming'), service('netflix') start timestamp('2019-01-25 09:29:01.945928') end timestamp('2019-01-25 14:46:01.945932')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('load-balancer') allow service('vimeo'), protocol('tcp') start timestamp('2019-01-25 03:43:01.945920') end timestamp('2019-01-25 08:32:01.945924')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow protocol('udp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('7', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') unset quota('6', 'gb/wk') block protocol('https'), protocol('udp') start timestamp('2019-01-25 04:34:03.058659') end timestamp('2019-01-25 14:12:03.058663')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('firewall'), middlebox('dpi') unset quota('5', 'gb/wk') allow protocol('tcp'), service('bittorrent') start timestamp('2019-01-25 04:37:03.058635') end timestamp('2019-01-25 14:01:03.058654')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block service('stremio'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '50', 'mbps') block traffic('peer2peer'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') block service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.157') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') add middlebox('dpi') set quota('2', 'gb/wk') block service('vimeo'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('youtube'), service('popcorn-time') start timestamp('2019-01-25 05:32:03.891724') end timestamp('2019-01-25 14:34:03.891728')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') allow protocol('sftp'), service('youtube') start timestamp('2019-01-25 05:14:03.891701') end timestamp('2019-01-25 13:47:03.891718')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('tcp'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 04:41:04.074987') end timestamp('2019-01-25 14:19:04.074991')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow service('vimeo'), traffic('torrent') start timestamp('2019-01-25 04:23:04.074963') end timestamp('2019-01-25 14:19:04.074981')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('ids') start timestamp('2019-01-25 08:20:04.537493') end timestamp('2019-01-25 13:37:04.537498')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 04:00:04.537466') end timestamp('2019-01-25 07:26:04.537487')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('telnet'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall') set bandwidth('min', '80', 'mbps') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control') set quota('6', 'gb/wk') block service('amazon-prime'), protocol('quic')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('bittorrent'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('snmp') start timestamp('2019-01-25 05:39:05.693754') end timestamp('2019-01-25 13:08:05.693757')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 05:58:05.693731') end timestamp('2019-01-25 14:27:05.693748')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk') allow protocol('tcp'), traffic('streaming') start timestamp('2019-01-25 08:02:06.662863') end timestamp('2019-01-25 14:20:06.662867')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 03:56:06.662841') end timestamp('2019-01-25 07:49:06.662857')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('2', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set bandwidth('min', '50', 'mbps') allow traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 08:32:07.239658') end timestamp('2019-01-25 13:33:07.239662')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '90', 'mbps') block protocol('snmp'), traffic('social-media') start timestamp('2019-01-25 03:48:07.239637') end timestamp('2019-01-25 07:51:07.239652')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('firewall') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('firewall') allow service('vimeo'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('7', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk') allow service('amazon-prime'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') remove middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.149') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('tcp'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') add middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') remove middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('amazon-prime'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') add middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block service('facebook') start timestamp('2019-01-25 05:38:09.382690') end timestamp('2019-01-25 14:20:09.382694')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('dpi') unset quota('3', 'gb/wk') allow service('facebook') start timestamp('2019-01-25 05:15:09.382665') end timestamp('2019-01-25 13:16:09.382684')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset bandwidth('max', '60', 'mbps') block protocol('https'), traffic('streaming') start timestamp('2019-01-25 09:28:09.484733') end timestamp('2019-01-25 14:19:09.484738')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 03:38:09.484704') end timestamp('2019-01-25 07:11:09.484727')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') unset bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 05:01:09.556940') end timestamp('2019-01-25 13:15:09.556957')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block service('vimeo'), protocol('udp') start timestamp('2019-01-25 05:35:09.556892') end timestamp('2019-01-25 14:22:09.556935')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '60', 'mbps') start timestamp('2019-01-25 05:05:09.682104') end timestamp('2019-01-25 14:54:09.682108')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('max', '10', 'mbps') start timestamp('2019-01-25 04:19:09.682080') end timestamp('2019-01-25 14:23:09.682098')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('https'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') block protocol('telnet'), protocol('udp') start timestamp('2019-01-25 04:55:10.155225') end timestamp('2019-01-25 14:56:10.155229')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow traffic('torrent'), service('youtube') start timestamp('2019-01-25 04:43:10.155198') end timestamp('2019-01-25 13:19:10.155219')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') block service('vimeo'), protocol('https') start timestamp('2019-01-25 09:31:10.155415') end timestamp('2019-01-25 13:05:10.155418')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') block protocol('smtp'), service('facebook') start timestamp('2019-01-25 02:04:10.155394') end timestamp('2019-01-25 08:32:10.155411')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('2', 'gb/wk') allow service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('4', 'gb/wk') block service('vimeo'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.168') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow service('stremio'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer') set quota('1', 'gb/wk') block protocol('https'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow service('amazon-prime'), service('vimeo')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') allow service('facebook'), service('netflix') start timestamp('2019-01-25 09:31:10.682994') end timestamp('2019-01-25 14:03:10.682999')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') allow protocol('quic'), protocol('snmp') start timestamp('2019-01-25 03:16:10.682975') end timestamp('2019-01-25 08:44:10.682988')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') unset bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') block traffic('peer2peer'), protocol('telnet') start timestamp('2019-01-25 09:53:11.147782') end timestamp('2019-01-25 13:25:11.147786')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') add middlebox('ids'), middlebox('load-balancer') allow service('facebook'), service('popcorn-time') start timestamp('2019-01-25 03:23:11.147756') end timestamp('2019-01-25 08:10:11.147776')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block traffic('social-media'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block protocol('http'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow protocol('tcp'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block protocol('sftp'), protocol('https') start timestamp('2019-01-25 08:44:11.607271') end timestamp('2019-01-25 13:09:11.607275')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow protocol('http'), traffic('streaming') start timestamp('2019-01-25 03:18:11.607244') end timestamp('2019-01-25 07:27:11.607265')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('3', 'gb/wk') allow protocol('icmp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('ids') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.153') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') block traffic('torrent'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('tcp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') block protocol('sftp'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control') allow service('instagram'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') add middlebox('dpi') unset bandwidth('min', '20', 'mbps') block protocol('tcp'), protocol('smtp') start timestamp('2019-01-25 09:33:12.584727') end timestamp('2019-01-25 13:59:12.584730')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 03:03:12.584699') end timestamp('2019-01-25 08:32:12.584720')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') remove middlebox('ids') block traffic('peer2peer'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('parental-control') block service('facebook'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.179') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') block service('vimeo'), protocol('https') start timestamp('2019-01-25 08:41:12.844535') end timestamp('2019-01-25 13:48:12.844539')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.175') add middlebox('parental-control') allow traffic('peer2peer'), traffic('social-media') start timestamp('2019-01-25 03:35:12.844508') end timestamp('2019-01-25 07:26:12.844529')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '70', 'mbps') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '80', 'mbps') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') start timestamp('2019-01-25 08:59:13.080119') end timestamp('2019-01-25 14:16:13.080124')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') start timestamp('2019-01-25 02:54:13.080092') end timestamp('2019-01-25 07:15:13.080113')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '90', 'mbps') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 04:58:13.565309') end timestamp('2019-01-25 14:52:13.565314')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('1', 'gb/wk') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 04:04:13.565282') end timestamp('2019-01-25 13:41:13.565303')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('6', 'gb/wk') block service('instagram'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow service('stremio'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set quota('6', 'gb/wk') block protocol('telnet'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') set quota('6', 'gb/wk') block traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('dpi') set quota('7', 'gb/wk') block service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow protocol('sftp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids') set bandwidth('max', '90', 'mbps') block service('amazon-prime'), service('vimeo')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('telnet'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') remove middlebox('load-balancer') allow traffic('torrent'), protocol('ftp') start timestamp('2019-01-25 09:04:14.460235') end timestamp('2019-01-25 13:43:14.460239')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('load-balancer') allow protocol('icmp'), protocol('udp') start timestamp('2019-01-25 03:54:14.460213') end timestamp('2019-01-25 09:02:14.460229')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 08:45:14.460392') end timestamp('2019-01-25 13:54:14.460396')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow protocol('snmp'), service('instagram') start timestamp('2019-01-25 03:04:14.460381') end timestamp('2019-01-25 08:07:14.460388')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('telnet'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('icmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids') unset quota('1', 'gb/wk') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 05:57:14.549672') end timestamp('2019-01-25 14:16:14.549689')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('instagram'), protocol('udp') start timestamp('2019-01-25 05:02:14.549634') end timestamp('2019-01-25 14:03:14.549665')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set quota('2', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '10', 'mbps') block protocol('https'), protocol('telnet')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('min', '10', 'mbps') allow service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('stremio'), service('instagram') start timestamp('2019-01-25 05:07:14.884937') end timestamp('2019-01-25 14:22:14.884940')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('ids'), middlebox('firewall') unset bandwidth('min', '50', 'mbps') block protocol('icmp'), protocol('ftp') start timestamp('2019-01-25 04:29:14.884914') end timestamp('2019-01-25 13:47:14.884931')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '40', 'mbps') block service('bittorrent'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') set bandwidth('max', '50', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '90', 'mbps') allow service('vimeo'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('quic'), service('netflix') start timestamp('2019-01-25 09:50:15.471522') end timestamp('2019-01-25 14:42:15.471526')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('stremio'), traffic('streaming') start timestamp('2019-01-25 03:41:15.471501') end timestamp('2019-01-25 08:19:15.471516')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer') unset bandwidth('max', '50', 'mbps') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 05:11:15.603857') end timestamp('2019-01-25 14:20:15.603861')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow service('stremio'), traffic('torrent') start timestamp('2019-01-25 05:25:15.603835') end timestamp('2019-01-25 14:25:15.603851')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall') set bandwidth('max', '90', 'mbps') allow service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow traffic('torrent'), protocol('udp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') unset quota('8', 'gb/wk') block traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 08:04:16.164886') end timestamp('2019-01-25 14:06:16.164890')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('peer2peer'), service('netflix') start timestamp('2019-01-25 03:07:16.164865') end timestamp('2019-01-25 07:47:16.164880')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('snmp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block service('instagram'), service('youtube') start timestamp('2019-01-25 09:16:16.265110') end timestamp('2019-01-25 13:14:16.265113')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') unset quota('2', 'gb/wk') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 02:23:16.265088') end timestamp('2019-01-25 08:53:16.265104')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block protocol('snmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') allow service('facebook'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') remove middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('https'), protocol('ftp') start timestamp('2019-01-25 04:58:17.007613') end timestamp('2019-01-25 14:05:17.007617')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('youtube'), protocol('ftp') start timestamp('2019-01-25 04:24:17.007593') end timestamp('2019-01-25 13:37:17.007608')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block protocol('telnet'), protocol('snmp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('parental-control') set quota('2', 'gb/wk') block protocol('tcp'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall') set quota('4', 'gb/wk') block service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('https'), protocol('smtp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('firewall') set bandwidth('min', '20', 'mbps') block service('vimeo'), protocol('https') start timestamp('2019-01-25 08:51:17.555318') end timestamp('2019-01-25 13:14:17.555323')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('ids'), middlebox('parental-control') set bandwidth('max', '40', 'mbps') allow traffic('social-media'), protocol('udp') start timestamp('2019-01-25 02:18:17.555277') end timestamp('2019-01-25 08:37:17.555312')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('udp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.183') add middlebox('dpi') set quota('5', 'gb/wk') allow service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') allow service('youtube'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('udp'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall') block protocol('quic'), traffic('torrent') start timestamp('2019-01-25 09:58:17.686685') end timestamp('2019-01-25 14:24:17.686705')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 02:28:17.686627') end timestamp('2019-01-25 07:52:17.686662')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') unset bandwidth('max', '90', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('4', 'gb/wk') allow protocol('https'), protocol('tcp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.129') add middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('quic'), traffic('streaming') start timestamp('2019-01-25 05:34:18.275262') end timestamp('2019-01-25 13:58:18.275266')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') unset quota('5', 'gb/wk') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 04:52:18.275236') end timestamp('2019-01-25 13:38:18.275256')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block protocol('smtp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('firewall') set quota('3', 'gb/wk') allow protocol('smtp'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps') block service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set bandwidth('max', '10', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') allow protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') block protocol('telnet'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') block protocol('https'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') allow traffic('social-media'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') set bandwidth('min', '50', 'mbps') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('3', 'gb/wk') block protocol('smtp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 04:11:18.794534') end timestamp('2019-01-25 14:45:18.794539')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') start timestamp('2019-01-25 05:15:18.794503') end timestamp('2019-01-25 14:47:18.794528')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('popcorn-time'), service('bittorrent') start timestamp('2019-01-25 09:59:19.232360') end timestamp('2019-01-25 13:42:19.232364')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('amazon-prime'), service('facebook') start timestamp('2019-01-25 03:21:19.232335') end timestamp('2019-01-25 08:04:19.232354')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('torrent'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk') allow protocol('telnet'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') block service('youtube'), service('facebook') start timestamp('2019-01-25 08:36:19.371967') end timestamp('2019-01-25 13:39:19.371972')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('ids') block service('vimeo'), service('netflix') start timestamp('2019-01-25 03:12:19.371945') end timestamp('2019-01-25 07:09:19.371961')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('2', 'gb/wk') start timestamp('2019-01-25 05:15:19.399113') end timestamp('2019-01-25 13:28:19.399117')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') set quota('4', 'gb/wk') start timestamp('2019-01-25 05:58:19.399089') end timestamp('2019-01-25 14:09:19.399107')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('dpi') set quota('4', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.147') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk') block protocol('http'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.137') set quota('7', 'gb/wk') allow protocol('http'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set quota('8', 'gb/wk') block traffic('peer2peer'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('3', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 09:33:19.652465') end timestamp('2019-01-25 14:48:19.652469')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') allow service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 03:24:19.652443') end timestamp('2019-01-25 08:55:19.652459')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('3', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset bandwidth('min', '20', 'mbps') block service('stremio'), service('youtube') start timestamp('2019-01-25 08:39:19.864224') end timestamp('2019-01-25 14:17:19.864228')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 03:08:19.864201') end timestamp('2019-01-25 08:34:19.864218')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('1', 'gb/wk') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('http'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '30', 'mbps') allow service('netflix'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '60', 'mbps') block traffic('peer2peer'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') set bandwidth('max', '70', 'mbps') allow service('stremio'), protocol('snmp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block protocol('snmp'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('stremio'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') allow service('popcorn-time'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') unset bandwidth('min', '40', 'mbps') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '30', 'mbps') allow traffic('torrent'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 05:49:20.350513') end timestamp('2019-01-25 13:31:20.350517')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') unset quota('4', 'gb/wk') allow service('bittorrent') start timestamp('2019-01-25 04:20:20.350481') end timestamp('2019-01-25 15:00:20.350506')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('9', 'gb/wk') block service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.132') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps') block service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('ids')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental-control')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') remove middlebox('load-balancer'), middlebox('ids') set quota('3', 'gb/wk') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.133') set quota('6', 'gb/wk') allow service('stremio'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 09:08:21.348146') end timestamp('2019-01-25 13:27:21.348149')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 03:45:21.348139') end timestamp('2019-01-25 07:05:21.348142')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') set bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') unset bandwidth('max', '50', 'mbps') allow service('amazon-prime'), protocol('telnet') start timestamp('2019-01-25 05:24:21.526180') end timestamp('2019-01-25 14:34:21.526184')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') unset quota('5', 'gb/wk') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 05:47:21.526154') end timestamp('2019-01-25 14:23:21.526174')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('8', 'gb/wk') block protocol('quic'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('peer2peer'), protocol('quic')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('quic'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('3', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 08:36:21.624892') end timestamp('2019-01-25 14:56:21.624896')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') start timestamp('2019-01-25 02:11:21.624843') end timestamp('2019-01-25 08:06:21.624873')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') unset quota('4', 'gb/wk') block service('facebook'), traffic('social-media') start timestamp('2019-01-25 05:58:22.090644') end timestamp('2019-01-25 13:32:22.090648')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset bandwidth('min', '70', 'mbps') allow service('facebook'), service('netflix') start timestamp('2019-01-25 05:16:22.090618') end timestamp('2019-01-25 13:56:22.090638')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') start timestamp('2019-01-25 05:54:22.146843') end timestamp('2019-01-25 14:28:22.146846')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') start timestamp('2019-01-25 04:25:22.146819') end timestamp('2019-01-25 14:09:22.146837')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('stremio'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') start timestamp('2019-01-25 04:38:22.447826') end timestamp('2019-01-25 13:53:22.447830')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('max', '80', 'mbps') start timestamp('2019-01-25 04:21:22.447797') end timestamp('2019-01-25 14:12:22.447819')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set quota('6', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('max', '40', 'mbps') block service('bittorrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('8', 'gb/wk') block service('youtube'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall') set quota('5', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('3', 'gb/wk') allow traffic('social-media'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('7', 'gb/wk') block traffic('social-media'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.163') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') allow protocol('udp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '20', 'mbps') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 04:40:24.024526') end timestamp('2019-01-25 14:16:24.024530')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 05:26:24.024500') end timestamp('2019-01-25 13:49:24.024520')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 08:57:24.091995') end timestamp('2019-01-25 13:52:24.091999')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') start timestamp('2019-01-25 02:58:24.091973') end timestamp('2019-01-25 08:40:24.091988')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block protocol('snmp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '70', 'mbps') allow protocol('sftp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('vimeo'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') set bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow traffic('social-media'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow service('facebook'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') add middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('social-media'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('tcp'), service('instagram') start timestamp('2019-01-25 04:20:26.690851') end timestamp('2019-01-25 13:56:26.690856')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 04:20:26.690829') end timestamp('2019-01-25 13:53:26.690845')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('facebook'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall') unset bandwidth('min', '20', 'mbps') start timestamp('2019-01-25 05:35:27.388783') end timestamp('2019-01-25 13:29:27.388787')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps') start timestamp('2019-01-25 04:46:27.388757') end timestamp('2019-01-25 14:12:27.388777')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 09:41:27.605553') end timestamp('2019-01-25 13:34:27.605557')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') start timestamp('2019-01-25 03:53:27.605529') end timestamp('2019-01-25 07:06:27.605546')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk') block service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') block traffic('peer2peer'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') allow service('stremio'), protocol('udp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.101') remove middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('stremio'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('parental-control') set bandwidth('max', '50', 'mbps') block traffic('torrent'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('parental-control') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('parental-control') allow service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 10:00:29.361656') end timestamp('2019-01-25 14:53:29.361660')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('bittorrent'), service('netflix') start timestamp('2019-01-25 03:10:29.361648') end timestamp('2019-01-25 08:53:29.361652')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 09:10:29.458236') end timestamp('2019-01-25 14:44:29.458240')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('popcorn-time'), traffic('streaming') start timestamp('2019-01-25 03:19:29.458209') end timestamp('2019-01-25 08:04:29.458230')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block service('stremio'), service('popcorn-time') start timestamp('2019-01-25 09:13:29.617267') end timestamp('2019-01-25 14:05:29.617271')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('youtube'), traffic('social-media') start timestamp('2019-01-25 02:58:29.617240') end timestamp('2019-01-25 08:38:29.617261')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') add middlebox('firewall'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('telnet'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('social-media'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block service('amazon-prime'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids') set quota('3', 'gb/wk') block traffic('streaming') start timestamp('2019-01-25 08:42:30.163245') end timestamp('2019-01-25 14:23:30.163249')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('icmp'), service('youtube') start timestamp('2019-01-25 03:59:30.163217') end timestamp('2019-01-25 07:51:30.163238')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('8', 'gb/wk') allow service('facebook'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ids') set quota('6', 'gb/wk') allow service('youtube'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('4', 'gb/wk') block service('instagram'), traffic('social-media') start timestamp('2019-01-25 09:18:30.383220') end timestamp('2019-01-25 14:57:30.383224')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('load-balancer'), middlebox('firewall') unset bandwidth('min', '40', 'mbps') allow protocol('telnet'), service('stremio') start timestamp('2019-01-25 03:26:30.383183') end timestamp('2019-01-25 08:20:30.383213')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '70', 'mbps') allow service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') block protocol('https'), traffic('social-media') start timestamp('2019-01-25 08:19:30.802967') end timestamp('2019-01-25 13:43:30.802971')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow service('instagram'), service('popcorn-time') start timestamp('2019-01-25 03:03:30.802960') end timestamp('2019-01-25 07:06:30.802963')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow protocol('udp'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block protocol('udp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('telnet'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk') block service('instagram'), protocol('ftp') start timestamp('2019-01-25 05:47:30.921895') end timestamp('2019-01-25 14:18:30.921899')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), service('facebook') start timestamp('2019-01-25 05:00:30.921874') end timestamp('2019-01-25 14:17:30.921890')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('load-balancer') set quota('9', 'gb/wk') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('https'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('9', 'gb/wk') block protocol('sftp'), traffic('streaming') start timestamp('2019-01-25 08:37:31.071703') end timestamp('2019-01-25 13:41:31.071707')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('social-media'), traffic('streaming') start timestamp('2019-01-25 03:31:31.071679') end timestamp('2019-01-25 07:13:31.071697')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids') set quota('7', 'gb/wk') block protocol('smtp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('6', 'gb/wk') allow protocol('http'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') remove middlebox('parental-control'), middlebox('dpi') unset bandwidth('min', '90', 'mbps') block traffic('torrent'), protocol('udp') start timestamp('2019-01-25 06:00:31.434115') end timestamp('2019-01-25 13:05:31.434119')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') unset quota('6', 'gb/wk') allow service('stremio'), service('facebook') start timestamp('2019-01-25 05:19:31.434090') end timestamp('2019-01-25 15:00:31.434110')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') set quota('8', 'gb/wk') allow service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') remove middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow traffic('torrent'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student_residence') remove middlebox('ids') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') allow service('amazon-prime')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '90', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '90', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block protocol('udp'), service('popcorn-time') start timestamp('2019-01-25 05:17:32.556167') end timestamp('2019-01-25 13:53:32.556171')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow service('instagram'), service('bittorrent') start timestamp('2019-01-25 05:16:32.556142') end timestamp('2019-01-25 13:43:32.556161')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') set bandwidth('max', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('9', 'gb/wk') allow service('vimeo'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids') set quota('3', 'gb/wk') block service('stremio'), protocol('icmp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') unset bandwidth('min', '50', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('parental-control') set bandwidth('min', '30', 'mbps') allow traffic('social-media'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer') unset bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 09:05:35.453954') end timestamp('2019-01-25 14:28:35.453958')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set bandwidth('min', '50', 'mbps') start timestamp('2019-01-25 02:33:35.453931') end timestamp('2019-01-25 07:32:35.453947')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('8', 'gb/wk') block service('popcorn-time'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow traffic('social-media'), protocol('ftp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.138') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') block service('amazon-prime'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') allow service('amazon-prime'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('3', 'gb/wk') allow traffic('torrent'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.143') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('6', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') allow protocol('sftp'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.88') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('http'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('ids') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('parental-control') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 08:10:36.025236') end timestamp('2019-01-25 13:35:36.025240')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.171') add middlebox('parental-control') set quota('2', 'gb/wk') allow protocol('tcp'), service('netflix') start timestamp('2019-01-25 03:52:36.025210') end timestamp('2019-01-25 07:55:36.025230')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') start timestamp('2019-01-25 08:31:36.281537') end timestamp('2019-01-25 14:51:36.281541')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('ids') start timestamp('2019-01-25 02:42:36.281513') end timestamp('2019-01-25 08:30:36.281530')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') block traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('7', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.126') unset quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi') unset quota('3', 'gb/wk') block traffic('streaming'), service('popcorn-time') start timestamp('2019-01-25 05:44:37.502425') end timestamp('2019-01-25 14:16:37.502429')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('stremio'), protocol('icmp') start timestamp('2019-01-25 04:57:37.502395') end timestamp('2019-01-25 13:07:37.502419')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('8', 'gb/wk') block service('youtube'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block protocol('telnet'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('dpi') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), service('youtube') start timestamp('2019-01-25 09:15:37.902652') end timestamp('2019-01-25 14:11:37.902657')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.130') remove middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('stremio'), protocol('smtp') start timestamp('2019-01-25 03:59:37.902598') end timestamp('2019-01-25 07:20:37.902632')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block service('vimeo'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') unset quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '70', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set bandwidth('max', '30', 'mbps') allow protocol('tcp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '90', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set bandwidth('max', '30', 'mbps') allow protocol('tcp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('dpi'), middlebox('load-balancer') set quota('6', 'gb/wk') block service('vimeo'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '30', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('sftp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids') unset quota('8', 'gb/wk') allow protocol('snmp'), service('netflix') start timestamp('2019-01-25 04:36:39.045136') end timestamp('2019-01-25 14:10:39.045140')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset quota('7', 'gb/wk') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 04:35:39.045108') end timestamp('2019-01-25 14:07:39.045130')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('amazon-prime'), protocol('tcp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('1', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '40', 'mbps') allow protocol('snmp'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') block protocol('telnet'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') allow protocol('telnet'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '50', 'mbps') allow service('stremio'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') remove middlebox('load-balancer') set quota('9', 'gb/wk') block service('popcorn-time'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi') set quota('9', 'gb/wk') block protocol('icmp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('firewall') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow service('vimeo'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('ids'), middlebox('firewall') allow traffic('torrent'), service('instagram')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.85') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('parental-control'), middlebox('dpi') set quota('7', 'gb/wk') allow service('instagram'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') remove middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('vimeo'), protocol('icmp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') remove middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('amazon-prime'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '50', 'mbps') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') set bandwidth('min', '20', 'mbps') allow service('stremio'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') allow service('amazon-prime'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') add middlebox('dpi') set quota('5', 'gb/wk') allow protocol('tcp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set quota('4', 'gb/wk') block protocol('tcp'), service('stremio') start timestamp('2019-01-25 04:13:41.409231') end timestamp('2019-01-25 13:18:41.409235')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') unset bandwidth('max', '40', 'mbps') allow service('instagram'), service('facebook') start timestamp('2019-01-25 04:21:41.409203') end timestamp('2019-01-25 14:14:41.409225')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block protocol('sftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('sftp'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow protocol('quic'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('vimeo'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '70', 'mbps') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow traffic('social-media'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('2', 'gb/wk') block traffic('torrent'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') allow service('popcorn-time'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block service('popcorn-time'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.78') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '40', 'mbps') allow traffic('peer2peer'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') unset quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '90', 'mbps') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.63') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps') allow protocol('tcp'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('youtube'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids') set bandwidth('min', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:47:42.837104') end timestamp('2019-01-25 14:10:42.837110')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('ids'), middlebox('firewall') start timestamp('2019-01-25 02:58:42.837062') end timestamp('2019-01-25 08:42:42.837081')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') remove middlebox('ids'), middlebox('firewall') block protocol('ftp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control') block protocol('smtp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set quota('7', 'gb/wk') allow protocol('sftp'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.50') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('tcp'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '40', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') block service('amazon-prime'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '10', 'mbps') allow service('vimeo'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow service('vimeo'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('youtube'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('youtube'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.65') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('vimeo'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') block traffic('torrent'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set quota('5', 'gb/wk') allow service('vimeo'), protocol('telnet')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk') block protocol('udp'), service('netflix') start timestamp('2019-01-25 08:47:45.042986') end timestamp('2019-01-25 14:48:45.042990')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('dpi') unset quota('1', 'gb/wk') allow traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 02:10:45.042963') end timestamp('2019-01-25 07:58:45.042980')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.51') set bandwidth('min', '40', 'mbps') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') set bandwidth('min', '80', 'mbps') allow service('youtube'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('sftp'), service('netflix') start timestamp('2019-01-25 04:42:45.330209') end timestamp('2019-01-25 15:02:45.330229')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('parental-control') set quota('3', 'gb/wk') allow service('instagram'), traffic('social-media') start timestamp('2019-01-25 04:05:45.330162') end timestamp('2019-01-25 14:35:45.330200')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.164') add middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('vimeo'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('icmp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '40', 'mbps') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 09:54:45.616095') end timestamp('2019-01-25 14:16:45.616099')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '10', 'mbps') allow service('vimeo'), protocol('sftp') start timestamp('2019-01-25 02:13:45.616074') end timestamp('2019-01-25 08:41:45.616089')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') start timestamp('2019-01-25 04:23:45.979100') end timestamp('2019-01-25 14:59:45.979104')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 05:12:45.979071') end timestamp('2019-01-25 13:21:45.979094')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set quota('7', 'gb/wk') block protocol('https'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set quota('1', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') set bandwidth('max', '20', 'mbps') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '40', 'mbps') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set quota('9', 'gb/wk') allow traffic('peer2peer'), service('vimeo')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '60', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set quota('8', 'gb/wk') block service('stremio'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') remove middlebox('parental-control') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 09:29:47.374710') end timestamp('2019-01-25 13:07:47.374714')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.99') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') allow service('instagram') start timestamp('2019-01-25 03:35:47.374674') end timestamp('2019-01-25 08:49:47.374704')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('5', 'gb/wk') block service('youtube'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('firewall'), middlebox('load-balancer') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall') set quota('6', 'gb/wk') allow traffic('peer2peer'), protocol('quic')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block protocol('icmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('5', 'gb/wk') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') allow protocol('tcp'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('4', 'gb/wk') block protocol('quic'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') add middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') allow traffic('torrent'), protocol('http')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('1', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') set bandwidth('min', '40', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block traffic('torrent'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set quota('5', 'gb/wk') allow traffic('social-media'), service('facebook')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '60', 'mbps') block traffic('streaming'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow service('vimeo'), protocol('http')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('firewall') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') set bandwidth('max', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block service('vimeo'), protocol('quic') start timestamp('2019-01-25 09:56:49.806519') end timestamp('2019-01-25 14:00:49.806523')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') allow service('stremio'), service('netflix') start timestamp('2019-01-25 02:41:49.806496') end timestamp('2019-01-25 07:19:49.806513')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('5', 'gb/wk') block protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '70', 'mbps') block protocol('telnet'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi') allow service('youtube'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('2', 'gb/wk') allow service('vimeo'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set bandwidth('max', '30', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') set bandwidth('min', '70', 'mbps') allow protocol('telnet'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control') block traffic('social-media'), service('youtube') start timestamp('2019-01-25 09:46:50.762341') end timestamp('2019-01-25 13:42:50.762345')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi') block traffic('peer2peer'), service('stremio') start timestamp('2019-01-25 04:01:50.762295') end timestamp('2019-01-25 08:46:50.762335')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') allow service('popcorn-time'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control') block traffic('torrent'), service('netflix') start timestamp('2019-01-25 08:02:50.791300') end timestamp('2019-01-25 13:03:50.791304')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') allow traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 02:13:50.791292') end timestamp('2019-01-25 07:10:50.791296')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('9', 'gb/wk') block traffic('social-media'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow service('instagram'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') unset bandwidth('min', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset bandwidth('min', '10', 'mbps') block service('stremio'), traffic('streaming') start timestamp('2019-01-25 05:55:51.210931') end timestamp('2019-01-25 14:48:51.210935')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall') unset quota('6', 'gb/wk') allow service('amazon-prime'), service('stremio') start timestamp('2019-01-25 04:52:51.210908') end timestamp('2019-01-25 14:06:51.210925')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '80', 'mbps') block service('instagram'), protocol('ftp')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall') set quota('8', 'gb/wk') allow protocol('http'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 04:20:52.136935') end timestamp('2019-01-25 14:07:52.136939')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('smtp') start timestamp('2019-01-25 05:50:52.136912') end timestamp('2019-01-25 13:53:52.136929')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') remove middlebox('dpi') set quota('5', 'gb/wk') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall') set quota('7', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.74') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') block service('youtube'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 08:41:52.274676') end timestamp('2019-01-25 14:24:52.274681')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') allow service('stremio'), service('instagram') start timestamp('2019-01-25 02:07:52.274627') end timestamp('2019-01-25 07:08:52.274655')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.146') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '90', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('load-balancer') set bandwidth('min', '90', 'mbps') allow protocol('telnet'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi') set quota('9', 'gb/wk') block protocol('https'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.134') add middlebox('load-balancer'), middlebox('dpi') set quota('4', 'gb/wk') allow protocol('https'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('2', 'gb/wk') block service('netflix'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set quota('5', 'gb/wk') allow protocol('icmp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '90', 'mbps') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow protocol('tcp'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') start timestamp('2019-01-25 09:32:52.556020') end timestamp('2019-01-25 14:27:52.556023')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '90', 'mbps') start timestamp('2019-01-25 02:24:52.556012') end timestamp('2019-01-25 08:09:52.556016')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '10', 'mbps') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '30', 'mbps') allow traffic('torrent'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block protocol('icmp'), service('instagram') start timestamp('2019-01-25 04:45:53.441831') end timestamp('2019-01-25 13:10:53.441835')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') unset bandwidth('min', '70', 'mbps') allow traffic('peer2peer'), service('instagram') start timestamp('2019-01-25 04:18:53.441808') end timestamp('2019-01-25 14:56:53.441826')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') remove middlebox('load-balancer') block traffic('peer2peer'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow service('amazon-prime'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') unset bandwidth('max', '90', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('firewall'), middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') allow protocol('sftp'), protocol('quic') start timestamp('2019-01-25 08:10:53.682611') end timestamp('2019-01-25 14:09:53.682615')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi') block traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 03:50:53.682566') end timestamp('2019-01-25 08:06:53.682592')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') remove middlebox('dpi') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 09:38:53.859565') end timestamp('2019-01-25 13:34:53.859569')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 02:15:53.859543') end timestamp('2019-01-25 08:29:53.859559')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('quic'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('firewall'), middlebox('ids') set bandwidth('max', '70', 'mbps') allow protocol('snmp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '40', 'mbps') block protocol('icmp'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('min', '60', 'mbps') allow protocol('https'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall') set quota('8', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') add middlebox('firewall') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') allow service('vimeo'), protocol('ftp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('ids'), middlebox('dpi') set quota('8', 'gb/wk') allow protocol('http'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.125') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('min', '10', 'mbps') allow protocol('snmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('dpi'), middlebox('load-balancer') set quota('5', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set quota('3', 'gb/wk') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') allow protocol('quic'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') block protocol('udp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '90', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '50', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('firewall') set bandwidth('max', '70', 'mbps') allow service('instagram'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') block protocol('quic'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') block protocol('quic'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '50', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.87') remove middlebox('load-balancer') block service('vimeo'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') allow protocol('snmp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('parental-control'), middlebox('ids') start timestamp('2019-01-25 09:25:57.763760') end timestamp('2019-01-25 14:56:57.763764')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('firewall') start timestamp('2019-01-25 02:54:57.763740') end timestamp('2019-01-25 08:42:57.763754')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set quota('9', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set quota('1', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') block traffic('peer2peer'), service('vimeo') start timestamp('2019-01-25 05:47:57.836405') end timestamp('2019-01-25 14:37:57.836409')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('load-balancer') unset bandwidth('min', '40', 'mbps') block traffic('torrent'), protocol('udp') start timestamp('2019-01-25 04:16:57.836376') end timestamp('2019-01-25 14:56:57.836399')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.90') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.68') add middlebox('dpi') set quota('4', 'gb/wk') allow protocol('smtp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') block service('amazon-prime'), traffic('torrent') start timestamp('2019-01-25 08:14:58.828989') end timestamp('2019-01-25 13:14:58.828992')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') allow traffic('peer2peer'), service('bittorrent') start timestamp('2019-01-25 03:08:58.828981') end timestamp('2019-01-25 07:06:58.828984')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') unset bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), protocol('http') start timestamp('2019-01-25 04:37:59.034199') end timestamp('2019-01-25 13:39:59.034204')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('amazon-prime'), traffic('streaming') start timestamp('2019-01-25 05:12:59.034176') end timestamp('2019-01-25 14:06:59.034194')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control') block service('vimeo'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi') allow protocol('smtp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') block protocol('quic'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow service('netflix'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') block protocol('smtp'), traffic('streaming') start timestamp('2019-01-25 08:13:59.928731') end timestamp('2019-01-25 13:51:59.928735')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') add middlebox('ids') allow service('instagram'), traffic('streaming') start timestamp('2019-01-25 02:10:59.928724') end timestamp('2019-01-25 07:23:59.928727')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk') allow service('amazon-prime'), protocol('quic')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi') set quota('5', 'gb/wk') block protocol('sftp'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow protocol('snmp'), service('instagram')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '70', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('7', 'gb/wk') block service('facebook'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') add middlebox('dpi'), middlebox('parental-control') set quota('1', 'gb/wk') allow protocol('quic'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk') block service('vimeo'), traffic('streaming') start timestamp('2019-01-25 05:37:00.452362') end timestamp('2019-01-25 13:42:00.452366')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') allow service('amazon-prime'), protocol('udp') start timestamp('2019-01-25 05:56:00.452339') end timestamp('2019-01-25 13:07:00.452356')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('ids') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('stremio'), protocol('http')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow protocol('tcp'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.116') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('9', 'gb/wk') block traffic('peer2peer'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('ids'), middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') allow traffic('peer2peer')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('stremio'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') add middlebox('parental-control') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') remove middlebox('dpi') set bandwidth('max', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('ids'), middlebox('firewall') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') remove middlebox('firewall') block traffic('torrent'), service('popcorn-time') start timestamp('2019-01-25 09:34:01.139213') end timestamp('2019-01-25 14:40:01.139218')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.112') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') allow service('amazon-prime'), service('popcorn-time') start timestamp('2019-01-25 02:51:01.139192') end timestamp('2019-01-25 07:56:01.139207')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('load-balancer')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '50', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow traffic('streaming'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall') set quota('1', 'gb/wk') block traffic('streaming'), service('netflix') start timestamp('2019-01-25 04:53:01.227219') end timestamp('2019-01-25 13:42:01.227222')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi') set quota('5', 'gb/wk') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 05:29:01.227197') end timestamp('2019-01-25 13:39:01.227213')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('4', 'gb/wk') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids') set quota('9', 'gb/wk') allow protocol('sftp'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') block protocol('tcp'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk') allow protocol('icmp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.108') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('min', '50', 'mbps') allow protocol('https'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') block service('youtube'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '20', 'mbps') allow service('youtube'), service('popcorn-time')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.127') remove middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 09:44:01.761195') end timestamp('2019-01-25 14:28:01.761199')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') add middlebox('ids') start timestamp('2019-01-25 03:45:01.761174') end timestamp('2019-01-25 08:54:01.761189')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') add middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') remove middlebox('ids') set quota('7', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('7', 'gb/wk') allow traffic('peer2peer'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set bandwidth('min', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('3', 'gb/wk') block protocol('icmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('load-balancer') set quota('9', 'gb/wk') allow protocol('icmp'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('firewall') set bandwidth('max', '20', 'mbps') block service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall') set bandwidth('max', '80', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('parental-control'), middlebox('ids') set bandwidth('min', '30', 'mbps') block service('youtube'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '90', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '70', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.38') add middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set quota('6', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '10', 'mbps') block service('stremio'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.120') remove middlebox('firewall')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi') set bandwidth('max', '60', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') remove middlebox('ids') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('http'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.53') remove middlebox('dpi') set quota('2', 'gb/wk') block protocol('https'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('4', 'gb/wk') allow traffic('social-media'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer') set quota('6', 'gb/wk') block protocol('tcp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set quota('4', 'gb/wk') allow protocol('tcp'), protocol('smtp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') block traffic('torrent'), protocol('snmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('firewall'), middlebox('ids'), middlebox('dpi') set bandwidth('max', '20', 'mbps') allow protocol('tcp'), service('bittorrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') set bandwidth('min', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.176') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('ids'), middlebox('firewall') set bandwidth('max', '60', 'mbps') allow traffic('peer2peer'), protocol('telnet')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') block traffic('peer2peer'), traffic('streaming') start timestamp('2019-01-25 09:27:04.968435') end timestamp('2019-01-25 13:49:04.968455')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('parental-control') allow service('vimeo'), service('facebook') start timestamp('2019-01-25 02:45:04.968379') end timestamp('2019-01-25 07:16:04.968428')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') block protocol('tcp'), protocol('smtp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load-balancer') allow service('amazon-prime'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.131') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') block traffic('torrent'), traffic('streaming') start timestamp('2019-01-25 09:30:05.115754') end timestamp('2019-01-25 15:03:05.115758')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') allow service('vimeo'), service('netflix') start timestamp('2019-01-25 02:26:05.115733') end timestamp('2019-01-25 07:21:05.115749')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('parental-control'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi') unset bandwidth('max', '60', 'mbps') allow traffic('torrent'), service('instagram') start timestamp('2019-01-25 04:04:05.384795') end timestamp('2019-01-25 13:36:05.384800')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set quota('2', 'gb/wk') allow service('youtube'), service('netflix') start timestamp('2019-01-25 05:06:05.384770') end timestamp('2019-01-25 13:50:05.384790')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow protocol('smtp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow protocol('https'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('ids'), middlebox('firewall') set quota('9', 'gb/wk') block service('stremio'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') set quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') block protocol('https'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') allow protocol('snmp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '70', 'mbps') allow service('facebook'), service('netflix') start timestamp('2019-01-25 05:10:06.082850') end timestamp('2019-01-25 14:16:06.082854')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall') unset bandwidth('min', '30', 'mbps') block service('stremio'), service('bittorrent') start timestamp('2019-01-25 04:38:06.082828') end timestamp('2019-01-25 13:23:06.082844')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') block traffic('torrent'), protocol('http') start timestamp('2019-01-25 09:47:06.309394') end timestamp('2019-01-25 14:59:06.309398')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('firewall'), middlebox('parental-control') allow service('stremio'), service('instagram') start timestamp('2019-01-25 03:30:06.309372') end timestamp('2019-01-25 07:30:06.309388')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.98') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('load-balancer') allow protocol('icmp'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') block traffic('peer2peer'), protocol('icmp')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '80', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.124') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.117') set bandwidth('min', '40', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi') set quota('8', 'gb/wk') start timestamp('2019-01-25 05:19:06.675818') end timestamp('2019-01-25 14:05:06.675822')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('5', 'gb/wk') start timestamp('2019-01-25 04:49:06.675798') end timestamp('2019-01-25 14:09:06.675812')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('parental-control') allow traffic('social-media'), service('popcorn-time') start timestamp('2019-01-25 08:45:06.953830') end timestamp('2019-01-25 13:57:06.953834')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('ids') allow protocol('http'), service('popcorn-time') start timestamp('2019-01-25 03:51:06.953810') end timestamp('2019-01-25 07:27:06.953825')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi') set quota('4', 'gb/wk') allow service('amazon-prime'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') block traffic('torrent'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer') set bandwidth('min', '80', 'mbps') allow protocol('http'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('ids') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('pupil') add middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall') block traffic('peer2peer'), service('popcorn-time') start timestamp('2019-01-25 09:10:07.772073') end timestamp('2019-01-25 13:36:07.772077')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 03:35:07.772048') end timestamp('2019-01-25 07:30:07.772067')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('1', 'gb/wk') allow protocol('snmp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '70', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') remove middlebox('parental-control'), middlebox('ids') set quota('2', 'gb/wk') block service('vimeo'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') allow service('amazon-prime'), traffic('torrent')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.72') remove middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '80', 'mbps') allow service('facebook'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '30', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('https'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids') set quota('7', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') add middlebox('parental-control'), middlebox('firewall') unset bandwidth('max', '60', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('1', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') start timestamp('2019-01-25 08:03:08.737092') end timestamp('2019-01-25 13:49:08.737096')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('load-balancer'), middlebox('parental-control') start timestamp('2019-01-25 03:09:08.737070') end timestamp('2019-01-25 07:58:08.737086')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('stremio'), protocol('ftp')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') set quota('3', 'gb/wk') block protocol('http'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('9', 'gb/wk') allow protocol('http'), protocol('smtp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') block protocol('tcp'), service('netflix') start timestamp('2019-01-25 08:41:09.240698') end timestamp('2019-01-25 14:33:09.240702')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') remove middlebox('parental-control') allow traffic('social-media'), service('facebook') start timestamp('2019-01-25 03:02:09.240677') end timestamp('2019-01-25 07:25:09.240692')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') add middlebox('ids') set bandwidth('max', '80', 'mbps') block traffic('torrent'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') remove middlebox('dpi') set quota('2', 'gb/wk') block service('amazon-prime'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.91') remove middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') block protocol('https'), service('bittorrent') start timestamp('2019-01-25 09:33:09.461577') end timestamp('2019-01-25 14:19:09.461581')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.84') add middlebox('firewall') allow service('youtube'), service('facebook') start timestamp('2019-01-25 03:55:09.461556') end timestamp('2019-01-25 07:29:09.461571')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('max', '40', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('3', 'gb/wk') block service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('max', '80', 'mbps') allow service('stremio'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') add middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') allow traffic('torrent'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('torrent'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('3', 'gb/wk') allow protocol('udp'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') allow service('vimeo'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps') block traffic('peer2peer'), service('stremio')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('min', '10', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.110') add middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') add middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.102') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') unset bandwidth('max', '40', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.141') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '30', 'mbps') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '30', 'mbps') allow protocol('smtp'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('max', '20', 'mbps') block service('facebook'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('7', 'gb/wk') block protocol('icmp'), service('netflix')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('7', 'gb/wk') block protocol('smtp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('dpi'), middlebox('firewall') set quota('4', 'gb/wk') allow service('instagram'), protocol('ftp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('firewall') set quota('6', 'gb/wk') allow protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('stremio'), service('popcorn-time')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.86') add middlebox('parental-control') set bandwidth('max', '50', 'mbps') block service('stremio'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.82') remove middlebox('dpi'), middlebox('firewall') set quota('1', 'gb/wk') block service('vimeo'), service('instagram')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('6', 'gb/wk') allow service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control') set quota('5', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') set quota('2', 'gb/wk') allow service('amazon-prime'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.106') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('4', 'gb/wk') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('5', 'gb/wk') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('dpi') start timestamp('2019-01-25 08:16:11.936425') end timestamp('2019-01-25 13:55:11.936429')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('parental-control') start timestamp('2019-01-25 02:32:11.936403') end timestamp('2019-01-25 07:13:11.936418')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '40', 'mbps') block protocol('tcp'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('ftp'), traffic('streaming')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('parental-control') block protocol('udp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') allow traffic('peer2peer'), service('youtube')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') remove middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '20', 'mbps') block protocol('telnet'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('max', '40', 'mbps') allow protocol('sftp'), traffic('social-media')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.59') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('max', '60', 'mbps') block protocol('https'), protocol('http')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.169') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '30', 'mbps') allow service('amazon-prime'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('2', 'gb/wk') allow traffic('torrent'), protocol('smtp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '70', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') unset bandwidth('max', '40', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset quota('9', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('6', 'gb/wk') block service('stremio'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set quota('2', 'gb/wk') allow protocol('icmp'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('parental-control') set bandwidth('min', '70', 'mbps') block protocol('tcp'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '90', 'mbps') allow protocol('icmp'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.181') remove middlebox('firewall') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '60', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control') set bandwidth('min', '40', 'mbps') allow traffic('social-media'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') unset quota('3', 'gb/wk') block protocol('sftp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') unset quota('1', 'gb/wk') allow service('instagram'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('parental-control'), middlebox('ids'), middlebox('dpi') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall'), middlebox('dpi') set quota('5', 'gb/wk') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall') set quota('7', 'gb/wk') allow protocol('quic'), service('netflix')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental-control'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('load-balancer') block service('vimeo'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.37') add middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow service('instagram'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') unset quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.73') set bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.76') set quota('5', 'gb/wk') block protocol('telnet'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.77') set quota('2', 'gb/wk') allow protocol('quic'), protocol('telnet')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('max', '20', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids') set quota('9', 'gb/wk') block protocol('icmp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi') set quota('4', 'gb/wk') allow service('popcorn-time'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.79') remove middlebox('ids'), middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set quota('6', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.69') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') set bandwidth('max', '70', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') block protocol('icmp'), service('netflix') start timestamp('2019-01-25 08:18:15.197669') end timestamp('2019-01-25 13:07:15.197687')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer') block traffic('peer2peer'), service('facebook') start timestamp('2019-01-25 03:14:15.197630') end timestamp('2019-01-25 08:05:15.197662')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '70', 'mbps') block service('amazon-prime'), traffic('peer2peer')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set bandwidth('max', '50', 'mbps') allow service('bittorrent'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set quota('5', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set quota('4', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('8', 'gb/wk') allow service('amazon-prime'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('dpi') set quota('3', 'gb/wk') block service('vimeo'), protocol('https')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer') set quota('2', 'gb/wk') allow protocol('sftp'), service('instagram')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') unset bandwidth('max', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids') set quota('9', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('dpi') set bandwidth('max', '10', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set bandwidth('max', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.182') add middlebox('ids'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') add middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime'), service('instagram')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow protocol('sftp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') add middlebox('ids'), middlebox('dpi') set bandwidth('min', '80', 'mbps') block service('amazon-prime'), protocol('quic')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('load-balancer') set quota('9', 'gb/wk') allow service('facebook'), service('bittorrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.64') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') block service('vimeo'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.103') add middlebox('parental-control') set bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') remove middlebox('load-balancer') set quota('9', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.109') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('1', 'gb/wk')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('students') unset quota('4', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') remove middlebox('ids'), middlebox('dpi') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 08:27:16.653348') end timestamp('2019-01-25 13:44:16.653352')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.167') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall'), middlebox('load-balancer') allow traffic('torrent'), service('bittorrent') start timestamp('2019-01-25 02:30:16.653323') end timestamp('2019-01-25 08:10:16.653341')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('dpi') set bandwidth('min', '90', 'mbps') block service('stremio'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids') set quota('8', 'gb/wk') allow service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.54') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '90', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.81') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block service('instagram'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') add middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow service('instagram'), service('youtube')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '90', 'mbps') block traffic('social-media'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') set bandwidth('min', '50', 'mbps') allow service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 04:22:16.954111') end timestamp('2019-01-25 14:42:16.954116')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') unset quota('9', 'gb/wk') start timestamp('2019-01-25 05:59:16.954086') end timestamp('2019-01-25 14:36:16.954105')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('3', 'gb/wk') block traffic('peer2peer'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.180') add middlebox('firewall'), middlebox('ids') set quota('5', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.80') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.17.71') set bandwidth('min', '50', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') add middlebox('dpi'), middlebox('parental-control') set quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer') set bandwidth('max', '90', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') start timestamp('2019-01-25 09:57:17.037778') end timestamp('2019-01-25 14:37:17.037797')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') start timestamp('2019-01-25 03:07:17.037739') end timestamp('2019-01-25 07:50:17.037771')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set bandwidth('min', '20', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids') set bandwidth('max', '80', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') unset bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.154') set quota('3', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '80', 'mbps') block service('instagram'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), service('facebook')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('dpi') set bandwidth('max', '60', 'mbps') allow service('instagram'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('firewall') set quota('3', 'gb/wk') allow traffic('torrent'), protocol('ftp')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.160') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.156') unset bandwidth('min', '10', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '40', 'mbps') block service('stremio'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow protocol('smtp'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') allow service('vimeo'), traffic('streaming')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set quota('9', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('8', 'gb/wk') allow traffic('torrent'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set quota('1', 'gb/wk') block service('bittorrent'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('parental-control') set quota('1', 'gb/wk') block service('youtube'), traffic('social-media')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.61') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('stremio'), protocol('icmp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.60') remove middlebox('ids'), middlebox('dpi') set bandwidth('max', '10', 'mbps') block traffic('social-media'), service('facebook')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('3', 'gb/wk') start timestamp('2019-01-25 04:43:18.024888') end timestamp('2019-01-25 14:54:18.024892')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('load-balancer'), middlebox('dpi') unset bandwidth('min', '60', 'mbps') start timestamp('2019-01-25 05:38:18.024863') end timestamp('2019-01-25 13:09:18.024882')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.172') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '60', 'mbps') block service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') add middlebox('parental-control') set bandwidth('min', '20', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('ids'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('2', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi') set bandwidth('min', '40', 'mbps') block traffic('peer2peer'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') unset quota('8', 'gb/wk') allow traffic('peer2peer')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.177') add middlebox('parental-control'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('min', '70', 'mbps') allow traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids') set quota('3', 'gb/wk') allow service('amazon-prime')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') add middlebox('load-balancer'), middlebox('ids') set quota('6', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('parental-control'), middlebox('firewall'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') allow service('netflix'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') allow service('instagram'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('residence_hall') set bandwidth('max', '10', 'mbps') block protocol('snmp'), service('bittorrent')", 
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '20', 'mbps') allow protocol('telnet'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('ids'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control'), middlebox('firewall') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') remove middlebox('load-balancer') set bandwidth('min', '40', 'mbps') allow service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('3', 'gb/wk') allow protocol('smtp'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') remove middlebox('ids'), middlebox('parental-control'), middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set quota('1', 'gb/wk') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 08:45:19.098114') end timestamp('2019-01-25 13:34:19.098119')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') add middlebox('dpi') set quota('6', 'gb/wk') allow traffic('peer2peer'), traffic('torrent') start timestamp('2019-01-25 03:05:19.098088') end timestamp('2019-01-25 07:12:19.098108')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '10', 'mbps') allow service('youtube'), traffic('social-media') start timestamp('2019-01-25 04:38:19.250972') end timestamp('2019-01-25 13:14:19.250977')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall') set bandwidth('max', '70', 'mbps') allow protocol('sftp'), service('stremio') start timestamp('2019-01-25 05:17:19.250942') end timestamp('2019-01-25 13:35:19.250966')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer') set quota('4', 'gb/wk') block traffic('torrent'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') add middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer') set quota('1', 'gb/wk') allow traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '60', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.119') unset bandwidth('min', '20', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.27.121') unset quota('8', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') set bandwidth('max', '30', 'mbps') block traffic('peer2peer'), service('netflix')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '90', 'mbps') allow service('popcorn-time'), traffic('streaming')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.89') remove middlebox('firewall') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('load-balancer') unset bandwidth('max', '60', 'mbps')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('parental-control') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '40', 'mbps')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('youtube'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps') allow traffic('torrent'), service('youtube')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall') set quota('8', 'gb/wk') block protocol('http'), service('facebook') start timestamp('2019-01-25 08:13:20.472398') end timestamp('2019-01-25 13:30:20.472402')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set quota('7', 'gb/wk') allow service('netflix'), service('popcorn-time') start timestamp('2019-01-25 03:54:20.472376') end timestamp('2019-01-25 07:39:20.472392')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.158') remove middlebox('firewall') set bandwidth('max', '30', 'mbps') block protocol('udp'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') add middlebox('firewall'), middlebox('ids'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '50', 'mbps') allow traffic('peer2peer'), service('stremio')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.128') remove middlebox('firewall'), middlebox('ids') set quota('8', 'gb/wk') block protocol('icmp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('load-balancer') set quota('8', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '80', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set bandwidth('max', '90', 'mbps') block protocol('tcp'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('dpi'), middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '10', 'mbps') allow service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer') set bandwidth('min', '10', 'mbps') allow service('vimeo'), protocol('sftp') start timestamp('2019-01-25 04:05:21.050592') end timestamp('2019-01-25 13:11:21.050596')", 
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi') unset bandwidth('min', '10', 'mbps') allow service('facebook'), traffic('social-media') start timestamp('2019-01-25 05:08:21.050562') end timestamp('2019-01-25 14:44:21.050585')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.56') remove middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('firewall') set bandwidth('min', '80', 'mbps') block traffic('peer2peer'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.49') add middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '80', 'mbps') allow service('facebook'), protocol('ftp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') unset bandwidth('min', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') set bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.165') add middlebox('parental-control'), middlebox('load-balancer') set bandwidth('min', '30', 'mbps') block service('stremio'), service('youtube') start timestamp('2019-01-25 05:29:21.414185') end timestamp('2019-01-25 13:06:21.414189')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.170') remove middlebox('firewall') set bandwidth('min', '80', 'mbps') allow service('stremio'), service('bittorrent') start timestamp('2019-01-25 04:19:21.414162') end timestamp('2019-01-25 15:03:21.414180')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('load-balancer'), middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set bandwidth('min', '60', 'mbps') block traffic('social-media'), service('facebook') start timestamp('2019-01-25 05:25:21.570588') end timestamp('2019-01-25 15:01:21.570592')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('dpi') set bandwidth('max', '90', 'mbps') allow service('vimeo'), service('instagram') start timestamp('2019-01-25 04:57:21.570564') end timestamp('2019-01-25 14:58:21.570582')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') add middlebox('load-balancer') set bandwidth('max', '30', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.31.135') remove middlebox('dpi') set quota('9', 'gb/wk')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('firewall'), middlebox('parental-control') set quota('5', 'gb/wk') block traffic('torrent'), service('youtube')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.107') add middlebox('dpi') unset quota('9', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer') set quota('4', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('load-balancer'), middlebox('ids'), middlebox('parental-control'), middlebox('dpi') set bandwidth('max', '90', 'mbps')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') add middlebox('ids'), middlebox('load-balancer') set bandwidth('min', '60', 'mbps') allow service('vimeo'), protocol('sftp')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('firewall'), middlebox('dpi') set bandwidth('min', '20', 'mbps') allow service('amazon-prime'), service('stremio')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('firewall') start timestamp('2019-01-25 08:47:23.022179') end timestamp('2019-01-25 14:30:23.022184')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('dpi') start timestamp('2019-01-25 03:10:23.022116') end timestamp('2019-01-25 07:43:23.022166')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '70', 'mbps') start timestamp('2019-01-25 05:10:23.081129') end timestamp('2019-01-25 13:49:23.081133')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental-control') unset quota('3', 'gb/wk') start timestamp('2019-01-25 05:20:23.081104') end timestamp('2019-01-25 14:02:23.081123')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('7', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.173') remove middlebox('ids') unset quota('8', 'gb/wk') block traffic('torrent'), service('facebook')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('max', '40', 'mbps') allow service('stremio'), protocol('smtp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('dpi'), middlebox('load-balancer') set bandwidth('max', '30', 'mbps') block service('stremio'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.67') add middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '10', 'mbps') allow service('amazon-prime'), traffic('torrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('faculty') remove middlebox('dpi'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('firewall'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('min', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('dpi'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids') start timestamp('2019-01-25 09:23:23.889270') end timestamp('2019-01-25 14:07:23.889273')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental-control') start timestamp('2019-01-25 02:52:23.889262') end timestamp('2019-01-25 08:58:23.889266')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.52') unset quota('8', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.57') unset bandwidth('min', '50', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('dpi'), middlebox('parental-control') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.12.55') add middlebox('firewall'), middlebox('parental-control') allow service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('firewall'), middlebox('parental-control') block traffic('peer2peer'), traffic('torrent')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') allow traffic('torrent'), service('instagram')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.97') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall') set bandwidth('min', '70', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') add middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') block traffic('torrent'), traffic('social-media') start timestamp('2019-01-25 08:50:23.980248') end timestamp('2019-01-25 13:32:23.980252')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi') allow service('stremio'), protocol('snmp') start timestamp('2019-01-25 03:43:23.980227') end timestamp('2019-01-25 07:28:23.980243')", 
            "type": "time"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids') set quota('2', 'gb/wk') allow service('amazon-prime')", 
            "sentence": "define intent stnIntent: for group('professors') remove middlebox('load-balancer') set quota('2', 'gb/wk') block service('facebook'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') add middlebox('parental-control') block service('youtube'), service('netflix') start timestamp('2019-01-25 08:13:24.651744') end timestamp('2019-01-25 14:04:24.651748')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.148') remove middlebox('firewall'), middlebox('dpi') allow protocol('sftp'), service('netflix') start timestamp('2019-01-25 03:50:24.651718') end timestamp('2019-01-25 08:00:24.651737')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('dpi') set quota('4', 'gb/wk')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('min', '90', 'mbps') block traffic('social-media'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') add middlebox('ids'), middlebox('firewall'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control') set bandwidth('max', '70', 'mbps') allow traffic('peer2peer'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer') block protocol('tcp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi'), middlebox('firewall') allow traffic('torrent'), traffic('streaming')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') add middlebox('load-balancer'), middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('7', 'gb/wk') allow protocol('snmp'), traffic('social-media')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.21.83') add middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('parental-control'), middlebox('ids') set quota('4', 'gb/wk') block protocol('tcp'), service('youtube')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set bandwidth('max', '30', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('dpi'), middlebox('firewall'), middlebox('load-balancer') set bandwidth('max', '50', 'mbps') allow protocol('http'), service('facebook')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('2', 'gb/wk') block protocol('https'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.24.113') add middlebox('parental-control'), middlebox('dpi') set quota('5', 'gb/wk') allow traffic('peer2peer'), protocol('https')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') unset bandwidth('min', '30', 'mbps') allow service('instagram'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('firewall') set quota('5', 'gb/wk') block traffic('peer2peer'), protocol('smtp')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set bandwidth('max', '20', 'mbps') allow service('stremio'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('staff') remove middlebox('dpi'), middlebox('ids'), middlebox('firewall') set quota('2', 'gb/wk') allow service('vimeo')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('firewall'), middlebox('dpi'), middlebox('parental-control') start timestamp('2019-01-25 09:58:25.303941') end timestamp('2019-01-25 13:23:25.303945')", 
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load-balancer') start timestamp('2019-01-25 02:55:25.303917') end timestamp('2019-01-25 07:29:25.303934')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('8', 'gb/wk') block service('stremio'), service('instagram')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.26') add middlebox('firewall') set quota('6', 'gb/wk') allow service('stremio'), service('netflix')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('parental-control') set quota('7', 'gb/wk') block protocol('icmp'), service('youtube')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall'), middlebox('ids') set bandwidth('max', '60', 'mbps') allow protocol('smtp'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.166') add middlebox('dpi'), middlebox('firewall'), middlebox('ids') set quota('1', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.162') remove middlebox('load-balancer') set bandwidth('min', '30', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') set bandwidth('max', '10', 'mbps')", 
            "sentence": "define intent stnIntent: for group('professors') unset bandwidth('min', '30', 'mbps')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') set quota('7', 'gb/wk') block service('vimeo'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') set quota('4', 'gb/wk') allow traffic('torrent'), protocol('udp')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.95') unset quota('6', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.104') unset quota('6', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('prof') remove middlebox('ids'), middlebox('dpi') set quota('2', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('dpi') set quota('1', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids'), middlebox('firewall'), middlebox('parental-control') set quota('8', 'gb/wk') block traffic('peer2peer'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.41.178') add middlebox('parental-control'), middlebox('load-balancer') set quota('6', 'gb/wk') allow traffic('torrent'), service('popcorn-time')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi'), middlebox('ids') set bandwidth('max', '50', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('ids'), middlebox('dpi') set bandwidth('min', '50', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('dpi'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental-control'), middlebox('ids'), middlebox('firewall') set quota('7', 'gb/wk')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('ids'), middlebox('load-balancer') set quota('2', 'gb/wk') block protocol('sftp'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental-control'), middlebox('ids'), middlebox('dpi'), middlebox('firewall') set quota('6', 'gb/wk') allow service('amazon-prime'), traffic('peer2peer')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') add middlebox('firewall'), middlebox('load-balancer'), middlebox('ids') set quota('9', 'gb/wk') block service('amazon-prime'), service('netflix')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load-balancer') set bandwidth('max', '70', 'mbps') block service('vimeo'), protocol('snmp')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') unset quota('7', 'gb/wk')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') unset quota('2', 'gb/wk')", 
            "type": "qos"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('prof') set quota('3', 'gb/wk')", 
            "sentence": "define intent stnIntent: for group('professors') set bandwidth('max', '40', 'mbps')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') remove middlebox('load-balancer'), middlebox('firewall'), middlebox('ids'), middlebox('dpi'), middlebox('parental-control') block traffic('streaming'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('ids'), middlebox('load-balancer'), middlebox('firewall'), middlebox('dpi') allow service('netflix'), traffic('streaming')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.159') add middlebox('firewall'), middlebox('dpi') set bandwidth('min', '80', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.151') remove middlebox('ids') set bandwidth('min', '20', 'mbps')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.144') add middlebox('load-balancer'), middlebox('ids') set bandwidth('min', '60', 'mbps')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.32.140') remove middlebox('firewall') set quota('4', 'gb/wk')", 
            "type": "hierarchical"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('staff') set bandwidth('min', '30', 'mbps') block service('amazon-prime'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.155') set bandwidth('max', '90', 'mbps') allow service('facebook'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professor') remove middlebox('firewall'), middlebox('ids'), middlebox('load-balancer') block traffic('peer2peer'), traffic('social-media')", 
            "sentence": "define intent stnIntent: for group('professors') add middlebox('ids'), middlebox('dpi'), middlebox('load-balancer'), middlebox('parental-control'), middlebox('firewall') allow service('amazon-prime'), service('bittorrent')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('dpi') set quota('7', 'gb/wk') block service('amazon-prime'), traffic('torrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.14.62') add middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('2', 'gb/wk') allow service('youtube'), service('popcorn-time')", 
            "type": "non_coreferent"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('professors') remove middlebox('firewall'), middlebox('parental-control'), middlebox('dpi') set quota('8', 'gb/wk') block protocol('http'), protocol('udp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') add middlebox('firewall') set quota('2', 'gb/wk') allow traffic('peer2peer'), service('stremio')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('dpi'), middlebox('firewall'), middlebox('ids'), middlebox('parental-control') set quota('3', 'gb/wk') block protocol('http'), traffic('streaming')", 
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental-control'), middlebox('dpi'), middlebox('load-balancer') set quota('7', 'gb/wk') allow traffic('torrent'), service('youtube')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall'), middlebox('ids') set quota('3', 'gb/wk') block service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 05:03:27.308890') end timestamp('2019-01-25 13:55:27.308894')", 
            "sentence": "define intent stnIntent: for group('staff') add middlebox('dpi'), middlebox('parental-control'), middlebox('firewall') unset quota('7', 'gb/wk') allow service('amazon-prime'), service('vimeo') start timestamp('2019-01-25 05:32:27.308858') end timestamp('2019-01-25 14:37:27.308884')", 
            "type": "time"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental-control'), middlebox('dpi') set bandwidth('min', '60', 'mbps') block traffic('peer2peer'), service('bittorrent')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('dpi'), middlebox('firewall') set bandwidth('min', '60', 'mbps') allow protocol('https'), service('bittorrent')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load-balancer'), middlebox('parental-control'), middlebox('ids') set quota('5', 'gb/wk') block traffic('streaming'), service('popcorn-time')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.34.161') add middlebox('load-balancer'), middlebox('dpi') set quota('7', 'gb/wk') allow protocol('smtp'), service('netflix')", 
            "type": "domain"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('scholarly_person') set bandwidth('max', '60', 'mbps') block service('instagram'), service('facebook')", 
            "sentence": "define intent stnIntent: for group('students') set quota('7', 'gb/wk') block traffic('peer2peer'), traffic('social-media')", 
            "type": "synonym"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('staff') remove middlebox('ids') set bandwidth('max', '80', 'mbps') block protocol('https'), traffic('streaming')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('parental-control'), middlebox('dpi'), middlebox('ids'), middlebox('load-balancer') set bandwidth('max', '20', 'mbps') allow service('facebook'), traffic('social-media')", 
            "type": "domain"
        }, 
        {
            "contradiction": 1, 
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('parental-control'), middlebox('load-balancer'), middlebox('firewall') set quota('9', 'gb/wk') block service('amazon-prime'), protocol('tcp')", 
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load-balancer'), middlebox('parental-control'), middlebox('dpi'), middlebox('ids') set quota('7', 'gb/wk') allow service('vimeo'), service('stremio')", 
            "type": "negation"
        }, 
        {
            "contradiction": 0, 
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')", 
            "sentence": "define intent stnIntent: for group('dorms') set quota('3', 'gb/wk')", 
            "type": "qos"
        }
    ], 
    "summary": {
        "contradiction": {
            "byType": {
                "domain": 176, 
                "hierarchical": 211, 
                "negation": 211, 
                "qos": 221, 
                "synonym": 202, 
                "time": 212
            }, 
            "count": 1233
        }, 
        "entailment": {
            "byType": {
                "domain": 177, 
                "hierarchical": 180, 
                "negation": 207, 
                "non_coreferent": 185, 
                "qos": 187, 
                "synonym": 153, 
                "time": 178
            }, 
            "count": 1267
        }
    }
}